// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

export type AddIncidentDebriefUserMessageAttributes = {
    messageContent: string;
};

export type AddIncidentDebriefUserMessageRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: AddIncidentDebriefUserMessageAttributes;
};

export type AddIncidentDebriefUserMessageResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebriefMessage;
};

export type AddSystemAnalysisComponentAttributes = {
    componentId: string;
    position: SystemAnalysisDiagramPosition;
};

export type AddSystemAnalysisComponentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: AddSystemAnalysisComponentAttributes;
};

export type AddSystemAnalysisComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisComponent;
};

export type AddWatchedOncallRosterResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<OncallRoster>;
};

export type Alert = {
    attributes: AlertAttributes;
    id: string;
};

export type AlertAttributes = {
    definition: string;
    description: string;
    roster?: ExpandableOncallRosterAttributes;
    title: string;
};

export type AlertIncidentLink = {
    attributes: AlertIncidentLinkAttributes;
    id: string;
};

export type AlertIncidentLinkAttributes = {
    alertId: string;
    description: string;
    incidentId: string;
};

export type AlertMetrics = {
    accurate: number;
    accurateUnknown: number;
    actionable: number;
    docsAvailable: number;
    docsNeedsUpdate: number;
    feedbacks: number;
    incidentLinks: number;
    interrupts: number;
    nightInterrupts: number;
    triggers: number;
};

export type AuthSession = {
    expiresAt: string;
    organization: Organization;
    user: User;
};

export type AuthSessionProviderConfig = {
    enabled: boolean;
    name: string;
    startFlowEndpoint: string;
};

export type AuthSessionsConfig = {
    providers: Array<AuthSessionProviderConfig>;
};

export type CreateEventAnnotationRequestAttributes = {
    eventId: string;
    minutesOccupied: number;
    notes: string;
    tags: Array<string>;
};

export type CreateEventAnnotationRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateEventAnnotationRequestAttributes;
};

export type CreateEventAnnotationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: EventAnnotation;
};

export type CreateIncidentAttributes = {
    summary: string;
    title: string;
};

export type CreateIncidentDebriefQuestionAttributes = {
    content: string;
};

export type CreateIncidentDebriefQuestionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentDebriefQuestionAttributes;
};

export type CreateIncidentDebriefQuestionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebriefQuestion;
};

export type CreateIncidentEventAttributes = {
    isKey?: boolean;
    kind: 'observation' | 'action' | 'decision' | 'context';
    timestamp: string;
    title: string;
};

export type CreateIncidentEventRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentEventAttributes;
};

export type CreateIncidentEventResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentEvent;
};

export type CreateIncidentFieldAttributes = {
    incidentType?: string;
    name: string;
    options: Array<CreateIncidentFieldOptionAttributes>;
    required: boolean;
};

export type CreateIncidentFieldOptionAttributes = {
    fieldOptionType: 'custom' | 'derived';
    value: string;
};

export type CreateIncidentFieldRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentFieldAttributes;
};

export type CreateIncidentFieldResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentField;
};

export type CreateIncidentMilestoneAttributes = {
    description: string;
    kind: 'impact' | 'detection' | 'investigation' | 'mitigation' | 'resolution';
    timestamp: string;
};

export type CreateIncidentMilestoneRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentMilestoneAttributes;
};

export type CreateIncidentMilestoneResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentMilestone;
};

export type CreateIncidentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentAttributes;
};

export type CreateIncidentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Incident;
};

export type CreateIncidentRoleAttributes = {
    name: string;
    required: boolean;
};

export type CreateIncidentRoleRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentRoleAttributes;
};

export type CreateIncidentRoleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentRole;
};

export type CreateIncidentSeverityAttributes = {
    rank: number;
    title: string;
};

export type CreateIncidentSeverityRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentSeverityAttributes;
};

export type CreateIncidentSeverityResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentSeverity;
};

export type CreateIncidentTagAttributes = {
    value: string;
};

export type CreateIncidentTagRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentTagAttributes;
};

export type CreateIncidentTagResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentTag;
};

export type CreateIncidentTypeAttributes = {
    name: string;
};

export type CreateIncidentTypeRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentTypeAttributes;
};

export type CreateIncidentTypeResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentType;
};

export type CreateIntegrationRequestAttributes = {
    config: {
        [key: string]: string;
    };
    enabled: boolean;
    kind: string;
    provider_id: string;
};

export type CreateIntegrationRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIntegrationRequestAttributes;
};

export type CreateIntegrationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Integration;
};

export type CreateMeetingScheduleAttributes = {
    attendees: MeetingAttendees;
    description?: string;
    durationMinutes: number;
    name: string;
    numRepetitions?: number;
    repeatMonthlyOn?: 'same_day' | 'same_weekday';
    repeats: 'daily' | 'weekly' | 'monthly';
    repetitionStep: number;
    sessionTitle: string;
    startsAt: string;
    untilDate?: string;
};

export type CreateMeetingScheduleRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateMeetingScheduleAttributes;
};

export type CreateMeetingScheduleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSchedule;
};

export type CreateMeetingSessionAttributes = {
    attendees: MeetingAttendees;
    description?: string;
    documentTemplateId?: string;
    durationMinutes: number;
    startsAt: string;
    title: string;
};

export type CreateMeetingSessionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateMeetingSessionAttributes;
};

export type CreateMeetingSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSession;
};

export type CreateOncallShiftHandoverTemplateRequestAttributes = {
    sections: Array<OncallShiftHandoverSection>;
};

export type CreateOncallShiftHandoverTemplateRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateOncallShiftHandoverTemplateRequestAttributes;
};

export type CreateOncallShiftHandoverTemplateResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandoverTemplate;
};

export type CreatePlaybookAttributes = {
    content: string;
    title: string;
};

export type CreatePlaybookRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreatePlaybookAttributes;
};

export type CreatePlaybookResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Playbook;
};

export type CreateRetrospectiveAttributes = {
    incidentId: string;
    systemAnalysis: boolean;
};

export type CreateRetrospectiveCommentAttributes = {
    content: unknown;
};

export type CreateRetrospectiveCommentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateRetrospectiveCommentAttributes;
};

export type CreateRetrospectiveCommentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveComment;
};

export type CreateRetrospectiveRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateRetrospectiveAttributes;
};

export type CreateRetrospectiveResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Retrospective;
};

export type CreateRetrospectiveReviewRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: RetrospectiveReviewAttributes;
};

export type CreateRetrospectiveReviewResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveReview;
};

export type CreateSystemAnalysisRelationshipAttributes = {
    controlActions: Array<SystemAnalysisRelationshipControlActionAttributes>;
    description: string;
    feedbackSignals: Array<SystemAnalysisRelationshipFeedbackSignalAttributes>;
    sourceId: string;
    targetId: string;
};

export type CreateSystemAnalysisRelationshipRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateSystemAnalysisRelationshipAttributes;
};

export type CreateSystemAnalysisRelationshipResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisRelationship;
};

export type CreateSystemComponentAttributes = {
    constraints: Array<SystemComponentConstraintAttributes>;
    controls: Array<SystemComponentControlAttributes>;
    description: string;
    kindId: string;
    name: string;
    properties: {
        [key: string]: unknown;
    };
    signals: Array<SystemComponentSignalAttributes>;
};

export type CreateSystemComponentConstraintAttributes = {
    description: string;
    label: string;
};

export type CreateSystemComponentConstraintRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateSystemComponentConstraintAttributes;
};

export type CreateSystemComponentConstraintResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentConstraint;
};

export type CreateSystemComponentControlAttributes = {
    description: string;
    label: string;
};

export type CreateSystemComponentControlRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateSystemComponentControlAttributes;
};

export type CreateSystemComponentControlResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentControl;
};

export type CreateSystemComponentKindAttributes = {
    description: string;
    label: string;
};

export type CreateSystemComponentKindRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateSystemComponentKindAttributes;
};

export type CreateSystemComponentKindResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentKind;
};

export type CreateSystemComponentRelationshipAttributes = {
    description: string;
    sourceComponentId: string;
    targetComponentId: string;
};

export type CreateSystemComponentRelationshipRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateSystemComponentRelationshipAttributes;
};

export type CreateSystemComponentRelationshipResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentRelationship;
};

export type CreateSystemComponentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateSystemComponentAttributes;
};

export type CreateSystemComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponent;
};

export type CreateSystemComponentSignalAttributes = {
    description: string;
    label: string;
};

export type CreateSystemComponentSignalRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateSystemComponentSignalAttributes;
};

export type CreateSystemComponentSignalResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentSignal;
};

export type CreateTaskAttributes = {
    title: string;
};

export type CreateTaskRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateTaskAttributes;
};

export type CreateTaskResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Task;
};

export type CreateTeamAttributes = {
    name: string;
};

export type CreateTeamRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateTeamAttributes;
};

export type CreateTeamResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Team;
};

export type DocumentEditorSession = {
    connectionUrl: string;
    documentId: string;
    token: string;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail>;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type Event = {
    attributes: EventAttributes;
    id: string;
};

export type EventAnnotation = {
    attributes: EventAnnotationAttributes;
    id: string;
};

export type EventAnnotationAttributes = {
    creator: ExpandableUserAttributes;
    event: ExpandableEventAttributes;
    minutesOccupied: number;
    notes: string;
    tags: Array<string>;
};

export type EventAttributes = {
    alert_id?: string;
    description: string;
    kind: string;
    roster_id?: string;
    timestamp: string;
    title: string;
};

export type ExpandableEventAttributes = {
    attributes?: EventAttributes;
    id: string;
};

export type ExpandableOncallRosterAttributes = {
    attributes?: OncallRosterAttributes;
    id: string;
};

export type ExpandableRetrospectiveCommentAttributes = {
    attributes?: RetrospectiveCommentAttributes;
    id: string;
};

export type ExpandableUser = {
    attributes?: User;
    id: string;
};

export type ExpandableUserAttributes = {
    attributes?: UserAttributes;
    id: string;
};

export type ExternalTicket = {
    provider: string;
};

export type GetAdjacentOncallShiftsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftsAdjacent;
};

export type GetAlertMetricsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: AlertMetrics;
};

export type GetAlertResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Alert;
};

export type GetAuthSessionsConfigResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: AuthSessionsConfig;
};

export type GetCurrentAuthSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: AuthSession;
};

export type GetEventResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Event;
};

export type GetIncidentDebriefQuestionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebriefQuestion;
};

export type GetIncidentDebriefResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebrief;
};

export type GetIncidentFieldResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentField;
};

export type GetIncidentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Incident;
};

export type GetIncidentRoleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentRole;
};

export type GetIncidentSeverityResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentSeverity;
};

export type GetIncidentTagResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentTag;
};

export type GetIncidentTypeResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentType;
};

export type GetIncidentUserDebriefResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebrief;
};

export type GetIntegrationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Integration;
};

export type GetMeetingScheduleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSchedule;
};

export type GetMeetingSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSession;
};

export type GetOncallRosterMetricsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallRosterMetrics;
};

export type GetOncallRosterResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallRoster;
};

export type GetOncallShiftBurdenMetricWeightsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftBurdenMetricWeights;
};

export type GetOncallShiftHandoverResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandover;
};

export type GetOncallShiftHandoverTemplateResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandoverTemplate;
};

export type GetOncallShiftMetricsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftMetrics;
};

export type GetOncallShiftResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShift;
};

export type GetPlaybookResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Playbook;
};

export type GetRetrospectiveCommentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveComment;
};

export type GetRetrospectiveForIncidentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Retrospective;
};

export type GetRetrospectiveResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Retrospective;
};

export type GetSystemAnalysisComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisComponent;
};

export type GetSystemAnalysisRelationshipResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisRelationship;
};

export type GetSystemAnalysisResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysis;
};

export type GetSystemComponentConstraintResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentConstraint;
};

export type GetSystemComponentControlResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentControl;
};

export type GetSystemComponentKindResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentKind;
};

export type GetSystemComponentRelationshipResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentRelationship;
};

export type GetSystemComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponent;
};

export type GetSystemComponentSignalResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentSignal;
};

export type GetTaskResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Task;
};

export type GetTeamResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Team;
};

export type GetUserOncallInformationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: UserOncallInformation;
};

export type GetUserResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: User;
};

export type Incident = {
    attributes: IncidentAttributes;
    id: string;
};

export type IncidentAttributes = {
    chatChannel: IncidentChatChannel;
    closedAt: string;
    currentStatus: 'started' | 'mitigated' | 'resolved' | 'closed';
    linkedIncidents: Array<IncidentLink>;
    openedAt: string;
    private: boolean;
    retrospectiveId?: string;
    roles: Array<IncidentRoleAssignment>;
    severity: IncidentSeverity;
    slug: string;
    summary: string;
    tags: Array<IncidentTag>;
    tasks: Array<Task>;
    teams: Array<IncidentTeamAssignment>;
    ticket?: ExternalTicket;
    title: string;
    type: IncidentType;
};

export type IncidentChatChannel = {
    id: string;
    private: boolean;
    provider: 'slack' | 'ms_teams';
    url: string;
};

export type IncidentDebrief = {
    attributes: IncidentDebriefAttributes;
    id: string;
};

export type IncidentDebriefAttributes = {
    incidentId: string;
    required: boolean;
    started: boolean;
    userId: string;
};

export type IncidentDebriefMessage = {
    attributes: IncidentDebriefMessageAttributes;
    id: string;
};

export type IncidentDebriefMessageAttributes = {
    body: string;
    createdAt: string;
    type: 'user' | 'assistant' | 'question';
};

export type IncidentDebriefQuestion = {
    attributes: IncidentDebriefQuestionAttributes;
    id: string;
};

export type IncidentDebriefQuestionAttributes = {
    content: string;
};

export type IncidentDebriefSuggestion = {
    attributes: IncidentDebriefSuggestionAttributes;
    id: string;
};

export type IncidentDebriefSuggestionAttributes = {
    content: string;
    ignored: boolean;
};

export type IncidentEvent = {
    attributes: IncidentEventAttributes;
    id: string;
};

export type IncidentEventAttributes = {
    contributingFactors: Array<IncidentEventContributingFactor>;
    decisionContext?: IncidentEventDecisionContext;
    description?: string;
    evidence: Array<IncidentEventEvidence>;
    incidentId: string;
    isKey: boolean;
    kind: 'observation' | 'action' | 'decision' | 'context';
    sequence: number;
    systemContext: Array<IncidentEventSystemComponent>;
    timestamp: string;
    title: string;
};

export type IncidentEventContributingFactor = {
    attributes: IncidentEventContributingFactorAttributes;
    id: string;
};

export type IncidentEventContributingFactorAttributes = {
    description: string;
    factorTypeId: string;
    links: Array<string>;
};

export type IncidentEventContributingFactorCategory = {
    attributes: IncidentEventContributingFactorCategoryAttributes;
    id: string;
};

export type IncidentEventContributingFactorCategoryAttributes = {
    description: string;
    factorTypes: Array<IncidentEventContributingFactorType>;
    name: string;
};

export type IncidentEventContributingFactorType = {
    attributes: IncidentEventContributingFactorTypeAttributes;
    id: string;
};

export type IncidentEventContributingFactorTypeAttributes = {
    description: string;
    examples: Array<string>;
    name: string;
};

export type IncidentEventDecisionContext = {
    constraints: Array<string>;
    decisionRationale: string;
    optionsConsidered: Array<string>;
};

export type IncidentEventEvidence = {
    attributes: IncidentEventEvidenceAttributes;
    id: string;
};

export type IncidentEventEvidenceAttributes = {
    properties?: {
        [key: string]: string;
    };
    source: string;
    value: string;
};

export type IncidentEventSystemComponent = {
    attributes: IncidentEventSystemComponentAttributes;
    id: string;
};

export type IncidentEventSystemComponentAttributes = {
    analysisComponentId: string;
    description: string;
    status: string;
};

export type IncidentField = {
    attributes: IncidentFieldAttributes;
    id: string;
};

export type IncidentFieldAttributes = {
    archived: boolean;
    description: string;
    incidentType: IncidentType;
    name: string;
    options: Array<IncidentFieldOption>;
    required: boolean;
};

export type IncidentFieldOption = {
    attributes: IncidentFieldOptionAttributes;
    id: string;
};

export type IncidentFieldOptionAttributes = {
    archived: boolean;
    optionType: 'custom' | 'derived';
    value: string;
};

export type IncidentLink = {
    incidentId: string;
    incidentSummary: string;
    incidentTitle: string;
    linkType: 'duplicate_of' | 'parent' | 'sibling' | 'child';
};

export type IncidentMilestone = {
    attributes: IncidentMilestoneAttributes;
    id: string;
};

export type IncidentMilestoneAttributes = {
    description: string;
    kind: 'impact' | 'detection' | 'investigation' | 'mitigation' | 'resolution';
    timestamp: string;
};

export type IncidentRole = {
    attributes: IncidentRoleAttributes;
    id: string;
};

export type IncidentRoleAssignment = {
    active: boolean;
    endedAt: string;
    role: IncidentRole;
    startedAt: string;
    user: User;
};

export type IncidentRoleAttributes = {
    archived: boolean;
    description: string;
    name: string;
    required: boolean;
};

export type IncidentSeverity = {
    attributes: IncidentSeverityAttributes;
    id: string;
};

export type IncidentSeverityAttributes = {
    archived: boolean;
    description: string;
    name: string;
    rank: number;
};

export type IncidentTag = {
    attributes: IncidentTagAttributes;
    id: string;
};

export type IncidentTagAttributes = {
    archived: boolean;
    description: string;
    value: string;
};

export type IncidentTeamAssignment = {
    active: boolean;
    endedAt: string;
    startedAt: string;
    team: Team;
};

export type IncidentType = {
    attributes: IncidentTypeAttributes;
    id: string;
};

export type IncidentTypeAttributes = {
    archived: boolean;
    description: string;
    name: string;
};

export type Integration = {
    attributes: IntegrationAttributes;
    id: string;
};

export type IntegrationAttributes = {
    config: {
        [key: string]: string;
    };
    enabled: boolean;
    kind: string;
    provider_id: string;
};

export type ListAlertIncidentLinksResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<AlertIncidentLink>;
    pagination: ResponsePagination;
};

export type ListAlertsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Alert>;
    pagination: ResponsePagination;
};

export type ListEventAnnotationsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<EventAnnotation>;
    pagination: ResponsePagination;
};

export type ListEventsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Event>;
    pagination: ResponsePagination;
};

export type ListIncidentDebriefMessagesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentDebriefMessage>;
};

export type ListIncidentDebriefQuestionsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentDebriefQuestion>;
    pagination: ResponsePagination;
};

export type ListIncidentDebriefSuggestionsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentDebriefSuggestion>;
};

export type ListIncidentEventContributingFactorsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentEventContributingFactorCategory>;
    pagination: ResponsePagination;
};

export type ListIncidentEventsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentEvent>;
    pagination: ResponsePagination;
};

export type ListIncidentFieldsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentField>;
    pagination: ResponsePagination;
};

export type ListIncidentMilestonesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentMilestone>;
    pagination: ResponsePagination;
};

export type ListIncidentRolesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentRole>;
    pagination: ResponsePagination;
};

export type ListIncidentSeveritiesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentSeverity>;
    pagination: ResponsePagination;
};

export type ListIncidentTagsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentTag>;
    pagination: ResponsePagination;
};

export type ListIncidentTypesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentType>;
    pagination: ResponsePagination;
};

export type ListIncidentsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Incident>;
    pagination: ResponsePagination;
};

export type ListIntegrationsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Integration>;
    pagination: ResponsePagination;
};

export type ListMeetingSchedulesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<MeetingSchedule>;
    pagination: ResponsePagination;
};

export type ListMeetingSessionsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<MeetingSession>;
    pagination: ResponsePagination;
};

export type ListNotificationsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<UserNotification>;
    pagination: ResponsePagination;
};

export type ListOncallRostersResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<OncallRoster>;
    pagination: ResponsePagination;
};

export type ListOncallShiftsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<OncallShift>;
    pagination: ResponsePagination;
};

export type ListPlaybooksResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Playbook>;
    pagination: ResponsePagination;
};

export type ListRetrospectiveCommentsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<RetrospectiveComment>;
    pagination: ResponsePagination;
};

export type ListRetrospectiveReviewsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<RetrospectiveReview>;
    pagination: ResponsePagination;
};

export type ListRetrospectivesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Retrospective>;
    pagination: ResponsePagination;
};

export type ListSystemAnalysisComponentsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<SystemAnalysisComponent>;
    pagination: ResponsePagination;
};

export type ListSystemAnalysisRelationshipsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<SystemAnalysisRelationship>;
    pagination: ResponsePagination;
};

export type ListSystemComponentKindsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<SystemComponentKind>;
    pagination: ResponsePagination;
};

export type ListSystemComponentRelationshipsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<SystemComponentRelationship>;
    pagination: ResponsePagination;
};

export type ListSystemComponentsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<SystemComponent>;
    pagination: ResponsePagination;
};

export type ListTasksResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Task>;
    pagination: ResponsePagination;
};

export type ListTeamsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Team>;
    pagination: ResponsePagination;
};

export type ListUsersResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<User>;
    pagination: ResponsePagination;
};

export type ListWatchedOncallRostersResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<OncallRoster>;
};

export type MeetingAttendees = {
    private: boolean;
    teams: Array<string>;
    users: Array<string>;
};

export type MeetingSchedule = {
    attributes: MeetingScheduleAttributes;
    id: string;
};

export type MeetingScheduleAttributes = {
    attendees: MeetingAttendees;
    documentTemplateId: string;
    hostTeamId: string;
    name: string;
    sessionTitle: string;
    timing: MeetingScheduleTiming;
};

export type MeetingScheduleTiming = {
    durationMinutes: number;
    indefinite: boolean;
    repeat: 'daily' | 'weekly' | 'monthly';
    repeatMonthlyOn: 'same_day' | 'same_weekday';
    repeatStep: number;
    startsAt: string;
    untilDate?: string;
    untilNumRepetitions?: number;
};

export type MeetingSession = {
    attributes: MeetingSessionAttributes;
    id: string;
};

export type MeetingSessionAttributes = {
    attendees: MeetingAttendees;
    documentName: string;
    hostTeamId: string;
    meetingScheduleId: string;
    startsAt: string;
    title: string;
};

export type OncallRoster = {
    attributes: OncallRosterAttributes;
    id: string;
};

export type OncallRosterAttributes = {
    handoverTemplateId: string;
    name: string;
    schedules: Array<OncallSchedule>;
    slug: string;
};

export type OncallRosterMetrics = {
    backlogBurnRate: number;
    handoverCompletion: number;
    shiftMetrics: Array<OncallShiftMetrics>;
};

export type OncallSchedule = {
    attributes: OncallScheduleAttributes;
    id: string;
};

export type OncallScheduleAttributes = {
    description: string;
    participants: Array<OncallScheduleParticipant>;
    roster: OncallRoster;
    timezone: string;
};

export type OncallScheduleParticipant = {
    order: number;
    user: User;
};

export type OncallShift = {
    attributes: OncallShiftAttributes;
    id: string;
};

export type OncallShiftAttributes = {
    endAt: string;
    primaryShift: OncallShift;
    role: string;
    roster: OncallRoster;
    startAt: string;
    user: User;
};

export type OncallShiftBurdenMetricWeights = {
    [key: string]: never;
};

export type OncallShiftHandover = {
    attributes: OncallShiftHandoverAttributes;
    id: string;
};

export type OncallShiftHandoverAttributes = {
    content: Array<OncallShiftHandoverSection>;
    pinnedAnnotations: Array<EventAnnotation>;
    sentAt: string;
    shiftId: string;
};

export type OncallShiftHandoverSection = {
    header: string;
    jsonContent?: string;
    kind: 'regular' | 'annotations';
};

export type OncallShiftHandoverTemplate = {
    attributes: OncallShiftHandoverTemplateAttributes;
    id: string;
};

export type OncallShiftHandoverTemplateAttributes = {
    sections: Array<OncallShiftHandoverSection>;
};

export type OncallShiftMetrics = {
    burden: OncallShiftMetricsBurden;
    events: OncallShiftMetricsEvents;
};

export type OncallShiftMetricsBurden = {
    eventFrequency: number;
    finalScore: number;
    isolation: number;
    lifeImpact: number;
    responseRequirements: number;
    timeImpact: number;
};

export type OncallShiftMetricsEvents = {
    alertAccuracy: number;
    alertActionability: number;
    alertDocumentation: number;
    alertFeedbackCount: number;
    alertIncidentRate: number;
    incidentTime: number;
    interruptResponseTime: number;
    interruptsBusinessHours: number;
    interruptsNight: number;
    total: number;
    totalAlerts: number;
    totalIncidents: number;
    totalInterrupts: number;
};

export type OncallShiftsAdjacent = {
    next?: OncallShift;
    previous?: OncallShift;
};

export type Organization = {
    id: string;
    name: string;
    requiresInitialSetup: boolean;
};

export type Playbook = {
    attributes: PlaybookAttributes;
    id: string;
};

export type PlaybookAttributes = {
    content: string;
    title: string;
};

export type RemoveWatchedOncallRosterResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<OncallRoster>;
};

export type RequestDocumentEditorSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: DocumentEditorSession;
};

export type ResponsePagination = {
    next?: string;
    previous?: string;
    total: number;
};

export type Retrospective = {
    attributes: RetrospectiveAttributes;
    id: string;
};

export type RetrospectiveAttributes = {
    documentId: string;
    reportSections: Array<RetrospectiveReportSection>;
    state: 'draft' | 'in_review' | 'meeting_scheduled' | 'completed';
    systemAnalysisId?: string;
    type: 'simple' | 'full';
};

export type RetrospectiveComment = {
    attributes: RetrospectiveCommentAttributes;
    id: string;
};

export type RetrospectiveCommentAttributes = {
    content: string;
    replies: Array<RetrospectiveComment>;
    user: User;
};

export type RetrospectiveReportSection = {
    description: string;
    field: string;
    title: string;
    type: 'field';
};

export type RetrospectiveReview = {
    attributes: RetrospectiveReviewAttributes;
    id: string;
};

export type RetrospectiveReviewAttributes = {
    comment: ExpandableRetrospectiveCommentAttributes;
    requester: ExpandableUser;
    reviewer: ExpandableUser;
};

export type SendOncallShiftHandoverAttributes = {
    [key: string]: never;
};

export type SendOncallShiftHandoverRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: SendOncallShiftHandoverAttributes;
};

export type SendOncallShiftHandoverResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandover;
};

export type SystemAnalysis = {
    attributes: SystemAnalysisAttributes;
    id: string;
};

export type SystemAnalysisAttributes = {
    components: Array<SystemAnalysisComponent>;
    relationships: Array<SystemAnalysisRelationship>;
};

export type SystemAnalysisComponent = {
    attributes: SystemAnalysisComponentAttributes;
    id: string;
};

export type SystemAnalysisComponentAttributes = {
    component: SystemComponent;
    position: SystemAnalysisDiagramPosition;
};

export type SystemAnalysisDiagramPosition = {
    x: number;
    y: number;
    z?: number;
};

export type SystemAnalysisRelationship = {
    attributes: SystemAnalysisRelationshipAttributes;
    id: string;
};

export type SystemAnalysisRelationshipAttributes = {
    controlActions: Array<SystemAnalysisRelationshipControlAction>;
    description: string;
    feedbackSignals: Array<SystemAnalysisRelationshipFeedbackSignal>;
    sourceId: string;
    targetId: string;
};

export type SystemAnalysisRelationshipControlAction = {
    attributes: SystemAnalysisRelationshipControlActionAttributes;
    id: string;
};

export type SystemAnalysisRelationshipControlActionAttributes = {
    controlId: string;
    description: string;
};

export type SystemAnalysisRelationshipFeedbackSignal = {
    attributes: SystemAnalysisRelationshipFeedbackSignalAttributes;
    id: string;
};

export type SystemAnalysisRelationshipFeedbackSignalAttributes = {
    description: string;
    signalId: string;
};

export type SystemComponent = {
    attributes: SystemComponentAttributes;
    id: string;
};

export type SystemComponentAttributes = {
    constraints: Array<SystemComponentConstraint>;
    controls: Array<SystemComponentControl>;
    description: string;
    kindId: string;
    name: string;
    properties: {
        [key: string]: unknown;
    };
    signals: Array<SystemComponentSignal>;
};

export type SystemComponentConstraint = {
    attributes: SystemComponentConstraintAttributes;
    id: string;
};

export type SystemComponentConstraintAttributes = {
    description: string;
    label: string;
};

export type SystemComponentControl = {
    attributes: SystemComponentControlAttributes;
    id: string;
};

export type SystemComponentControlAttributes = {
    description: string;
    label: string;
};

export type SystemComponentKind = {
    attributes: SystemComponentKindAttributes;
    id: string;
};

export type SystemComponentKindAttributes = {
    description: string;
    label: string;
};

export type SystemComponentRelationship = {
    attributes: SystemComponentRelationshipAttributes;
    id: string;
};

export type SystemComponentRelationshipAttributes = {
    description: string;
    sourceId: string;
    targetId: string;
};

export type SystemComponentSignal = {
    attributes: SystemComponentSignalAttributes;
    id: string;
};

export type SystemComponentSignalAttributes = {
    description: string;
    label: string;
};

export type Task = {
    attributes: TaskAttributes;
    id: string;
};

export type TaskAttributes = {
    description: string;
    name: string;
};

export type Team = {
    attributes: TeamAttributes;
    id: string;
};

export type TeamAttributes = {
    name: string;
    slug: string;
};

export type UpdateEventAnnotationRequestAttributes = {
    minutesOccupied?: number;
    notes?: string;
    tags?: Array<string>;
};

export type UpdateEventAnnotationRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateEventAnnotationRequestAttributes;
};

export type UpdateEventAnnotationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: EventAnnotation;
};

export type UpdateIncidentAttributes = {
    environments?: Array<string>;
    private?: boolean;
    severityId?: string;
    summary?: string;
    title?: string;
};

export type UpdateIncidentDebriefAttributes = {
    status: 'started' | 'completed';
};

export type UpdateIncidentDebriefQuestionAttributes = {
    content?: string;
};

export type UpdateIncidentDebriefQuestionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentDebriefQuestionAttributes;
};

export type UpdateIncidentDebriefQuestionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebriefQuestion;
};

export type UpdateIncidentDebriefRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentDebriefAttributes;
};

export type UpdateIncidentDebriefResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebrief;
};

export type UpdateIncidentEventAttributes = {
    kind?: 'observation' | 'action' | 'decision' | 'context';
    timestamp?: string;
    title?: string;
};

export type UpdateIncidentEventRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentEventAttributes;
};

export type UpdateIncidentEventResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentEvent;
};

export type UpdateIncidentFieldAttributes = {
    archived?: boolean;
    incidentType?: string;
    name?: string;
    options?: Array<UpdateIncidentFieldOptionAttributes>;
    required?: boolean;
};

export type UpdateIncidentFieldOptionAttributes = {
    archived: boolean;
    fieldOptionType: 'custom' | 'derived';
    id?: string;
    value: string;
};

export type UpdateIncidentFieldRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentFieldAttributes;
};

export type UpdateIncidentFieldResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentField;
};

export type UpdateIncidentMilestoneAttributes = {
    description?: string;
    kind?: 'impact' | 'detection' | 'investigation' | 'mitigation' | 'resolution';
    timestamp?: string;
};

export type UpdateIncidentMilestoneRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentMilestoneAttributes;
};

export type UpdateIncidentMilestoneResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentMilestone;
};

export type UpdateIncidentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentAttributes;
};

export type UpdateIncidentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Incident;
};

export type UpdateIncidentRoleAttributes = {
    archived?: boolean;
    description?: string;
    name?: string;
    required?: boolean;
};

export type UpdateIncidentRoleRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentRoleAttributes;
};

export type UpdateIncidentRoleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentRole;
};

export type UpdateIncidentSeverityAttributes = {
    archived?: boolean;
    name?: string;
    rank?: number;
};

export type UpdateIncidentSeverityRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentSeverityAttributes;
};

export type UpdateIncidentSeverityResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentSeverity;
};

export type UpdateIncidentTagAttributes = {
    archived?: boolean;
    value?: string;
};

export type UpdateIncidentTagRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentTagAttributes;
};

export type UpdateIncidentTagResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentTag;
};

export type UpdateIncidentTypeAttributes = {
    archived?: boolean;
    name?: string;
};

export type UpdateIncidentTypeRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentTypeAttributes;
};

export type UpdateIncidentTypeResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentType;
};

export type UpdateIntegrationAttributes = {
    config?: {
        [key: string]: string;
    };
    enabled?: boolean;
};

export type UpdateIntegrationRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIntegrationAttributes;
};

export type UpdateIntegrationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Integration;
};

export type UpdateMeetingScheduleAttributes = {
    [key: string]: never;
};

export type UpdateMeetingScheduleRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateMeetingScheduleAttributes;
};

export type UpdateMeetingScheduleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSchedule;
};

export type UpdateMeetingSessionAttributes = {
    [key: string]: never;
};

export type UpdateMeetingSessionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateMeetingSessionAttributes;
};

export type UpdateMeetingSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSession;
};

export type UpdateOncallShiftHandoverAttributes = {
    content?: Array<OncallShiftHandoverSection>;
    pinnedAnnotationIds?: Array<string>;
};

export type UpdateOncallShiftHandoverRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateOncallShiftHandoverAttributes;
};

export type UpdateOncallShiftHandoverResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandover;
};

export type UpdateOncallShiftHandoverTemplateRequestAttributes = {
    sections: Array<OncallShiftHandoverSection>;
};

export type UpdateOncallShiftHandoverTemplateRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateOncallShiftHandoverTemplateRequestAttributes;
};

export type UpdateOncallShiftHandoverTemplateResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandoverTemplate;
};

export type UpdatePlaybookAttributes = {
    content?: string;
    title?: string;
};

export type UpdatePlaybookRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdatePlaybookAttributes;
};

export type UpdatePlaybookResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Playbook;
};

export type UpdateRetrospectiveCommentAttributes = {
    content?: string;
    resolved?: boolean;
};

export type UpdateRetrospectiveCommentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateRetrospectiveCommentAttributes;
};

export type UpdateRetrospectiveCommentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveComment;
};

export type UpdateRetrospectiveReviewRequestAttributes = {
    [key: string]: never;
};

export type UpdateRetrospectiveReviewRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateRetrospectiveReviewRequestAttributes;
};

export type UpdateRetrospectiveReviewResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveReview;
};

export type UpdateSystemAnalysisComponentAttributes = {
    position?: SystemAnalysisDiagramPosition;
};

export type UpdateSystemAnalysisComponentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemAnalysisComponentAttributes;
};

export type UpdateSystemAnalysisComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisComponent;
};

export type UpdateSystemAnalysisRelationshipAttributes = {
    controlActions?: Array<SystemAnalysisRelationshipControlActionAttributes>;
    description?: string;
    feedbackSignals?: Array<SystemAnalysisRelationshipFeedbackSignalAttributes>;
};

export type UpdateSystemAnalysisRelationshipRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemAnalysisRelationshipAttributes;
};

export type UpdateSystemAnalysisRelationshipResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisRelationship;
};

export type UpdateSystemComponentAttributes = {
    description?: string;
    kindId?: string;
    name?: string;
    properties?: {
        [key: string]: unknown;
    };
};

export type UpdateSystemComponentConstraintAttributes = {
    description?: string;
    label?: string;
};

export type UpdateSystemComponentConstraintRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemComponentConstraintAttributes;
};

export type UpdateSystemComponentConstraintResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentConstraint;
};

export type UpdateSystemComponentControlAttributes = {
    description?: string;
    label?: string;
};

export type UpdateSystemComponentControlRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemComponentControlAttributes;
};

export type UpdateSystemComponentControlResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentControl;
};

export type UpdateSystemComponentKindAttributes = {
    description?: string;
    label?: string;
};

export type UpdateSystemComponentKindRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemComponentKindAttributes;
};

export type UpdateSystemComponentKindResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentKind;
};

export type UpdateSystemComponentRelationshipAttributes = {
    description?: string;
};

export type UpdateSystemComponentRelationshipRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemComponentRelationshipAttributes;
};

export type UpdateSystemComponentRelationshipResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentRelationship;
};

export type UpdateSystemComponentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemComponentAttributes;
};

export type UpdateSystemComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponent;
};

export type UpdateSystemComponentSignalAttributes = {
    description?: string;
    label?: string;
};

export type UpdateSystemComponentSignalRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemComponentSignalAttributes;
};

export type UpdateSystemComponentSignalResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponentSignal;
};

export type UpdateTaskAttributes = {
    name?: string;
};

export type UpdateTaskRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateTaskAttributes;
};

export type UpdateTaskResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Task;
};

export type UpdateTeamAttributes = {
    name: string;
};

export type UpdateTeamRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateTeamAttributes;
};

export type UpdateTeamResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Team;
};

export type User = {
    attributes: UserAttributes;
    id: string;
};

export type UserAttributes = {
    email: string;
    name: string;
};

export type UserNotification = {
    attributes: UserNotificationAttributes;
    id: string;
};

export type UserNotificationAttributes = {
    text: string;
};

export type UserOncallInformation = {
    activeShifts: Array<OncallShift>;
    pastShifts: Array<OncallShift>;
    rosters: Array<OncallRoster>;
    upcomingShifts: Array<OncallShift>;
    watchingRosters: Array<OncallRoster>;
};

export type ListAlertsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        rosterId?: string;
    };
    url: '/alerts';
};

export type ListAlertsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListAlertsError = ListAlertsErrors[keyof ListAlertsErrors];

export type ListAlertsResponses = {
    /**
     * OK
     */
    200: ListAlertsResponseBody;
};

export type ListAlertsResponse = ListAlertsResponses[keyof ListAlertsResponses];

export type GetAlertData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/alerts/{id}';
};

export type GetAlertErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetAlertError = GetAlertErrors[keyof GetAlertErrors];

export type GetAlertResponses = {
    /**
     * OK
     */
    200: GetAlertResponseBody;
};

export type GetAlertResponse = GetAlertResponses[keyof GetAlertResponses];

export type ListAlertIncidentLinksData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/alerts/{id}/incident_links';
};

export type ListAlertIncidentLinksErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListAlertIncidentLinksError = ListAlertIncidentLinksErrors[keyof ListAlertIncidentLinksErrors];

export type ListAlertIncidentLinksResponses = {
    /**
     * OK
     */
    200: ListAlertIncidentLinksResponseBody;
};

export type ListAlertIncidentLinksResponse = ListAlertIncidentLinksResponses[keyof ListAlertIncidentLinksResponses];

export type GetAlertMetricsData = {
    body?: never;
    path: {
        id: string;
    };
    query: {
        rosterId?: string;
        from: string;
        to: string;
    };
    url: '/alerts/{id}/metrics';
};

export type GetAlertMetricsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetAlertMetricsError = GetAlertMetricsErrors[keyof GetAlertMetricsErrors];

export type GetAlertMetricsResponses = {
    /**
     * OK
     */
    200: GetAlertMetricsResponseBody;
};

export type GetAlertMetricsResponse = GetAlertMetricsResponses[keyof GetAlertMetricsResponses];

export type GetCurrentAuthSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth_session';
};

export type GetCurrentAuthSessionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetCurrentAuthSessionError = GetCurrentAuthSessionErrors[keyof GetCurrentAuthSessionErrors];

export type GetCurrentAuthSessionResponses = {
    /**
     * OK
     */
    200: GetCurrentAuthSessionResponseBody;
};

export type GetCurrentAuthSessionResponse = GetCurrentAuthSessionResponses[keyof GetCurrentAuthSessionResponses];

export type GetAuthSessionConfigData = {
    body?: never;
    path?: never;
    query?: {
        email?: string;
    };
    url: '/auth_session/config';
};

export type GetAuthSessionConfigErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetAuthSessionConfigError = GetAuthSessionConfigErrors[keyof GetAuthSessionConfigErrors];

export type GetAuthSessionConfigResponses = {
    /**
     * OK
     */
    200: GetAuthSessionsConfigResponseBody;
};

export type GetAuthSessionConfigResponse = GetAuthSessionConfigResponses[keyof GetAuthSessionConfigResponses];

export type ListUserNotificationsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/auth_session/user/notifications';
};

export type ListUserNotificationsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListUserNotificationsError = ListUserNotificationsErrors[keyof ListUserNotificationsErrors];

export type ListUserNotificationsResponses = {
    /**
     * OK
     */
    200: ListNotificationsResponseBody;
};

export type ListUserNotificationsResponse = ListUserNotificationsResponses[keyof ListUserNotificationsResponses];

export type ListDebriefQuestionsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/debrief_questions';
};

export type ListDebriefQuestionsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListDebriefQuestionsError = ListDebriefQuestionsErrors[keyof ListDebriefQuestionsErrors];

export type ListDebriefQuestionsResponses = {
    /**
     * OK
     */
    200: ListIncidentDebriefQuestionsResponseBody;
};

export type ListDebriefQuestionsResponse = ListDebriefQuestionsResponses[keyof ListDebriefQuestionsResponses];

export type CreateDebriefQuestionData = {
    body: CreateIncidentDebriefQuestionRequestBody;
    path?: never;
    query?: never;
    url: '/debrief_questions';
};

export type CreateDebriefQuestionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateDebriefQuestionError = CreateDebriefQuestionErrors[keyof CreateDebriefQuestionErrors];

export type CreateDebriefQuestionResponses = {
    /**
     * OK
     */
    200: CreateIncidentDebriefQuestionResponseBody;
};

export type CreateDebriefQuestionResponse = CreateDebriefQuestionResponses[keyof CreateDebriefQuestionResponses];

export type ArchiveDebriefQuestionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/debrief_questions/{id}';
};

export type ArchiveDebriefQuestionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveDebriefQuestionError = ArchiveDebriefQuestionErrors[keyof ArchiveDebriefQuestionErrors];

export type ArchiveDebriefQuestionResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveDebriefQuestionResponse = ArchiveDebriefQuestionResponses[keyof ArchiveDebriefQuestionResponses];

export type GetDebriefQuestionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/debrief_questions/{id}';
};

export type GetDebriefQuestionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetDebriefQuestionError = GetDebriefQuestionErrors[keyof GetDebriefQuestionErrors];

export type GetDebriefQuestionResponses = {
    /**
     * OK
     */
    200: GetIncidentDebriefQuestionResponseBody;
};

export type GetDebriefQuestionResponse = GetDebriefQuestionResponses[keyof GetDebriefQuestionResponses];

export type UpdateDebriefQuestionData = {
    body: UpdateIncidentDebriefQuestionRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/debrief_questions/{id}';
};

export type UpdateDebriefQuestionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateDebriefQuestionError = UpdateDebriefQuestionErrors[keyof UpdateDebriefQuestionErrors];

export type UpdateDebriefQuestionResponses = {
    /**
     * OK
     */
    200: UpdateIncidentDebriefQuestionResponseBody;
};

export type UpdateDebriefQuestionResponse = UpdateDebriefQuestionResponses[keyof UpdateDebriefQuestionResponses];

export type RequestDocumentEditorSessionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/documents/{id}/session';
};

export type RequestDocumentEditorSessionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type RequestDocumentEditorSessionError = RequestDocumentEditorSessionErrors[keyof RequestDocumentEditorSessionErrors];

export type RequestDocumentEditorSessionResponses = {
    /**
     * OK
     */
    200: RequestDocumentEditorSessionResponseBody;
};

export type RequestDocumentEditorSessionResponse = RequestDocumentEditorSessionResponses[keyof RequestDocumentEditorSessionResponses];

export type ListEventAnnotationsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        from?: string;
        to?: string;
        userIds?: string;
        shiftIds?: string;
        withEvents?: boolean;
    };
    url: '/event_annotations';
};

export type ListEventAnnotationsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListEventAnnotationsError = ListEventAnnotationsErrors[keyof ListEventAnnotationsErrors];

export type ListEventAnnotationsResponses = {
    /**
     * OK
     */
    200: ListEventAnnotationsResponseBody;
};

export type ListEventAnnotationsResponse = ListEventAnnotationsResponses[keyof ListEventAnnotationsResponses];

export type CreateEventAnnotationData = {
    body: CreateEventAnnotationRequestBody;
    path?: never;
    query?: never;
    url: '/event_annotations';
};

export type CreateEventAnnotationErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateEventAnnotationError = CreateEventAnnotationErrors[keyof CreateEventAnnotationErrors];

export type CreateEventAnnotationResponses = {
    /**
     * OK
     */
    200: CreateEventAnnotationResponseBody;
};

export type CreateEventAnnotationResponse = CreateEventAnnotationResponses[keyof CreateEventAnnotationResponses];

export type DeleteEventAnnotationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/event_annotations/{id}';
};

export type DeleteEventAnnotationErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type DeleteEventAnnotationError = DeleteEventAnnotationErrors[keyof DeleteEventAnnotationErrors];

export type DeleteEventAnnotationResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteEventAnnotationResponse = DeleteEventAnnotationResponses[keyof DeleteEventAnnotationResponses];

export type UpdateEventAnnotationData = {
    body: UpdateEventAnnotationRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/event_annotations/{id}';
};

export type UpdateEventAnnotationErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateEventAnnotationError = UpdateEventAnnotationErrors[keyof UpdateEventAnnotationErrors];

export type UpdateEventAnnotationResponses = {
    /**
     * OK
     */
    200: UpdateEventAnnotationResponseBody;
};

export type UpdateEventAnnotationResponse = UpdateEventAnnotationResponses[keyof UpdateEventAnnotationResponses];

export type ListEventsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        from?: string;
        to?: string;
    };
    url: '/events';
};

export type ListEventsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListEventsError = ListEventsErrors[keyof ListEventsErrors];

export type ListEventsResponses = {
    /**
     * OK
     */
    200: ListEventsResponseBody;
};

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses];

export type GetEventData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/events/{id}';
};

export type GetEventErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetEventError = GetEventErrors[keyof GetEventErrors];

export type GetEventResponses = {
    /**
     * OK
     */
    200: GetEventResponseBody;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type GetIncidentDebriefData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_debriefs/{id}';
};

export type GetIncidentDebriefErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetIncidentDebriefError = GetIncidentDebriefErrors[keyof GetIncidentDebriefErrors];

export type GetIncidentDebriefResponses = {
    /**
     * OK
     */
    200: GetIncidentDebriefResponseBody;
};

export type GetIncidentDebriefResponse = GetIncidentDebriefResponses[keyof GetIncidentDebriefResponses];

export type UpdateIncidentDebriefData = {
    body: UpdateIncidentDebriefRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_debriefs/{id}';
};

export type UpdateIncidentDebriefErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateIncidentDebriefError = UpdateIncidentDebriefErrors[keyof UpdateIncidentDebriefErrors];

export type UpdateIncidentDebriefResponses = {
    /**
     * OK
     */
    200: UpdateIncidentDebriefResponseBody;
};

export type UpdateIncidentDebriefResponse = UpdateIncidentDebriefResponses[keyof UpdateIncidentDebriefResponses];

export type ListDebriefMessagesData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/incident_debriefs/{id}/messages';
};

export type ListDebriefMessagesErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListDebriefMessagesError = ListDebriefMessagesErrors[keyof ListDebriefMessagesErrors];

export type ListDebriefMessagesResponses = {
    /**
     * OK
     */
    200: ListIncidentDebriefMessagesResponseBody;
};

export type ListDebriefMessagesResponse = ListDebriefMessagesResponses[keyof ListDebriefMessagesResponses];

export type AddIncidentDebriefUserMessageData = {
    body: AddIncidentDebriefUserMessageRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_debriefs/{id}/messages';
};

export type AddIncidentDebriefUserMessageErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type AddIncidentDebriefUserMessageError = AddIncidentDebriefUserMessageErrors[keyof AddIncidentDebriefUserMessageErrors];

export type AddIncidentDebriefUserMessageResponses = {
    /**
     * OK
     */
    200: AddIncidentDebriefUserMessageResponseBody;
};

export type AddIncidentDebriefUserMessageResponse = AddIncidentDebriefUserMessageResponses[keyof AddIncidentDebriefUserMessageResponses];

export type ListDebriefSuggestionsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/incident_debriefs/{id}/suggestions';
};

export type ListDebriefSuggestionsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListDebriefSuggestionsError = ListDebriefSuggestionsErrors[keyof ListDebriefSuggestionsErrors];

export type ListDebriefSuggestionsResponses = {
    /**
     * OK
     */
    200: ListIncidentDebriefSuggestionsResponseBody;
};

export type ListDebriefSuggestionsResponse = ListDebriefSuggestionsResponses[keyof ListDebriefSuggestionsResponses];

export type ListIncidentEventContributingFactorCategoriesData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/incident_event_contributing_factor_categories';
};

export type ListIncidentEventContributingFactorCategoriesErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListIncidentEventContributingFactorCategoriesError = ListIncidentEventContributingFactorCategoriesErrors[keyof ListIncidentEventContributingFactorCategoriesErrors];

export type ListIncidentEventContributingFactorCategoriesResponses = {
    /**
     * OK
     */
    200: ListIncidentEventContributingFactorsResponseBody;
};

export type ListIncidentEventContributingFactorCategoriesResponse = ListIncidentEventContributingFactorCategoriesResponses[keyof ListIncidentEventContributingFactorCategoriesResponses];

export type DeleteIncidentEventData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_events/{id}';
};

export type DeleteIncidentEventErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type DeleteIncidentEventError = DeleteIncidentEventErrors[keyof DeleteIncidentEventErrors];

export type DeleteIncidentEventResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteIncidentEventResponse = DeleteIncidentEventResponses[keyof DeleteIncidentEventResponses];

export type UpdateIncidentEventData = {
    body: UpdateIncidentEventRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_events/{id}';
};

export type UpdateIncidentEventErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateIncidentEventError = UpdateIncidentEventErrors[keyof UpdateIncidentEventErrors];

export type UpdateIncidentEventResponses = {
    /**
     * OK
     */
    200: UpdateIncidentEventResponseBody;
};

export type UpdateIncidentEventResponse = UpdateIncidentEventResponses[keyof UpdateIncidentEventResponses];

export type ListIncidentFieldsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/incident_fields';
};

export type ListIncidentFieldsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListIncidentFieldsError = ListIncidentFieldsErrors[keyof ListIncidentFieldsErrors];

export type ListIncidentFieldsResponses = {
    /**
     * OK
     */
    200: ListIncidentFieldsResponseBody;
};

export type ListIncidentFieldsResponse = ListIncidentFieldsResponses[keyof ListIncidentFieldsResponses];

export type CreateIncidentFieldData = {
    body: CreateIncidentFieldRequestBody;
    path?: never;
    query?: never;
    url: '/incident_fields';
};

export type CreateIncidentFieldErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateIncidentFieldError = CreateIncidentFieldErrors[keyof CreateIncidentFieldErrors];

export type CreateIncidentFieldResponses = {
    /**
     * OK
     */
    200: CreateIncidentFieldResponseBody;
};

export type CreateIncidentFieldResponse = CreateIncidentFieldResponses[keyof CreateIncidentFieldResponses];

export type ArchiveIncidentFieldData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_fields/{id}';
};

export type ArchiveIncidentFieldErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveIncidentFieldError = ArchiveIncidentFieldErrors[keyof ArchiveIncidentFieldErrors];

export type ArchiveIncidentFieldResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveIncidentFieldResponse = ArchiveIncidentFieldResponses[keyof ArchiveIncidentFieldResponses];

export type GetIncidentFieldData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_fields/{id}';
};

export type GetIncidentFieldErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetIncidentFieldError = GetIncidentFieldErrors[keyof GetIncidentFieldErrors];

export type GetIncidentFieldResponses = {
    /**
     * OK
     */
    200: GetIncidentFieldResponseBody;
};

export type GetIncidentFieldResponse = GetIncidentFieldResponses[keyof GetIncidentFieldResponses];

export type UpdateIncidentFieldData = {
    body: UpdateIncidentFieldRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_fields/{id}';
};

export type UpdateIncidentFieldErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateIncidentFieldError = UpdateIncidentFieldErrors[keyof UpdateIncidentFieldErrors];

export type UpdateIncidentFieldResponses = {
    /**
     * OK
     */
    200: UpdateIncidentFieldResponseBody;
};

export type UpdateIncidentFieldResponse = UpdateIncidentFieldResponses[keyof UpdateIncidentFieldResponses];

export type DeleteIncidentMilestoneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_milestones/{id}';
};

export type DeleteIncidentMilestoneErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type DeleteIncidentMilestoneError = DeleteIncidentMilestoneErrors[keyof DeleteIncidentMilestoneErrors];

export type DeleteIncidentMilestoneResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteIncidentMilestoneResponse = DeleteIncidentMilestoneResponses[keyof DeleteIncidentMilestoneResponses];

export type UpdateIncidentMilestoneData = {
    body: UpdateIncidentMilestoneRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_milestones/{id}';
};

export type UpdateIncidentMilestoneErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateIncidentMilestoneError = UpdateIncidentMilestoneErrors[keyof UpdateIncidentMilestoneErrors];

export type UpdateIncidentMilestoneResponses = {
    /**
     * OK
     */
    200: UpdateIncidentMilestoneResponseBody;
};

export type UpdateIncidentMilestoneResponse = UpdateIncidentMilestoneResponses[keyof UpdateIncidentMilestoneResponses];

export type ListIncidentRolesData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/incident_roles';
};

export type ListIncidentRolesErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListIncidentRolesError = ListIncidentRolesErrors[keyof ListIncidentRolesErrors];

export type ListIncidentRolesResponses = {
    /**
     * OK
     */
    200: ListIncidentRolesResponseBody;
};

export type ListIncidentRolesResponse = ListIncidentRolesResponses[keyof ListIncidentRolesResponses];

export type CreateIncidentRoleData = {
    body: CreateIncidentRoleRequestBody;
    path?: never;
    query?: never;
    url: '/incident_roles';
};

export type CreateIncidentRoleErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateIncidentRoleError = CreateIncidentRoleErrors[keyof CreateIncidentRoleErrors];

export type CreateIncidentRoleResponses = {
    /**
     * OK
     */
    200: CreateIncidentRoleResponseBody;
};

export type CreateIncidentRoleResponse = CreateIncidentRoleResponses[keyof CreateIncidentRoleResponses];

export type ArchiveIncidentRoleData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_roles/{id}';
};

export type ArchiveIncidentRoleErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveIncidentRoleError = ArchiveIncidentRoleErrors[keyof ArchiveIncidentRoleErrors];

export type ArchiveIncidentRoleResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveIncidentRoleResponse = ArchiveIncidentRoleResponses[keyof ArchiveIncidentRoleResponses];

export type GetIncidentRoleData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_roles/{id}';
};

export type GetIncidentRoleErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetIncidentRoleError = GetIncidentRoleErrors[keyof GetIncidentRoleErrors];

export type GetIncidentRoleResponses = {
    /**
     * OK
     */
    200: GetIncidentRoleResponseBody;
};

export type GetIncidentRoleResponse = GetIncidentRoleResponses[keyof GetIncidentRoleResponses];

export type UpdateIncidentRoleData = {
    body: UpdateIncidentRoleRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_roles/{id}';
};

export type UpdateIncidentRoleErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateIncidentRoleError = UpdateIncidentRoleErrors[keyof UpdateIncidentRoleErrors];

export type UpdateIncidentRoleResponses = {
    /**
     * OK
     */
    200: UpdateIncidentRoleResponseBody;
};

export type UpdateIncidentRoleResponse = UpdateIncidentRoleResponses[keyof UpdateIncidentRoleResponses];

export type ListIncidentSeveritiesData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/incident_severities';
};

export type ListIncidentSeveritiesErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListIncidentSeveritiesError = ListIncidentSeveritiesErrors[keyof ListIncidentSeveritiesErrors];

export type ListIncidentSeveritiesResponses = {
    /**
     * OK
     */
    200: ListIncidentSeveritiesResponseBody;
};

export type ListIncidentSeveritiesResponse = ListIncidentSeveritiesResponses[keyof ListIncidentSeveritiesResponses];

export type CreateIncidentSeverityData = {
    body: CreateIncidentSeverityRequestBody;
    path?: never;
    query?: never;
    url: '/incident_severities';
};

export type CreateIncidentSeverityErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateIncidentSeverityError = CreateIncidentSeverityErrors[keyof CreateIncidentSeverityErrors];

export type CreateIncidentSeverityResponses = {
    /**
     * OK
     */
    200: CreateIncidentSeverityResponseBody;
};

export type CreateIncidentSeverityResponse = CreateIncidentSeverityResponses[keyof CreateIncidentSeverityResponses];

export type ArchiveIncidentSeverityData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_severities/{id}';
};

export type ArchiveIncidentSeverityErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveIncidentSeverityError = ArchiveIncidentSeverityErrors[keyof ArchiveIncidentSeverityErrors];

export type ArchiveIncidentSeverityResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveIncidentSeverityResponse = ArchiveIncidentSeverityResponses[keyof ArchiveIncidentSeverityResponses];

export type GetIncidentSeverityData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_severities/{id}';
};

export type GetIncidentSeverityErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetIncidentSeverityError = GetIncidentSeverityErrors[keyof GetIncidentSeverityErrors];

export type GetIncidentSeverityResponses = {
    /**
     * OK
     */
    200: GetIncidentSeverityResponseBody;
};

export type GetIncidentSeverityResponse = GetIncidentSeverityResponses[keyof GetIncidentSeverityResponses];

export type UpdateIncidentSeverityData = {
    body: UpdateIncidentSeverityRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_severities/{id}';
};

export type UpdateIncidentSeverityErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateIncidentSeverityError = UpdateIncidentSeverityErrors[keyof UpdateIncidentSeverityErrors];

export type UpdateIncidentSeverityResponses = {
    /**
     * OK
     */
    200: UpdateIncidentSeverityResponseBody;
};

export type UpdateIncidentSeverityResponse = UpdateIncidentSeverityResponses[keyof UpdateIncidentSeverityResponses];

export type ListIncidentTagsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/incident_tags';
};

export type ListIncidentTagsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListIncidentTagsError = ListIncidentTagsErrors[keyof ListIncidentTagsErrors];

export type ListIncidentTagsResponses = {
    /**
     * OK
     */
    200: ListIncidentTagsResponseBody;
};

export type ListIncidentTagsResponse = ListIncidentTagsResponses[keyof ListIncidentTagsResponses];

export type CreateIncidentTagData = {
    body: CreateIncidentTagRequestBody;
    path?: never;
    query?: never;
    url: '/incident_tags';
};

export type CreateIncidentTagErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateIncidentTagError = CreateIncidentTagErrors[keyof CreateIncidentTagErrors];

export type CreateIncidentTagResponses = {
    /**
     * OK
     */
    200: CreateIncidentTagResponseBody;
};

export type CreateIncidentTagResponse = CreateIncidentTagResponses[keyof CreateIncidentTagResponses];

export type ArchiveIncidentTagData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_tags/{id}';
};

export type ArchiveIncidentTagErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveIncidentTagError = ArchiveIncidentTagErrors[keyof ArchiveIncidentTagErrors];

export type ArchiveIncidentTagResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveIncidentTagResponse = ArchiveIncidentTagResponses[keyof ArchiveIncidentTagResponses];

export type GetIncidentTagData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_tags/{id}';
};

export type GetIncidentTagErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetIncidentTagError = GetIncidentTagErrors[keyof GetIncidentTagErrors];

export type GetIncidentTagResponses = {
    /**
     * OK
     */
    200: GetIncidentTagResponseBody;
};

export type GetIncidentTagResponse = GetIncidentTagResponses[keyof GetIncidentTagResponses];

export type UpdateIncidentTagData = {
    body: UpdateIncidentTagRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_tags/{id}';
};

export type UpdateIncidentTagErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateIncidentTagError = UpdateIncidentTagErrors[keyof UpdateIncidentTagErrors];

export type UpdateIncidentTagResponses = {
    /**
     * OK
     */
    200: UpdateIncidentTagResponseBody;
};

export type UpdateIncidentTagResponse = UpdateIncidentTagResponses[keyof UpdateIncidentTagResponses];

export type ListIncidentTypesData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/incident_types';
};

export type ListIncidentTypesErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListIncidentTypesError = ListIncidentTypesErrors[keyof ListIncidentTypesErrors];

export type ListIncidentTypesResponses = {
    /**
     * OK
     */
    200: ListIncidentTypesResponseBody;
};

export type ListIncidentTypesResponse = ListIncidentTypesResponses[keyof ListIncidentTypesResponses];

export type CreateIncidentTypeData = {
    body: CreateIncidentTypeRequestBody;
    path?: never;
    query?: never;
    url: '/incident_types';
};

export type CreateIncidentTypeErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateIncidentTypeError = CreateIncidentTypeErrors[keyof CreateIncidentTypeErrors];

export type CreateIncidentTypeResponses = {
    /**
     * OK
     */
    200: CreateIncidentTypeResponseBody;
};

export type CreateIncidentTypeResponse = CreateIncidentTypeResponses[keyof CreateIncidentTypeResponses];

export type ArchiveIncidentTypeData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_types/{id}';
};

export type ArchiveIncidentTypeErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveIncidentTypeError = ArchiveIncidentTypeErrors[keyof ArchiveIncidentTypeErrors];

export type ArchiveIncidentTypeResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveIncidentTypeResponse = ArchiveIncidentTypeResponses[keyof ArchiveIncidentTypeResponses];

export type GetIncidentTypeData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_types/{id}';
};

export type GetIncidentTypeErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetIncidentTypeError = GetIncidentTypeErrors[keyof GetIncidentTypeErrors];

export type GetIncidentTypeResponses = {
    /**
     * OK
     */
    200: GetIncidentTypeResponseBody;
};

export type GetIncidentTypeResponse = GetIncidentTypeResponses[keyof GetIncidentTypeResponses];

export type UpdateIncidentTypeData = {
    body: UpdateIncidentTypeRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incident_types/{id}';
};

export type UpdateIncidentTypeErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateIncidentTypeError = UpdateIncidentTypeErrors[keyof UpdateIncidentTypeErrors];

export type UpdateIncidentTypeResponses = {
    /**
     * OK
     */
    200: UpdateIncidentTypeResponseBody;
};

export type UpdateIncidentTypeResponse = UpdateIncidentTypeResponses[keyof UpdateIncidentTypeResponses];

export type ListIncidentsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        teamId?: string;
    };
    url: '/incidents';
};

export type ListIncidentsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListIncidentsError = ListIncidentsErrors[keyof ListIncidentsErrors];

export type ListIncidentsResponses = {
    /**
     * OK
     */
    200: ListIncidentsResponseBody;
};

export type ListIncidentsResponse = ListIncidentsResponses[keyof ListIncidentsResponses];

export type CreateIncidentData = {
    body: CreateIncidentRequestBody;
    path?: never;
    query?: never;
    url: '/incidents';
};

export type CreateIncidentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateIncidentError = CreateIncidentErrors[keyof CreateIncidentErrors];

export type CreateIncidentResponses = {
    /**
     * OK
     */
    200: CreateIncidentResponseBody;
};

export type CreateIncidentResponse = CreateIncidentResponses[keyof CreateIncidentResponses];

export type ArchiveIncidentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incidents/{id}';
};

export type ArchiveIncidentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveIncidentError = ArchiveIncidentErrors[keyof ArchiveIncidentErrors];

export type ArchiveIncidentResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveIncidentResponse = ArchiveIncidentResponses[keyof ArchiveIncidentResponses];

export type GetIncidentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incidents/{id}';
};

export type GetIncidentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetIncidentError = GetIncidentErrors[keyof GetIncidentErrors];

export type GetIncidentResponses = {
    /**
     * OK
     */
    200: GetIncidentResponseBody;
};

export type GetIncidentResponse = GetIncidentResponses[keyof GetIncidentResponses];

export type UpdateIncidentData = {
    body: UpdateIncidentRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incidents/{id}';
};

export type UpdateIncidentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateIncidentError = UpdateIncidentErrors[keyof UpdateIncidentErrors];

export type UpdateIncidentResponses = {
    /**
     * OK
     */
    200: UpdateIncidentResponseBody;
};

export type UpdateIncidentResponse = UpdateIncidentResponses[keyof UpdateIncidentResponses];

export type GetIncidentUserDebriefData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incidents/{id}/debrief';
};

export type GetIncidentUserDebriefErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetIncidentUserDebriefError = GetIncidentUserDebriefErrors[keyof GetIncidentUserDebriefErrors];

export type GetIncidentUserDebriefResponses = {
    /**
     * OK
     */
    200: GetIncidentUserDebriefResponseBody;
};

export type GetIncidentUserDebriefResponse = GetIncidentUserDebriefResponses[keyof GetIncidentUserDebriefResponses];

export type ListIncidentEventsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/incidents/{id}/events';
};

export type ListIncidentEventsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListIncidentEventsError = ListIncidentEventsErrors[keyof ListIncidentEventsErrors];

export type ListIncidentEventsResponses = {
    /**
     * OK
     */
    200: ListIncidentEventsResponseBody;
};

export type ListIncidentEventsResponse = ListIncidentEventsResponses[keyof ListIncidentEventsResponses];

export type CreateIncidentEventData = {
    body: CreateIncidentEventRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incidents/{id}/events';
};

export type CreateIncidentEventErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateIncidentEventError = CreateIncidentEventErrors[keyof CreateIncidentEventErrors];

export type CreateIncidentEventResponses = {
    /**
     * OK
     */
    200: CreateIncidentEventResponseBody;
};

export type CreateIncidentEventResponse = CreateIncidentEventResponses[keyof CreateIncidentEventResponses];

export type ListIncidentMilestonesData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incidents/{id}/milestones';
};

export type ListIncidentMilestonesErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListIncidentMilestonesError = ListIncidentMilestonesErrors[keyof ListIncidentMilestonesErrors];

export type ListIncidentMilestonesResponses = {
    /**
     * OK
     */
    200: ListIncidentMilestonesResponseBody;
};

export type ListIncidentMilestonesResponse = ListIncidentMilestonesResponses[keyof ListIncidentMilestonesResponses];

export type CreateIncidentMilestoneData = {
    body: CreateIncidentMilestoneRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/incidents/{id}/milestones';
};

export type CreateIncidentMilestoneErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateIncidentMilestoneError = CreateIncidentMilestoneErrors[keyof CreateIncidentMilestoneErrors];

export type CreateIncidentMilestoneResponses = {
    /**
     * OK
     */
    200: CreateIncidentMilestoneResponseBody;
};

export type CreateIncidentMilestoneResponse = CreateIncidentMilestoneResponses[keyof CreateIncidentMilestoneResponses];

export type GetRetrospectiveForIncidentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/incidents/{id}/retrospective';
};

export type GetRetrospectiveForIncidentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetRetrospectiveForIncidentError = GetRetrospectiveForIncidentErrors[keyof GetRetrospectiveForIncidentErrors];

export type GetRetrospectiveForIncidentResponses = {
    /**
     * OK
     */
    200: GetRetrospectiveForIncidentResponseBody;
};

export type GetRetrospectiveForIncidentResponse = GetRetrospectiveForIncidentResponses[keyof GetRetrospectiveForIncidentResponses];

export type ListIntegrationsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        provider_id?: string;
        kind?: string;
    };
    url: '/integrations';
};

export type ListIntegrationsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListIntegrationsError = ListIntegrationsErrors[keyof ListIntegrationsErrors];

export type ListIntegrationsResponses = {
    /**
     * OK
     */
    200: ListIntegrationsResponseBody;
};

export type ListIntegrationsResponse = ListIntegrationsResponses[keyof ListIntegrationsResponses];

export type CreateIntegrationData = {
    body: CreateIntegrationRequestBody;
    path?: never;
    query?: never;
    url: '/integrations';
};

export type CreateIntegrationErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateIntegrationError = CreateIntegrationErrors[keyof CreateIntegrationErrors];

export type CreateIntegrationResponses = {
    /**
     * OK
     */
    200: CreateIntegrationResponseBody;
};

export type CreateIntegrationResponse = CreateIntegrationResponses[keyof CreateIntegrationResponses];

export type DeleteIntegrationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/integrations/{id}';
};

export type DeleteIntegrationErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type DeleteIntegrationError = DeleteIntegrationErrors[keyof DeleteIntegrationErrors];

export type DeleteIntegrationResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteIntegrationResponse = DeleteIntegrationResponses[keyof DeleteIntegrationResponses];

export type GetIntegrationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/integrations/{id}';
};

export type GetIntegrationErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetIntegrationError = GetIntegrationErrors[keyof GetIntegrationErrors];

export type GetIntegrationResponses = {
    /**
     * OK
     */
    200: GetIntegrationResponseBody;
};

export type GetIntegrationResponse = GetIntegrationResponses[keyof GetIntegrationResponses];

export type UpdateIntegrationData = {
    body: UpdateIntegrationRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/integrations/{id}';
};

export type UpdateIntegrationErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateIntegrationError = UpdateIntegrationErrors[keyof UpdateIntegrationErrors];

export type UpdateIntegrationResponses = {
    /**
     * OK
     */
    200: UpdateIntegrationResponseBody;
};

export type UpdateIntegrationResponse = UpdateIntegrationResponses[keyof UpdateIntegrationResponses];

export type ListMeetingSchedulesData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/meeting_schedules';
};

export type ListMeetingSchedulesErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListMeetingSchedulesError = ListMeetingSchedulesErrors[keyof ListMeetingSchedulesErrors];

export type ListMeetingSchedulesResponses = {
    /**
     * OK
     */
    200: ListMeetingSchedulesResponseBody;
};

export type ListMeetingSchedulesResponse = ListMeetingSchedulesResponses[keyof ListMeetingSchedulesResponses];

export type CreateMeetingScheduleData = {
    body: CreateMeetingScheduleRequestBody;
    path?: never;
    query?: never;
    url: '/meeting_schedules';
};

export type CreateMeetingScheduleErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateMeetingScheduleError = CreateMeetingScheduleErrors[keyof CreateMeetingScheduleErrors];

export type CreateMeetingScheduleResponses = {
    /**
     * OK
     */
    200: CreateMeetingScheduleResponseBody;
};

export type CreateMeetingScheduleResponse = CreateMeetingScheduleResponses[keyof CreateMeetingScheduleResponses];

export type ArchiveMeetingScheduleData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/meeting_schedules/{id}';
};

export type ArchiveMeetingScheduleErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveMeetingScheduleError = ArchiveMeetingScheduleErrors[keyof ArchiveMeetingScheduleErrors];

export type ArchiveMeetingScheduleResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveMeetingScheduleResponse = ArchiveMeetingScheduleResponses[keyof ArchiveMeetingScheduleResponses];

export type GetMeetingScheduleData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/meeting_schedules/{id}';
};

export type GetMeetingScheduleErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetMeetingScheduleError = GetMeetingScheduleErrors[keyof GetMeetingScheduleErrors];

export type GetMeetingScheduleResponses = {
    /**
     * OK
     */
    200: GetMeetingScheduleResponseBody;
};

export type GetMeetingScheduleResponse = GetMeetingScheduleResponses[keyof GetMeetingScheduleResponses];

export type UpdateMeetingScheduleData = {
    body: UpdateMeetingScheduleRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/meeting_schedules/{id}';
};

export type UpdateMeetingScheduleErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateMeetingScheduleError = UpdateMeetingScheduleErrors[keyof UpdateMeetingScheduleErrors];

export type UpdateMeetingScheduleResponses = {
    /**
     * OK
     */
    200: UpdateMeetingScheduleResponseBody;
};

export type UpdateMeetingScheduleResponse = UpdateMeetingScheduleResponses[keyof UpdateMeetingScheduleResponses];

export type ListMeetingSessionsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        meetingScheduleId?: string;
        userId?: string;
        teamId?: string;
        from?: string;
        to?: string;
    };
    url: '/meeting_sessions';
};

export type ListMeetingSessionsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListMeetingSessionsError = ListMeetingSessionsErrors[keyof ListMeetingSessionsErrors];

export type ListMeetingSessionsResponses = {
    /**
     * OK
     */
    200: ListMeetingSessionsResponseBody;
};

export type ListMeetingSessionsResponse = ListMeetingSessionsResponses[keyof ListMeetingSessionsResponses];

export type CreateMeetingSessionData = {
    body: CreateMeetingSessionRequestBody;
    path?: never;
    query?: never;
    url: '/meeting_sessions';
};

export type CreateMeetingSessionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateMeetingSessionError = CreateMeetingSessionErrors[keyof CreateMeetingSessionErrors];

export type CreateMeetingSessionResponses = {
    /**
     * OK
     */
    200: CreateMeetingSessionResponseBody;
};

export type CreateMeetingSessionResponse = CreateMeetingSessionResponses[keyof CreateMeetingSessionResponses];

export type ArchiveMeetingSessionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/meeting_sessions/{id}';
};

export type ArchiveMeetingSessionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveMeetingSessionError = ArchiveMeetingSessionErrors[keyof ArchiveMeetingSessionErrors];

export type ArchiveMeetingSessionResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveMeetingSessionResponse = ArchiveMeetingSessionResponses[keyof ArchiveMeetingSessionResponses];

export type GetMeetingSessionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/meeting_sessions/{id}';
};

export type GetMeetingSessionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetMeetingSessionError = GetMeetingSessionErrors[keyof GetMeetingSessionErrors];

export type GetMeetingSessionResponses = {
    /**
     * OK
     */
    200: GetMeetingSessionResponseBody;
};

export type GetMeetingSessionResponse = GetMeetingSessionResponses[keyof GetMeetingSessionResponses];

export type UpdateMeetingSessionData = {
    body: UpdateMeetingSessionRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/meeting_sessions/{id}';
};

export type UpdateMeetingSessionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateMeetingSessionError = UpdateMeetingSessionErrors[keyof UpdateMeetingSessionErrors];

export type UpdateMeetingSessionResponses = {
    /**
     * OK
     */
    200: UpdateMeetingSessionResponseBody;
};

export type UpdateMeetingSessionResponse = UpdateMeetingSessionResponses[keyof UpdateMeetingSessionResponses];

export type CreateOncallHandoverTemplateData = {
    body: CreateOncallShiftHandoverTemplateRequestBody;
    path?: never;
    query?: never;
    url: '/oncall/handover_templates';
};

export type CreateOncallHandoverTemplateErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateOncallHandoverTemplateError = CreateOncallHandoverTemplateErrors[keyof CreateOncallHandoverTemplateErrors];

export type CreateOncallHandoverTemplateResponses = {
    /**
     * OK
     */
    200: CreateOncallShiftHandoverTemplateResponseBody;
};

export type CreateOncallHandoverTemplateResponse = CreateOncallHandoverTemplateResponses[keyof CreateOncallHandoverTemplateResponses];

export type ArchiveOncallHandoverTemplateData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/handover_templates/{id}';
};

export type ArchiveOncallHandoverTemplateErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveOncallHandoverTemplateError = ArchiveOncallHandoverTemplateErrors[keyof ArchiveOncallHandoverTemplateErrors];

export type ArchiveOncallHandoverTemplateResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveOncallHandoverTemplateResponse = ArchiveOncallHandoverTemplateResponses[keyof ArchiveOncallHandoverTemplateResponses];

export type GetOncallShiftHandoverTemplateData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/handover_templates/{id}';
};

export type GetOncallShiftHandoverTemplateErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetOncallShiftHandoverTemplateError = GetOncallShiftHandoverTemplateErrors[keyof GetOncallShiftHandoverTemplateErrors];

export type GetOncallShiftHandoverTemplateResponses = {
    /**
     * OK
     */
    200: GetOncallShiftHandoverTemplateResponseBody;
};

export type GetOncallShiftHandoverTemplateResponse = GetOncallShiftHandoverTemplateResponses[keyof GetOncallShiftHandoverTemplateResponses];

export type UpdateOncallHandoverTemplateData = {
    body: UpdateOncallShiftHandoverTemplateRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/handover_templates/{id}';
};

export type UpdateOncallHandoverTemplateErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateOncallHandoverTemplateError = UpdateOncallHandoverTemplateErrors[keyof UpdateOncallHandoverTemplateErrors];

export type UpdateOncallHandoverTemplateResponses = {
    /**
     * OK
     */
    200: UpdateOncallShiftHandoverTemplateResponseBody;
};

export type UpdateOncallHandoverTemplateResponse = UpdateOncallHandoverTemplateResponses[keyof UpdateOncallHandoverTemplateResponses];

export type UpdateOncallShiftHandoverData = {
    body: UpdateOncallShiftHandoverRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/handovers/{id}';
};

export type UpdateOncallShiftHandoverErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateOncallShiftHandoverError = UpdateOncallShiftHandoverErrors[keyof UpdateOncallShiftHandoverErrors];

export type UpdateOncallShiftHandoverResponses = {
    /**
     * OK
     */
    200: UpdateOncallShiftHandoverResponseBody;
};

export type UpdateOncallShiftHandoverResponse = UpdateOncallShiftHandoverResponses[keyof UpdateOncallShiftHandoverResponses];

export type SendOncallShiftHandoverData = {
    body: SendOncallShiftHandoverRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/handovers/{id}/send';
};

export type SendOncallShiftHandoverErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type SendOncallShiftHandoverError = SendOncallShiftHandoverErrors[keyof SendOncallShiftHandoverErrors];

export type SendOncallShiftHandoverResponses = {
    /**
     * OK
     */
    200: SendOncallShiftHandoverResponseBody;
};

export type SendOncallShiftHandoverResponse = SendOncallShiftHandoverResponses[keyof SendOncallShiftHandoverResponses];

export type ListOncallRostersData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        teamId?: string;
        userId?: string;
        pinned?: boolean;
    };
    url: '/oncall/rosters';
};

export type ListOncallRostersErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListOncallRostersError = ListOncallRostersErrors[keyof ListOncallRostersErrors];

export type ListOncallRostersResponses = {
    /**
     * OK
     */
    200: ListOncallRostersResponseBody;
};

export type ListOncallRostersResponse = ListOncallRostersResponses[keyof ListOncallRostersResponses];

export type GetOncallRosterData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/rosters/{id}';
};

export type GetOncallRosterErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetOncallRosterError = GetOncallRosterErrors[keyof GetOncallRosterErrors];

export type GetOncallRosterResponses = {
    /**
     * OK
     */
    200: GetOncallRosterResponseBody;
};

export type GetOncallRosterResponse = GetOncallRosterResponses[keyof GetOncallRosterResponses];

export type ListOncallShiftsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        userId?: string;
        active?: boolean;
    };
    url: '/oncall/shifts';
};

export type ListOncallShiftsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListOncallShiftsError = ListOncallShiftsErrors[keyof ListOncallShiftsErrors];

export type ListOncallShiftsResponses = {
    /**
     * OK
     */
    200: ListOncallShiftsResponseBody;
};

export type ListOncallShiftsResponse = ListOncallShiftsResponses[keyof ListOncallShiftsResponses];

export type GetOncallShiftData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/shifts/{id}';
};

export type GetOncallShiftErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetOncallShiftError = GetOncallShiftErrors[keyof GetOncallShiftErrors];

export type GetOncallShiftResponses = {
    /**
     * OK
     */
    200: GetOncallShiftResponseBody;
};

export type GetOncallShiftResponse = GetOncallShiftResponses[keyof GetOncallShiftResponses];

export type GetAdjacentOncallShiftsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/shifts/{id}/adjacent';
};

export type GetAdjacentOncallShiftsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetAdjacentOncallShiftsError = GetAdjacentOncallShiftsErrors[keyof GetAdjacentOncallShiftsErrors];

export type GetAdjacentOncallShiftsResponses = {
    /**
     * OK
     */
    200: GetAdjacentOncallShiftsResponseBody;
};

export type GetAdjacentOncallShiftsResponse = GetAdjacentOncallShiftsResponses[keyof GetAdjacentOncallShiftsResponses];

export type GetOncallShiftHandoverData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/shifts/{id}/handover';
};

export type GetOncallShiftHandoverErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetOncallShiftHandoverError = GetOncallShiftHandoverErrors[keyof GetOncallShiftHandoverErrors];

export type GetOncallShiftHandoverResponses = {
    /**
     * OK
     */
    200: GetOncallShiftHandoverResponseBody;
};

export type GetOncallShiftHandoverResponse = GetOncallShiftHandoverResponses[keyof GetOncallShiftHandoverResponses];

export type GetUserOncallInformationData = {
    body?: never;
    path?: never;
    query: {
        userId: string;
        activeShifts?: boolean;
        upcomingShifts?: number;
        pastShifts?: number;
    };
    url: '/oncall/user';
};

export type GetUserOncallInformationErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetUserOncallInformationError = GetUserOncallInformationErrors[keyof GetUserOncallInformationErrors];

export type GetUserOncallInformationResponses = {
    /**
     * OK
     */
    200: GetUserOncallInformationResponseBody;
};

export type GetUserOncallInformationResponse = GetUserOncallInformationResponses[keyof GetUserOncallInformationResponses];

export type ListWatchedOncallRostersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oncall/watched_rosters';
};

export type ListWatchedOncallRostersErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListWatchedOncallRostersError = ListWatchedOncallRostersErrors[keyof ListWatchedOncallRostersErrors];

export type ListWatchedOncallRostersResponses = {
    /**
     * OK
     */
    200: ListWatchedOncallRostersResponseBody;
};

export type ListWatchedOncallRostersResponse = ListWatchedOncallRostersResponses[keyof ListWatchedOncallRostersResponses];

export type RemoveWatchedOncallRosterData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/watched_rosters/{id}';
};

export type RemoveWatchedOncallRosterErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type RemoveWatchedOncallRosterError = RemoveWatchedOncallRosterErrors[keyof RemoveWatchedOncallRosterErrors];

export type RemoveWatchedOncallRosterResponses = {
    /**
     * OK
     */
    200: RemoveWatchedOncallRosterResponseBody;
};

export type RemoveWatchedOncallRosterResponse = RemoveWatchedOncallRosterResponses[keyof RemoveWatchedOncallRosterResponses];

export type AddWatchedOncallRosterData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/oncall/watched_rosters/{id}';
};

export type AddWatchedOncallRosterErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type AddWatchedOncallRosterError = AddWatchedOncallRosterErrors[keyof AddWatchedOncallRosterErrors];

export type AddWatchedOncallRosterResponses = {
    /**
     * OK
     */
    200: AddWatchedOncallRosterResponseBody;
};

export type AddWatchedOncallRosterResponse = AddWatchedOncallRosterResponses[keyof AddWatchedOncallRosterResponses];

export type GetOncallShiftBurdenMetricWeightsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oncall_metrics/burden_weights';
};

export type GetOncallShiftBurdenMetricWeightsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetOncallShiftBurdenMetricWeightsError = GetOncallShiftBurdenMetricWeightsErrors[keyof GetOncallShiftBurdenMetricWeightsErrors];

export type GetOncallShiftBurdenMetricWeightsResponses = {
    /**
     * OK
     */
    200: GetOncallShiftBurdenMetricWeightsResponseBody;
};

export type GetOncallShiftBurdenMetricWeightsResponse = GetOncallShiftBurdenMetricWeightsResponses[keyof GetOncallShiftBurdenMetricWeightsResponses];

export type GetOncallRosterMetricsData = {
    body?: never;
    path?: never;
    query?: {
        rosterId?: string;
    };
    url: '/oncall_metrics/rosters';
};

export type GetOncallRosterMetricsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetOncallRosterMetricsError = GetOncallRosterMetricsErrors[keyof GetOncallRosterMetricsErrors];

export type GetOncallRosterMetricsResponses = {
    /**
     * OK
     */
    200: GetOncallRosterMetricsResponseBody;
};

export type GetOncallRosterMetricsResponse = GetOncallRosterMetricsResponses[keyof GetOncallRosterMetricsResponses];

export type GetOncallShiftMetricsData = {
    body?: never;
    path?: never;
    query?: {
        shiftId?: string;
    };
    url: '/oncall_metrics/shifts';
};

export type GetOncallShiftMetricsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetOncallShiftMetricsError = GetOncallShiftMetricsErrors[keyof GetOncallShiftMetricsErrors];

export type GetOncallShiftMetricsResponses = {
    /**
     * OK
     */
    200: GetOncallShiftMetricsResponseBody;
};

export type GetOncallShiftMetricsResponse = GetOncallShiftMetricsResponses[keyof GetOncallShiftMetricsResponses];

export type FinishOrganizationSetupData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/organization/setup';
};

export type FinishOrganizationSetupErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type FinishOrganizationSetupError = FinishOrganizationSetupErrors[keyof FinishOrganizationSetupErrors];

export type FinishOrganizationSetupResponses = {
    /**
     * No Content
     */
    204: void;
};

export type FinishOrganizationSetupResponse = FinishOrganizationSetupResponses[keyof FinishOrganizationSetupResponses];

export type ListPlaybooksData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        teamId?: string;
        alertId?: string;
    };
    url: '/playbooks';
};

export type ListPlaybooksErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListPlaybooksError = ListPlaybooksErrors[keyof ListPlaybooksErrors];

export type ListPlaybooksResponses = {
    /**
     * OK
     */
    200: ListPlaybooksResponseBody;
};

export type ListPlaybooksResponse = ListPlaybooksResponses[keyof ListPlaybooksResponses];

export type CreatePlaybookData = {
    body: CreatePlaybookRequestBody;
    path?: never;
    query?: never;
    url: '/playbooks';
};

export type CreatePlaybookErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreatePlaybookError = CreatePlaybookErrors[keyof CreatePlaybookErrors];

export type CreatePlaybookResponses = {
    /**
     * OK
     */
    200: CreatePlaybookResponseBody;
};

export type CreatePlaybookResponse = CreatePlaybookResponses[keyof CreatePlaybookResponses];

export type ArchivePlaybookData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/playbooks/{id}';
};

export type ArchivePlaybookErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchivePlaybookError = ArchivePlaybookErrors[keyof ArchivePlaybookErrors];

export type ArchivePlaybookResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchivePlaybookResponse = ArchivePlaybookResponses[keyof ArchivePlaybookResponses];

export type GetPlaybookData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/playbooks/{id}';
};

export type GetPlaybookErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetPlaybookError = GetPlaybookErrors[keyof GetPlaybookErrors];

export type GetPlaybookResponses = {
    /**
     * OK
     */
    200: GetPlaybookResponseBody;
};

export type GetPlaybookResponse = GetPlaybookResponses[keyof GetPlaybookResponses];

export type UpdatePlaybookData = {
    body: UpdatePlaybookRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/playbooks/{id}';
};

export type UpdatePlaybookErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdatePlaybookError = UpdatePlaybookErrors[keyof UpdatePlaybookErrors];

export type UpdatePlaybookResponses = {
    /**
     * OK
     */
    200: UpdatePlaybookResponseBody;
};

export type UpdatePlaybookResponse = UpdatePlaybookResponses[keyof UpdatePlaybookResponses];

export type GetRetrospectiveCommentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/retrospective_comments/{id}';
};

export type GetRetrospectiveCommentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetRetrospectiveCommentError = GetRetrospectiveCommentErrors[keyof GetRetrospectiveCommentErrors];

export type GetRetrospectiveCommentResponses = {
    /**
     * OK
     */
    200: GetRetrospectiveCommentResponseBody;
};

export type GetRetrospectiveCommentResponse = GetRetrospectiveCommentResponses[keyof GetRetrospectiveCommentResponses];

export type UpdateRetrospectiveCommentData = {
    body: UpdateRetrospectiveCommentRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/retrospective_comments/{id}';
};

export type UpdateRetrospectiveCommentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateRetrospectiveCommentError = UpdateRetrospectiveCommentErrors[keyof UpdateRetrospectiveCommentErrors];

export type UpdateRetrospectiveCommentResponses = {
    /**
     * OK
     */
    200: UpdateRetrospectiveCommentResponseBody;
};

export type UpdateRetrospectiveCommentResponse = UpdateRetrospectiveCommentResponses[keyof UpdateRetrospectiveCommentResponses];

export type ArchiveRetrospectiveReviewData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/retrospective_reviews/{id}';
};

export type ArchiveRetrospectiveReviewErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveRetrospectiveReviewError = ArchiveRetrospectiveReviewErrors[keyof ArchiveRetrospectiveReviewErrors];

export type ArchiveRetrospectiveReviewResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveRetrospectiveReviewResponse = ArchiveRetrospectiveReviewResponses[keyof ArchiveRetrospectiveReviewResponses];

export type UpdateRetrospectiveReviewData = {
    body: UpdateRetrospectiveReviewRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/retrospective_reviews/{id}';
};

export type UpdateRetrospectiveReviewErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateRetrospectiveReviewError = UpdateRetrospectiveReviewErrors[keyof UpdateRetrospectiveReviewErrors];

export type UpdateRetrospectiveReviewResponses = {
    /**
     * OK
     */
    200: UpdateRetrospectiveReviewResponseBody;
};

export type UpdateRetrospectiveReviewResponse = UpdateRetrospectiveReviewResponses[keyof UpdateRetrospectiveReviewResponses];

export type ListRetrospectivesData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/retrospectives';
};

export type ListRetrospectivesErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListRetrospectivesError = ListRetrospectivesErrors[keyof ListRetrospectivesErrors];

export type ListRetrospectivesResponses = {
    /**
     * OK
     */
    200: ListRetrospectivesResponseBody;
};

export type ListRetrospectivesResponse = ListRetrospectivesResponses[keyof ListRetrospectivesResponses];

export type CreateRetrospectiveData = {
    body: CreateRetrospectiveRequestBody;
    path?: never;
    query?: never;
    url: '/retrospectives';
};

export type CreateRetrospectiveErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateRetrospectiveError = CreateRetrospectiveErrors[keyof CreateRetrospectiveErrors];

export type CreateRetrospectiveResponses = {
    /**
     * OK
     */
    200: CreateRetrospectiveResponseBody;
};

export type CreateRetrospectiveResponse = CreateRetrospectiveResponses[keyof CreateRetrospectiveResponses];

export type GetRetrospectiveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/retrospectives/{id}';
};

export type GetRetrospectiveErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetRetrospectiveError = GetRetrospectiveErrors[keyof GetRetrospectiveErrors];

export type GetRetrospectiveResponses = {
    /**
     * OK
     */
    200: GetRetrospectiveResponseBody;
};

export type GetRetrospectiveResponse = GetRetrospectiveResponses[keyof GetRetrospectiveResponses];

export type ListRetrospectiveCommentsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/retrospectives/{id}/comments';
};

export type ListRetrospectiveCommentsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListRetrospectiveCommentsError = ListRetrospectiveCommentsErrors[keyof ListRetrospectiveCommentsErrors];

export type ListRetrospectiveCommentsResponses = {
    /**
     * OK
     */
    200: ListRetrospectiveCommentsResponseBody;
};

export type ListRetrospectiveCommentsResponse = ListRetrospectiveCommentsResponses[keyof ListRetrospectiveCommentsResponses];

export type CreateRetrospectiveDiscussionData = {
    body: CreateRetrospectiveCommentRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/retrospectives/{id}/comments';
};

export type CreateRetrospectiveDiscussionErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateRetrospectiveDiscussionError = CreateRetrospectiveDiscussionErrors[keyof CreateRetrospectiveDiscussionErrors];

export type CreateRetrospectiveDiscussionResponses = {
    /**
     * OK
     */
    200: CreateRetrospectiveCommentResponseBody;
};

export type CreateRetrospectiveDiscussionResponse = CreateRetrospectiveDiscussionResponses[keyof CreateRetrospectiveDiscussionResponses];

export type ListRetrospectiveReviewsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/retrospectives/{id}/reviews';
};

export type ListRetrospectiveReviewsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListRetrospectiveReviewsError = ListRetrospectiveReviewsErrors[keyof ListRetrospectiveReviewsErrors];

export type ListRetrospectiveReviewsResponses = {
    /**
     * OK
     */
    200: ListRetrospectiveReviewsResponseBody;
};

export type ListRetrospectiveReviewsResponse = ListRetrospectiveReviewsResponses[keyof ListRetrospectiveReviewsResponses];

export type CreateRetrospectiveReviewData = {
    body: CreateRetrospectiveReviewRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/retrospectives/{id}/reviews';
};

export type CreateRetrospectiveReviewErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateRetrospectiveReviewError = CreateRetrospectiveReviewErrors[keyof CreateRetrospectiveReviewErrors];

export type CreateRetrospectiveReviewResponses = {
    /**
     * OK
     */
    200: CreateRetrospectiveReviewResponseBody;
};

export type CreateRetrospectiveReviewResponse = CreateRetrospectiveReviewResponses[keyof CreateRetrospectiveReviewResponses];

export type GetSystemAnalysisData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_analysis/{id}';
};

export type GetSystemAnalysisErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetSystemAnalysisError = GetSystemAnalysisErrors[keyof GetSystemAnalysisErrors];

export type GetSystemAnalysisResponses = {
    /**
     * OK
     */
    200: GetSystemAnalysisResponseBody;
};

export type GetSystemAnalysisResponse = GetSystemAnalysisResponses[keyof GetSystemAnalysisResponses];

export type ListSystemAnalysisComponentsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/system_analysis/{id}/components';
};

export type ListSystemAnalysisComponentsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListSystemAnalysisComponentsError = ListSystemAnalysisComponentsErrors[keyof ListSystemAnalysisComponentsErrors];

export type ListSystemAnalysisComponentsResponses = {
    /**
     * OK
     */
    200: ListSystemAnalysisComponentsResponseBody;
};

export type ListSystemAnalysisComponentsResponse = ListSystemAnalysisComponentsResponses[keyof ListSystemAnalysisComponentsResponses];

export type AddSystemAnalysisComponentData = {
    body: AddSystemAnalysisComponentRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_analysis/{id}/components';
};

export type AddSystemAnalysisComponentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type AddSystemAnalysisComponentError = AddSystemAnalysisComponentErrors[keyof AddSystemAnalysisComponentErrors];

export type AddSystemAnalysisComponentResponses = {
    /**
     * OK
     */
    200: AddSystemAnalysisComponentResponseBody;
};

export type AddSystemAnalysisComponentResponse = AddSystemAnalysisComponentResponses[keyof AddSystemAnalysisComponentResponses];

export type ListSystemAnalysisRelationshipsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        analysisComponentId?: string;
    };
    url: '/system_analysis/{id}/relationships';
};

export type ListSystemAnalysisRelationshipsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListSystemAnalysisRelationshipsError = ListSystemAnalysisRelationshipsErrors[keyof ListSystemAnalysisRelationshipsErrors];

export type ListSystemAnalysisRelationshipsResponses = {
    /**
     * OK
     */
    200: ListSystemAnalysisRelationshipsResponseBody;
};

export type ListSystemAnalysisRelationshipsResponse = ListSystemAnalysisRelationshipsResponses[keyof ListSystemAnalysisRelationshipsResponses];

export type CreateSystemAnalysisRelationshipData = {
    body: CreateSystemAnalysisRelationshipRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_analysis/{id}/relationships';
};

export type CreateSystemAnalysisRelationshipErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateSystemAnalysisRelationshipError = CreateSystemAnalysisRelationshipErrors[keyof CreateSystemAnalysisRelationshipErrors];

export type CreateSystemAnalysisRelationshipResponses = {
    /**
     * OK
     */
    200: CreateSystemAnalysisRelationshipResponseBody;
};

export type CreateSystemAnalysisRelationshipResponse = CreateSystemAnalysisRelationshipResponses[keyof CreateSystemAnalysisRelationshipResponses];

export type DeleteSystemAnalysisComponentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_analysis_components/{id}';
};

export type DeleteSystemAnalysisComponentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type DeleteSystemAnalysisComponentError = DeleteSystemAnalysisComponentErrors[keyof DeleteSystemAnalysisComponentErrors];

export type DeleteSystemAnalysisComponentResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteSystemAnalysisComponentResponse = DeleteSystemAnalysisComponentResponses[keyof DeleteSystemAnalysisComponentResponses];

export type GetSystemAnalysisComponentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_analysis_components/{id}';
};

export type GetSystemAnalysisComponentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetSystemAnalysisComponentError = GetSystemAnalysisComponentErrors[keyof GetSystemAnalysisComponentErrors];

export type GetSystemAnalysisComponentResponses = {
    /**
     * OK
     */
    200: GetSystemAnalysisComponentResponseBody;
};

export type GetSystemAnalysisComponentResponse = GetSystemAnalysisComponentResponses[keyof GetSystemAnalysisComponentResponses];

export type UpdateSystemAnalysisComponentData = {
    body: UpdateSystemAnalysisComponentRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_analysis_components/{id}';
};

export type UpdateSystemAnalysisComponentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateSystemAnalysisComponentError = UpdateSystemAnalysisComponentErrors[keyof UpdateSystemAnalysisComponentErrors];

export type UpdateSystemAnalysisComponentResponses = {
    /**
     * OK
     */
    200: UpdateSystemAnalysisComponentResponseBody;
};

export type UpdateSystemAnalysisComponentResponse = UpdateSystemAnalysisComponentResponses[keyof UpdateSystemAnalysisComponentResponses];

export type DeleteSystemAnalysisRelationshipData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_analysis_relationships/{id}';
};

export type DeleteSystemAnalysisRelationshipErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type DeleteSystemAnalysisRelationshipError = DeleteSystemAnalysisRelationshipErrors[keyof DeleteSystemAnalysisRelationshipErrors];

export type DeleteSystemAnalysisRelationshipResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteSystemAnalysisRelationshipResponse = DeleteSystemAnalysisRelationshipResponses[keyof DeleteSystemAnalysisRelationshipResponses];

export type GetSystemAnalysisRelationshipData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_analysis_relationships/{id}';
};

export type GetSystemAnalysisRelationshipErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetSystemAnalysisRelationshipError = GetSystemAnalysisRelationshipErrors[keyof GetSystemAnalysisRelationshipErrors];

export type GetSystemAnalysisRelationshipResponses = {
    /**
     * OK
     */
    200: GetSystemAnalysisRelationshipResponseBody;
};

export type GetSystemAnalysisRelationshipResponse = GetSystemAnalysisRelationshipResponses[keyof GetSystemAnalysisRelationshipResponses];

export type UpdateSystemAnalysisRelationshipData = {
    body: UpdateSystemAnalysisRelationshipRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_analysis_relationships/{id}';
};

export type UpdateSystemAnalysisRelationshipErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateSystemAnalysisRelationshipError = UpdateSystemAnalysisRelationshipErrors[keyof UpdateSystemAnalysisRelationshipErrors];

export type UpdateSystemAnalysisRelationshipResponses = {
    /**
     * OK
     */
    200: UpdateSystemAnalysisRelationshipResponseBody;
};

export type UpdateSystemAnalysisRelationshipResponse = UpdateSystemAnalysisRelationshipResponses[keyof UpdateSystemAnalysisRelationshipResponses];

export type ArchiveSystemComponentConstraintData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_constraints/{id}';
};

export type ArchiveSystemComponentConstraintErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveSystemComponentConstraintError = ArchiveSystemComponentConstraintErrors[keyof ArchiveSystemComponentConstraintErrors];

export type ArchiveSystemComponentConstraintResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveSystemComponentConstraintResponse = ArchiveSystemComponentConstraintResponses[keyof ArchiveSystemComponentConstraintResponses];

export type GetSystemComponentConstraintData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_constraints/{id}';
};

export type GetSystemComponentConstraintErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetSystemComponentConstraintError = GetSystemComponentConstraintErrors[keyof GetSystemComponentConstraintErrors];

export type GetSystemComponentConstraintResponses = {
    /**
     * OK
     */
    200: GetSystemComponentConstraintResponseBody;
};

export type GetSystemComponentConstraintResponse = GetSystemComponentConstraintResponses[keyof GetSystemComponentConstraintResponses];

export type UpdateSystemComponentConstraintData = {
    body: UpdateSystemComponentConstraintRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_constraints/{id}';
};

export type UpdateSystemComponentConstraintErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateSystemComponentConstraintError = UpdateSystemComponentConstraintErrors[keyof UpdateSystemComponentConstraintErrors];

export type UpdateSystemComponentConstraintResponses = {
    /**
     * OK
     */
    200: UpdateSystemComponentConstraintResponseBody;
};

export type UpdateSystemComponentConstraintResponse = UpdateSystemComponentConstraintResponses[keyof UpdateSystemComponentConstraintResponses];

export type ArchiveSystemComponentControlData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_controls/{id}';
};

export type ArchiveSystemComponentControlErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveSystemComponentControlError = ArchiveSystemComponentControlErrors[keyof ArchiveSystemComponentControlErrors];

export type ArchiveSystemComponentControlResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveSystemComponentControlResponse = ArchiveSystemComponentControlResponses[keyof ArchiveSystemComponentControlResponses];

export type GetSystemComponentControlData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_controls/{id}';
};

export type GetSystemComponentControlErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetSystemComponentControlError = GetSystemComponentControlErrors[keyof GetSystemComponentControlErrors];

export type GetSystemComponentControlResponses = {
    /**
     * OK
     */
    200: GetSystemComponentControlResponseBody;
};

export type GetSystemComponentControlResponse = GetSystemComponentControlResponses[keyof GetSystemComponentControlResponses];

export type UpdateSystemComponentControlData = {
    body: UpdateSystemComponentControlRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_controls/{id}';
};

export type UpdateSystemComponentControlErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateSystemComponentControlError = UpdateSystemComponentControlErrors[keyof UpdateSystemComponentControlErrors];

export type UpdateSystemComponentControlResponses = {
    /**
     * OK
     */
    200: UpdateSystemComponentControlResponseBody;
};

export type UpdateSystemComponentControlResponse = UpdateSystemComponentControlResponses[keyof UpdateSystemComponentControlResponses];

export type ListSystemComponentKindsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/system_component_kinds';
};

export type ListSystemComponentKindsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListSystemComponentKindsError = ListSystemComponentKindsErrors[keyof ListSystemComponentKindsErrors];

export type ListSystemComponentKindsResponses = {
    /**
     * OK
     */
    200: ListSystemComponentKindsResponseBody;
};

export type ListSystemComponentKindsResponse = ListSystemComponentKindsResponses[keyof ListSystemComponentKindsResponses];

export type CreateSystemComponentKindData = {
    body: CreateSystemComponentKindRequestBody;
    path?: never;
    query?: never;
    url: '/system_component_kinds';
};

export type CreateSystemComponentKindErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateSystemComponentKindError = CreateSystemComponentKindErrors[keyof CreateSystemComponentKindErrors];

export type CreateSystemComponentKindResponses = {
    /**
     * OK
     */
    200: CreateSystemComponentKindResponseBody;
};

export type CreateSystemComponentKindResponse = CreateSystemComponentKindResponses[keyof CreateSystemComponentKindResponses];

export type ArchiveSystemComponentKindData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_kinds/{id}';
};

export type ArchiveSystemComponentKindErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveSystemComponentKindError = ArchiveSystemComponentKindErrors[keyof ArchiveSystemComponentKindErrors];

export type ArchiveSystemComponentKindResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveSystemComponentKindResponse = ArchiveSystemComponentKindResponses[keyof ArchiveSystemComponentKindResponses];

export type GetSystemComponentKindData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_kinds/{id}';
};

export type GetSystemComponentKindErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetSystemComponentKindError = GetSystemComponentKindErrors[keyof GetSystemComponentKindErrors];

export type GetSystemComponentKindResponses = {
    /**
     * OK
     */
    200: GetSystemComponentKindResponseBody;
};

export type GetSystemComponentKindResponse = GetSystemComponentKindResponses[keyof GetSystemComponentKindResponses];

export type UpdateSystemComponentKindData = {
    body: UpdateSystemComponentKindRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_kinds/{id}';
};

export type UpdateSystemComponentKindErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateSystemComponentKindError = UpdateSystemComponentKindErrors[keyof UpdateSystemComponentKindErrors];

export type UpdateSystemComponentKindResponses = {
    /**
     * OK
     */
    200: UpdateSystemComponentKindResponseBody;
};

export type UpdateSystemComponentKindResponse = UpdateSystemComponentKindResponses[keyof UpdateSystemComponentKindResponses];

export type ListSystemComponentRelationshipsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        sourceId?: string;
        targetId?: string;
    };
    url: '/system_component_relationships';
};

export type ListSystemComponentRelationshipsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListSystemComponentRelationshipsError = ListSystemComponentRelationshipsErrors[keyof ListSystemComponentRelationshipsErrors];

export type ListSystemComponentRelationshipsResponses = {
    /**
     * OK
     */
    200: ListSystemComponentRelationshipsResponseBody;
};

export type ListSystemComponentRelationshipsResponse = ListSystemComponentRelationshipsResponses[keyof ListSystemComponentRelationshipsResponses];

export type CreateSystemComponentRelationshipData = {
    body: CreateSystemComponentRelationshipRequestBody;
    path?: never;
    query?: never;
    url: '/system_component_relationships';
};

export type CreateSystemComponentRelationshipErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateSystemComponentRelationshipError = CreateSystemComponentRelationshipErrors[keyof CreateSystemComponentRelationshipErrors];

export type CreateSystemComponentRelationshipResponses = {
    /**
     * OK
     */
    200: CreateSystemComponentRelationshipResponseBody;
};

export type CreateSystemComponentRelationshipResponse = CreateSystemComponentRelationshipResponses[keyof CreateSystemComponentRelationshipResponses];

export type ArchiveSystemComponentRelationshipData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_relationships/{id}';
};

export type ArchiveSystemComponentRelationshipErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveSystemComponentRelationshipError = ArchiveSystemComponentRelationshipErrors[keyof ArchiveSystemComponentRelationshipErrors];

export type ArchiveSystemComponentRelationshipResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveSystemComponentRelationshipResponse = ArchiveSystemComponentRelationshipResponses[keyof ArchiveSystemComponentRelationshipResponses];

export type GetSystemComponentRelationshipData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_relationships/{id}';
};

export type GetSystemComponentRelationshipErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetSystemComponentRelationshipError = GetSystemComponentRelationshipErrors[keyof GetSystemComponentRelationshipErrors];

export type GetSystemComponentRelationshipResponses = {
    /**
     * OK
     */
    200: GetSystemComponentRelationshipResponseBody;
};

export type GetSystemComponentRelationshipResponse = GetSystemComponentRelationshipResponses[keyof GetSystemComponentRelationshipResponses];

export type UpdateSystemComponentRelationshipData = {
    body: UpdateSystemComponentRelationshipRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_relationships/{id}';
};

export type UpdateSystemComponentRelationshipErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateSystemComponentRelationshipError = UpdateSystemComponentRelationshipErrors[keyof UpdateSystemComponentRelationshipErrors];

export type UpdateSystemComponentRelationshipResponses = {
    /**
     * OK
     */
    200: UpdateSystemComponentRelationshipResponseBody;
};

export type UpdateSystemComponentRelationshipResponse = UpdateSystemComponentRelationshipResponses[keyof UpdateSystemComponentRelationshipResponses];

export type ArchiveSystemComponentSignalData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_signals/{id}';
};

export type ArchiveSystemComponentSignalErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveSystemComponentSignalError = ArchiveSystemComponentSignalErrors[keyof ArchiveSystemComponentSignalErrors];

export type ArchiveSystemComponentSignalResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveSystemComponentSignalResponse = ArchiveSystemComponentSignalResponses[keyof ArchiveSystemComponentSignalResponses];

export type GetSystemComponentSignalData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_signals/{id}';
};

export type GetSystemComponentSignalErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetSystemComponentSignalError = GetSystemComponentSignalErrors[keyof GetSystemComponentSignalErrors];

export type GetSystemComponentSignalResponses = {
    /**
     * OK
     */
    200: GetSystemComponentSignalResponseBody;
};

export type GetSystemComponentSignalResponse = GetSystemComponentSignalResponses[keyof GetSystemComponentSignalResponses];

export type UpdateSystemComponentSignalData = {
    body: UpdateSystemComponentSignalRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_component_signals/{id}';
};

export type UpdateSystemComponentSignalErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateSystemComponentSignalError = UpdateSystemComponentSignalErrors[keyof UpdateSystemComponentSignalErrors];

export type UpdateSystemComponentSignalResponses = {
    /**
     * OK
     */
    200: UpdateSystemComponentSignalResponseBody;
};

export type UpdateSystemComponentSignalResponse = UpdateSystemComponentSignalResponses[keyof UpdateSystemComponentSignalResponses];

export type ListSystemComponentsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/system_components';
};

export type ListSystemComponentsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListSystemComponentsError = ListSystemComponentsErrors[keyof ListSystemComponentsErrors];

export type ListSystemComponentsResponses = {
    /**
     * OK
     */
    200: ListSystemComponentsResponseBody;
};

export type ListSystemComponentsResponse = ListSystemComponentsResponses[keyof ListSystemComponentsResponses];

export type CreateSystemComponentData = {
    body: CreateSystemComponentRequestBody;
    path?: never;
    query?: never;
    url: '/system_components';
};

export type CreateSystemComponentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateSystemComponentError = CreateSystemComponentErrors[keyof CreateSystemComponentErrors];

export type CreateSystemComponentResponses = {
    /**
     * OK
     */
    200: CreateSystemComponentResponseBody;
};

export type CreateSystemComponentResponse = CreateSystemComponentResponses[keyof CreateSystemComponentResponses];

export type ArchiveSystemComponentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_components/{id}';
};

export type ArchiveSystemComponentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveSystemComponentError = ArchiveSystemComponentErrors[keyof ArchiveSystemComponentErrors];

export type ArchiveSystemComponentResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveSystemComponentResponse = ArchiveSystemComponentResponses[keyof ArchiveSystemComponentResponses];

export type GetSystemComponentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_components/{id}';
};

export type GetSystemComponentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetSystemComponentError = GetSystemComponentErrors[keyof GetSystemComponentErrors];

export type GetSystemComponentResponses = {
    /**
     * OK
     */
    200: GetSystemComponentResponseBody;
};

export type GetSystemComponentResponse = GetSystemComponentResponses[keyof GetSystemComponentResponses];

export type UpdateSystemComponentData = {
    body: UpdateSystemComponentRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_components/{id}';
};

export type UpdateSystemComponentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateSystemComponentError = UpdateSystemComponentErrors[keyof UpdateSystemComponentErrors];

export type UpdateSystemComponentResponses = {
    /**
     * OK
     */
    200: UpdateSystemComponentResponseBody;
};

export type UpdateSystemComponentResponse = UpdateSystemComponentResponses[keyof UpdateSystemComponentResponses];

export type CreateSystemComponentConstraintData = {
    body: CreateSystemComponentConstraintRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_components/{id}/constraints';
};

export type CreateSystemComponentConstraintErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateSystemComponentConstraintError = CreateSystemComponentConstraintErrors[keyof CreateSystemComponentConstraintErrors];

export type CreateSystemComponentConstraintResponses = {
    /**
     * OK
     */
    200: CreateSystemComponentConstraintResponseBody;
};

export type CreateSystemComponentConstraintResponse = CreateSystemComponentConstraintResponses[keyof CreateSystemComponentConstraintResponses];

export type CreateSystemComponentControlData = {
    body: CreateSystemComponentControlRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_components/{id}/controls';
};

export type CreateSystemComponentControlErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateSystemComponentControlError = CreateSystemComponentControlErrors[keyof CreateSystemComponentControlErrors];

export type CreateSystemComponentControlResponses = {
    /**
     * OK
     */
    200: CreateSystemComponentControlResponseBody;
};

export type CreateSystemComponentControlResponse = CreateSystemComponentControlResponses[keyof CreateSystemComponentControlResponses];

export type CreateSystemComponentSignalData = {
    body: CreateSystemComponentSignalRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/system_components/{id}/signals';
};

export type CreateSystemComponentSignalErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateSystemComponentSignalError = CreateSystemComponentSignalErrors[keyof CreateSystemComponentSignalErrors];

export type CreateSystemComponentSignalResponses = {
    /**
     * OK
     */
    200: CreateSystemComponentSignalResponseBody;
};

export type CreateSystemComponentSignalResponse = CreateSystemComponentSignalResponses[keyof CreateSystemComponentSignalResponses];

export type ListTasksData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        teamId?: string;
    };
    url: '/tasks';
};

export type ListTasksErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListTasksError = ListTasksErrors[keyof ListTasksErrors];

export type ListTasksResponses = {
    /**
     * OK
     */
    200: ListTasksResponseBody;
};

export type ListTasksResponse = ListTasksResponses[keyof ListTasksResponses];

export type CreateTaskData = {
    body: CreateTaskRequestBody;
    path?: never;
    query?: never;
    url: '/tasks';
};

export type CreateTaskErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateTaskError = CreateTaskErrors[keyof CreateTaskErrors];

export type CreateTaskResponses = {
    /**
     * OK
     */
    200: CreateTaskResponseBody;
};

export type CreateTaskResponse = CreateTaskResponses[keyof CreateTaskResponses];

export type ArchiveTaskData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/tasks/{id}';
};

export type ArchiveTaskErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveTaskError = ArchiveTaskErrors[keyof ArchiveTaskErrors];

export type ArchiveTaskResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveTaskResponse = ArchiveTaskResponses[keyof ArchiveTaskResponses];

export type GetTaskData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/tasks/{id}';
};

export type GetTaskErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetTaskError = GetTaskErrors[keyof GetTaskErrors];

export type GetTaskResponses = {
    /**
     * OK
     */
    200: GetTaskResponseBody;
};

export type GetTaskResponse = GetTaskResponses[keyof GetTaskResponses];

export type UpdateTaskData = {
    body: UpdateTaskRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/tasks/{id}';
};

export type UpdateTaskErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateTaskError = UpdateTaskErrors[keyof UpdateTaskErrors];

export type UpdateTaskResponses = {
    /**
     * OK
     */
    200: UpdateTaskResponseBody;
};

export type UpdateTaskResponse = UpdateTaskResponses[keyof UpdateTaskResponses];

export type ListTeamsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
    };
    url: '/teams';
};

export type ListTeamsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListTeamsError = ListTeamsErrors[keyof ListTeamsErrors];

export type ListTeamsResponses = {
    /**
     * OK
     */
    200: ListTeamsResponseBody;
};

export type ListTeamsResponse = ListTeamsResponses[keyof ListTeamsResponses];

export type CreateTeamData = {
    body: CreateTeamRequestBody;
    path?: never;
    query?: never;
    url: '/teams';
};

export type CreateTeamErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CreateTeamError = CreateTeamErrors[keyof CreateTeamErrors];

export type CreateTeamResponses = {
    /**
     * OK
     */
    200: CreateTeamResponseBody;
};

export type CreateTeamResponse = CreateTeamResponses[keyof CreateTeamResponses];

export type ArchiveTeamData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/teams/{id}';
};

export type ArchiveTeamErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ArchiveTeamError = ArchiveTeamErrors[keyof ArchiveTeamErrors];

export type ArchiveTeamResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ArchiveTeamResponse = ArchiveTeamResponses[keyof ArchiveTeamResponses];

export type GetTeamData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/teams/{id}';
};

export type GetTeamErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetTeamError = GetTeamErrors[keyof GetTeamErrors];

export type GetTeamResponses = {
    /**
     * OK
     */
    200: GetTeamResponseBody;
};

export type GetTeamResponse = GetTeamResponses[keyof GetTeamResponses];

export type UpdateTeamsData = {
    body: UpdateTeamRequestBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/teams/{id}';
};

export type UpdateTeamsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type UpdateTeamsError = UpdateTeamsErrors[keyof UpdateTeamsErrors];

export type UpdateTeamsResponses = {
    /**
     * OK
     */
    200: UpdateTeamResponseBody;
};

export type UpdateTeamsResponse = UpdateTeamsResponses[keyof UpdateTeamsResponses];

export type DeleteUserNotificationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/user_session/notifications/{id}';
};

export type DeleteUserNotificationErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type DeleteUserNotificationError = DeleteUserNotificationErrors[keyof DeleteUserNotificationErrors];

export type DeleteUserNotificationResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteUserNotificationResponse = DeleteUserNotificationResponses[keyof DeleteUserNotificationResponses];

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        search?: string;
        archived?: boolean;
        teamId?: string;
    };
    url: '/users';
};

export type ListUsersErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
    /**
     * OK
     */
    200: ListUsersResponseBody;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type GetUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type GetUserErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unauthorized
     */
    401: ErrorModel;
    /**
     * Forbidden
     */
    403: ErrorModel;
    /**
     * Not Found
     */
    404: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    /**
     * OK
     */
    200: GetUserResponseBody;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];
