// This file is auto-generated by @hey-api/openapi-ts

import { type InfiniteData, infiniteQueryOptions, type MutationOptions, queryOptions } from '@tanstack/svelte-query';

import { client } from '../client.gen';
import { addIncidentDebriefUserMessage, addSystemAnalysisComponent, addWatchedOncallRoster, archiveDebriefQuestion, archiveIncident, archiveIncidentField, archiveIncidentRole, archiveIncidentSeverity, archiveIncidentTag, archiveIncidentType, archiveMeetingSchedule, archiveMeetingSession, archiveOncallHandoverTemplate, archivePlaybook, archiveRetrospectiveReview, archiveSystemComponent, archiveSystemComponentConstraint, archiveSystemComponentControl, archiveSystemComponentKind, archiveSystemComponentRelationship, archiveSystemComponentSignal, archiveTask, archiveTeam, createDebriefQuestion, createEventAnnotation, createIncident, createIncidentEvent, createIncidentField, createIncidentMilestone, createIncidentRole, createIncidentSeverity, createIncidentTag, createIncidentType, createIntegration, createMeetingSchedule, createMeetingSession, createOncallHandoverTemplate, createPlaybook, createRetrospective, createRetrospectiveDiscussion, createRetrospectiveReview, createSystemAnalysisRelationship, createSystemComponent, createSystemComponentConstraint, createSystemComponentControl, createSystemComponentKind, createSystemComponentRelationship, createSystemComponentSignal, createTask, createTeam, deleteEventAnnotation, deleteIncidentEvent, deleteIncidentMilestone, deleteIntegration, deleteSystemAnalysisComponent, deleteSystemAnalysisRelationship, deleteUserNotification, finishOrganizationSetup, getAdjacentOncallShifts, getAlert, getAlertMetrics, getAuthSessionConfig, getCurrentAuthSession, getDebriefQuestion, getEvent, getIncident, getIncidentDebrief, getIncidentField, getIncidentRole, getIncidentSeverity, getIncidentTag, getIncidentType, getIncidentUserDebrief, getIntegration, getMeetingSchedule, getMeetingSession, getOncallRoster, getOncallRosterMetrics, getOncallShift, getOncallShiftBurdenMetricWeights, getOncallShiftHandover, getOncallShiftHandoverTemplate, getOncallShiftMetrics, getPlaybook, getRetrospective, getRetrospectiveComment, getRetrospectiveForIncident, getSystemAnalysis, getSystemAnalysisComponent, getSystemAnalysisRelationship, getSystemComponent, getSystemComponentConstraint, getSystemComponentControl, getSystemComponentKind, getSystemComponentRelationship, getSystemComponentSignal, getTask, getTeam, getUser, getUserOncallInformation, listAlertIncidentLinks, listAlerts, listDebriefMessages, listDebriefQuestions, listDebriefSuggestions, listEventAnnotations, listEvents, listIncidentEventContributingFactorCategories, listIncidentEvents, listIncidentFields, listIncidentMilestones, listIncidentRoles, listIncidents, listIncidentSeverities, listIncidentTags, listIncidentTypes, listIntegrations, listMeetingSchedules, listMeetingSessions, listOncallRosters, listOncallShifts, listPlaybooks, listRetrospectiveComments, listRetrospectiveReviews, listRetrospectives, listSystemAnalysisComponents, listSystemAnalysisRelationships, listSystemComponentKinds, listSystemComponentRelationships, listSystemComponents, listTasks, listTeams, listUserNotifications, listUsers, listWatchedOncallRosters, type Options, removeWatchedOncallRoster, requestDocumentEditorSession, sendOncallShiftHandover, updateDebriefQuestion, updateEventAnnotation, updateIncident, updateIncidentDebrief, updateIncidentEvent, updateIncidentField, updateIncidentMilestone, updateIncidentRole, updateIncidentSeverity, updateIncidentTag, updateIncidentType, updateIntegration, updateMeetingSchedule, updateMeetingSession, updateOncallHandoverTemplate, updateOncallShiftHandover, updatePlaybook, updateRetrospectiveComment, updateRetrospectiveReview, updateSystemAnalysisComponent, updateSystemAnalysisRelationship, updateSystemComponent, updateSystemComponentConstraint, updateSystemComponentControl, updateSystemComponentKind, updateSystemComponentRelationship, updateSystemComponentSignal, updateTask, updateTeams } from '../sdk.gen';
import type { AddIncidentDebriefUserMessageData, AddIncidentDebriefUserMessageError, AddIncidentDebriefUserMessageResponse, AddSystemAnalysisComponentData, AddSystemAnalysisComponentError, AddSystemAnalysisComponentResponse, AddWatchedOncallRosterData, AddWatchedOncallRosterError, AddWatchedOncallRosterResponse, ArchiveDebriefQuestionData, ArchiveDebriefQuestionError, ArchiveDebriefQuestionResponse, ArchiveIncidentData, ArchiveIncidentError, ArchiveIncidentFieldData, ArchiveIncidentFieldError, ArchiveIncidentFieldResponse, ArchiveIncidentResponse, ArchiveIncidentRoleData, ArchiveIncidentRoleError, ArchiveIncidentRoleResponse, ArchiveIncidentSeverityData, ArchiveIncidentSeverityError, ArchiveIncidentSeverityResponse, ArchiveIncidentTagData, ArchiveIncidentTagError, ArchiveIncidentTagResponse, ArchiveIncidentTypeData, ArchiveIncidentTypeError, ArchiveIncidentTypeResponse, ArchiveMeetingScheduleData, ArchiveMeetingScheduleError, ArchiveMeetingScheduleResponse, ArchiveMeetingSessionData, ArchiveMeetingSessionError, ArchiveMeetingSessionResponse, ArchiveOncallHandoverTemplateData, ArchiveOncallHandoverTemplateError, ArchiveOncallHandoverTemplateResponse, ArchivePlaybookData, ArchivePlaybookError, ArchivePlaybookResponse, ArchiveRetrospectiveReviewData, ArchiveRetrospectiveReviewError, ArchiveRetrospectiveReviewResponse, ArchiveSystemComponentConstraintData, ArchiveSystemComponentConstraintError, ArchiveSystemComponentConstraintResponse, ArchiveSystemComponentControlData, ArchiveSystemComponentControlError, ArchiveSystemComponentControlResponse, ArchiveSystemComponentData, ArchiveSystemComponentError, ArchiveSystemComponentKindData, ArchiveSystemComponentKindError, ArchiveSystemComponentKindResponse, ArchiveSystemComponentRelationshipData, ArchiveSystemComponentRelationshipError, ArchiveSystemComponentRelationshipResponse, ArchiveSystemComponentResponse, ArchiveSystemComponentSignalData, ArchiveSystemComponentSignalError, ArchiveSystemComponentSignalResponse, ArchiveTaskData, ArchiveTaskError, ArchiveTaskResponse, ArchiveTeamData, ArchiveTeamError, ArchiveTeamResponse, CreateDebriefQuestionData, CreateDebriefQuestionError, CreateDebriefQuestionResponse, CreateEventAnnotationData, CreateEventAnnotationError, CreateEventAnnotationResponse, CreateIncidentData, CreateIncidentError, CreateIncidentEventData, CreateIncidentEventError, CreateIncidentEventResponse, CreateIncidentFieldData, CreateIncidentFieldError, CreateIncidentFieldResponse, CreateIncidentMilestoneData, CreateIncidentMilestoneError, CreateIncidentMilestoneResponse, CreateIncidentResponse, CreateIncidentRoleData, CreateIncidentRoleError, CreateIncidentRoleResponse, CreateIncidentSeverityData, CreateIncidentSeverityError, CreateIncidentSeverityResponse, CreateIncidentTagData, CreateIncidentTagError, CreateIncidentTagResponse, CreateIncidentTypeData, CreateIncidentTypeError, CreateIncidentTypeResponse, CreateIntegrationData, CreateIntegrationError, CreateIntegrationResponse, CreateMeetingScheduleData, CreateMeetingScheduleError, CreateMeetingScheduleResponse, CreateMeetingSessionData, CreateMeetingSessionError, CreateMeetingSessionResponse, CreateOncallHandoverTemplateData, CreateOncallHandoverTemplateError, CreateOncallHandoverTemplateResponse, CreatePlaybookData, CreatePlaybookError, CreatePlaybookResponse, CreateRetrospectiveData, CreateRetrospectiveDiscussionData, CreateRetrospectiveDiscussionError, CreateRetrospectiveDiscussionResponse, CreateRetrospectiveError, CreateRetrospectiveResponse, CreateRetrospectiveReviewData, CreateRetrospectiveReviewError, CreateRetrospectiveReviewResponse, CreateSystemAnalysisRelationshipData, CreateSystemAnalysisRelationshipError, CreateSystemAnalysisRelationshipResponse, CreateSystemComponentConstraintData, CreateSystemComponentConstraintError, CreateSystemComponentConstraintResponse, CreateSystemComponentControlData, CreateSystemComponentControlError, CreateSystemComponentControlResponse, CreateSystemComponentData, CreateSystemComponentError, CreateSystemComponentKindData, CreateSystemComponentKindError, CreateSystemComponentKindResponse, CreateSystemComponentRelationshipData, CreateSystemComponentRelationshipError, CreateSystemComponentRelationshipResponse, CreateSystemComponentResponse, CreateSystemComponentSignalData, CreateSystemComponentSignalError, CreateSystemComponentSignalResponse, CreateTaskData, CreateTaskError, CreateTaskResponse, CreateTeamData, CreateTeamError, CreateTeamResponse, DeleteEventAnnotationData, DeleteEventAnnotationError, DeleteEventAnnotationResponse, DeleteIncidentEventData, DeleteIncidentEventError, DeleteIncidentEventResponse, DeleteIncidentMilestoneData, DeleteIncidentMilestoneError, DeleteIncidentMilestoneResponse, DeleteIntegrationData, DeleteIntegrationError, DeleteIntegrationResponse, DeleteSystemAnalysisComponentData, DeleteSystemAnalysisComponentError, DeleteSystemAnalysisComponentResponse, DeleteSystemAnalysisRelationshipData, DeleteSystemAnalysisRelationshipError, DeleteSystemAnalysisRelationshipResponse, DeleteUserNotificationData, DeleteUserNotificationError, DeleteUserNotificationResponse, FinishOrganizationSetupData, FinishOrganizationSetupError, FinishOrganizationSetupResponse, GetAdjacentOncallShiftsData, GetAlertData, GetAlertMetricsData, GetAuthSessionConfigData, GetCurrentAuthSessionData, GetDebriefQuestionData, GetEventData, GetIncidentData, GetIncidentDebriefData, GetIncidentFieldData, GetIncidentRoleData, GetIncidentSeverityData, GetIncidentTagData, GetIncidentTypeData, GetIncidentUserDebriefData, GetIntegrationData, GetMeetingScheduleData, GetMeetingSessionData, GetOncallRosterData, GetOncallRosterMetricsData, GetOncallShiftBurdenMetricWeightsData, GetOncallShiftData, GetOncallShiftHandoverData, GetOncallShiftHandoverTemplateData, GetOncallShiftMetricsData, GetPlaybookData, GetRetrospectiveCommentData, GetRetrospectiveCommentError, GetRetrospectiveCommentResponse, GetRetrospectiveData, GetRetrospectiveForIncidentData, GetSystemAnalysisComponentData, GetSystemAnalysisData, GetSystemAnalysisRelationshipData, GetSystemComponentConstraintData, GetSystemComponentControlData, GetSystemComponentData, GetSystemComponentKindData, GetSystemComponentRelationshipData, GetSystemComponentSignalData, GetTaskData, GetTeamData, GetUserData, GetUserOncallInformationData, ListAlertIncidentLinksData, ListAlertIncidentLinksError, ListAlertIncidentLinksResponse, ListAlertsData, ListAlertsError, ListAlertsResponse, ListDebriefMessagesData, ListDebriefMessagesError, ListDebriefMessagesResponse, ListDebriefQuestionsData, ListDebriefQuestionsError, ListDebriefQuestionsResponse, ListDebriefSuggestionsData, ListDebriefSuggestionsError, ListDebriefSuggestionsResponse, ListEventAnnotationsData, ListEventAnnotationsError, ListEventAnnotationsResponse, ListEventsData, ListEventsError, ListEventsResponse, ListIncidentEventContributingFactorCategoriesData, ListIncidentEventContributingFactorCategoriesError, ListIncidentEventContributingFactorCategoriesResponse, ListIncidentEventsData, ListIncidentEventsError, ListIncidentEventsResponse, ListIncidentFieldsData, ListIncidentFieldsError, ListIncidentFieldsResponse, ListIncidentMilestonesData, ListIncidentRolesData, ListIncidentRolesError, ListIncidentRolesResponse, ListIncidentsData, ListIncidentsError, ListIncidentSeveritiesData, ListIncidentSeveritiesError, ListIncidentSeveritiesResponse, ListIncidentsResponse, ListIncidentTagsData, ListIncidentTagsError, ListIncidentTagsResponse, ListIncidentTypesData, ListIncidentTypesError, ListIncidentTypesResponse, ListIntegrationsData, ListIntegrationsError, ListIntegrationsResponse, ListMeetingSchedulesData, ListMeetingSchedulesError, ListMeetingSchedulesResponse, ListMeetingSessionsData, ListMeetingSessionsError, ListMeetingSessionsResponse, ListOncallRostersData, ListOncallRostersError, ListOncallRostersResponse, ListOncallShiftsData, ListOncallShiftsError, ListOncallShiftsResponse, ListPlaybooksData, ListPlaybooksError, ListPlaybooksResponse, ListRetrospectiveCommentsData, ListRetrospectiveCommentsError, ListRetrospectiveCommentsResponse, ListRetrospectiveReviewsData, ListRetrospectiveReviewsError, ListRetrospectiveReviewsResponse, ListRetrospectivesData, ListRetrospectivesError, ListRetrospectivesResponse, ListSystemAnalysisComponentsData, ListSystemAnalysisComponentsError, ListSystemAnalysisComponentsResponse, ListSystemAnalysisRelationshipsData, ListSystemAnalysisRelationshipsError, ListSystemAnalysisRelationshipsResponse, ListSystemComponentKindsData, ListSystemComponentKindsError, ListSystemComponentKindsResponse, ListSystemComponentRelationshipsData, ListSystemComponentRelationshipsError, ListSystemComponentRelationshipsResponse, ListSystemComponentsData, ListSystemComponentsError, ListSystemComponentsResponse, ListTasksData, ListTasksError, ListTasksResponse, ListTeamsData, ListTeamsError, ListTeamsResponse, ListUserNotificationsData, ListUserNotificationsError, ListUserNotificationsResponse, ListUsersData, ListUsersError, ListUsersResponse, ListWatchedOncallRostersData, RemoveWatchedOncallRosterData, RemoveWatchedOncallRosterError, RemoveWatchedOncallRosterResponse, RequestDocumentEditorSessionData, RequestDocumentEditorSessionError, RequestDocumentEditorSessionResponse, SendOncallShiftHandoverData, SendOncallShiftHandoverError, SendOncallShiftHandoverResponse, UpdateDebriefQuestionData, UpdateDebriefQuestionError, UpdateDebriefQuestionResponse, UpdateEventAnnotationData, UpdateEventAnnotationError, UpdateEventAnnotationResponse, UpdateIncidentData, UpdateIncidentDebriefData, UpdateIncidentDebriefError, UpdateIncidentDebriefResponse, UpdateIncidentError, UpdateIncidentEventData, UpdateIncidentEventError, UpdateIncidentEventResponse, UpdateIncidentFieldData, UpdateIncidentFieldError, UpdateIncidentFieldResponse, UpdateIncidentMilestoneData, UpdateIncidentMilestoneError, UpdateIncidentMilestoneResponse, UpdateIncidentResponse, UpdateIncidentRoleData, UpdateIncidentRoleError, UpdateIncidentRoleResponse, UpdateIncidentSeverityData, UpdateIncidentSeverityError, UpdateIncidentSeverityResponse, UpdateIncidentTagData, UpdateIncidentTagError, UpdateIncidentTagResponse, UpdateIncidentTypeData, UpdateIncidentTypeError, UpdateIncidentTypeResponse, UpdateIntegrationData, UpdateIntegrationError, UpdateIntegrationResponse, UpdateMeetingScheduleData, UpdateMeetingScheduleError, UpdateMeetingScheduleResponse, UpdateMeetingSessionData, UpdateMeetingSessionError, UpdateMeetingSessionResponse, UpdateOncallHandoverTemplateData, UpdateOncallHandoverTemplateError, UpdateOncallHandoverTemplateResponse, UpdateOncallShiftHandoverData, UpdateOncallShiftHandoverError, UpdateOncallShiftHandoverResponse, UpdatePlaybookData, UpdatePlaybookError, UpdatePlaybookResponse, UpdateRetrospectiveCommentData, UpdateRetrospectiveCommentError, UpdateRetrospectiveCommentResponse, UpdateRetrospectiveReviewData, UpdateRetrospectiveReviewError, UpdateRetrospectiveReviewResponse, UpdateSystemAnalysisComponentData, UpdateSystemAnalysisComponentError, UpdateSystemAnalysisComponentResponse, UpdateSystemAnalysisRelationshipData, UpdateSystemAnalysisRelationshipError, UpdateSystemAnalysisRelationshipResponse, UpdateSystemComponentConstraintData, UpdateSystemComponentConstraintError, UpdateSystemComponentConstraintResponse, UpdateSystemComponentControlData, UpdateSystemComponentControlError, UpdateSystemComponentControlResponse, UpdateSystemComponentData, UpdateSystemComponentError, UpdateSystemComponentKindData, UpdateSystemComponentKindError, UpdateSystemComponentKindResponse, UpdateSystemComponentRelationshipData, UpdateSystemComponentRelationshipError, UpdateSystemComponentRelationshipResponse, UpdateSystemComponentResponse, UpdateSystemComponentSignalData, UpdateSystemComponentSignalError, UpdateSystemComponentSignalResponse, UpdateTaskData, UpdateTaskError, UpdateTaskResponse, UpdateTeamsData, UpdateTeamsError, UpdateTeamsResponse } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const listAlertsQueryKey = (options?: Options<ListAlertsData>) => createQueryKey('listAlerts', options);

/**
 * List Alerts
 */
export const listAlertsOptions = (options?: Options<ListAlertsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listAlerts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAlertsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const listAlertsInfiniteQueryKey = (options?: Options<ListAlertsData>): QueryKey<Options<ListAlertsData>> => createQueryKey('listAlerts', options, true);

/**
 * List Alerts
 */
export const listAlertsInfiniteOptions = (options?: Options<ListAlertsData>) => {
    return infiniteQueryOptions<ListAlertsResponse, ListAlertsError, InfiniteData<ListAlertsResponse>, QueryKey<Options<ListAlertsData>>, number | Pick<QueryKey<Options<ListAlertsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListAlertsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listAlerts({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAlertsInfiniteQueryKey(options)
    });
};

export const getAlertQueryKey = (options: Options<GetAlertData>) => createQueryKey('getAlert', options);

/**
 * Get Alert
 */
export const getAlertOptions = (options: Options<GetAlertData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAlert({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAlertQueryKey(options)
    });
};

export const listAlertIncidentLinksQueryKey = (options: Options<ListAlertIncidentLinksData>) => createQueryKey('listAlertIncidentLinks', options);

/**
 * List Incident Links for an Alert
 */
export const listAlertIncidentLinksOptions = (options: Options<ListAlertIncidentLinksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listAlertIncidentLinks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAlertIncidentLinksQueryKey(options)
    });
};

export const listAlertIncidentLinksInfiniteQueryKey = (options: Options<ListAlertIncidentLinksData>): QueryKey<Options<ListAlertIncidentLinksData>> => createQueryKey('listAlertIncidentLinks', options, true);

/**
 * List Incident Links for an Alert
 */
export const listAlertIncidentLinksInfiniteOptions = (options: Options<ListAlertIncidentLinksData>) => {
    return infiniteQueryOptions<ListAlertIncidentLinksResponse, ListAlertIncidentLinksError, InfiniteData<ListAlertIncidentLinksResponse>, QueryKey<Options<ListAlertIncidentLinksData>>, number | Pick<QueryKey<Options<ListAlertIncidentLinksData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListAlertIncidentLinksData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listAlertIncidentLinks({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAlertIncidentLinksInfiniteQueryKey(options)
    });
};

export const getAlertMetricsQueryKey = (options: Options<GetAlertMetricsData>) => createQueryKey('getAlertMetrics', options);

/**
 * Get Alert Metrics
 */
export const getAlertMetricsOptions = (options: Options<GetAlertMetricsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAlertMetrics({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAlertMetricsQueryKey(options)
    });
};

export const getCurrentAuthSessionQueryKey = (options?: Options<GetCurrentAuthSessionData>) => createQueryKey('getCurrentAuthSession', options);

/**
 * Get the Auth Session for the Current User
 */
export const getCurrentAuthSessionOptions = (options?: Options<GetCurrentAuthSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCurrentAuthSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCurrentAuthSessionQueryKey(options)
    });
};

export const getAuthSessionConfigQueryKey = (options?: Options<GetAuthSessionConfigData>) => createQueryKey('getAuthSessionConfig', options);

/**
 * Get the Auth Session config
 */
export const getAuthSessionConfigOptions = (options?: Options<GetAuthSessionConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAuthSessionConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuthSessionConfigQueryKey(options)
    });
};

export const listUserNotificationsQueryKey = (options?: Options<ListUserNotificationsData>) => createQueryKey('listUserNotifications', options);

/**
 * List Notifications for the Current User
 */
export const listUserNotificationsOptions = (options?: Options<ListUserNotificationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listUserNotifications({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUserNotificationsQueryKey(options)
    });
};

export const listUserNotificationsInfiniteQueryKey = (options?: Options<ListUserNotificationsData>): QueryKey<Options<ListUserNotificationsData>> => createQueryKey('listUserNotifications', options, true);

/**
 * List Notifications for the Current User
 */
export const listUserNotificationsInfiniteOptions = (options?: Options<ListUserNotificationsData>) => {
    return infiniteQueryOptions<ListUserNotificationsResponse, ListUserNotificationsError, InfiniteData<ListUserNotificationsResponse>, QueryKey<Options<ListUserNotificationsData>>, number | Pick<QueryKey<Options<ListUserNotificationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListUserNotificationsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listUserNotifications({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUserNotificationsInfiniteQueryKey(options)
    });
};

export const listDebriefQuestionsQueryKey = (options?: Options<ListDebriefQuestionsData>) => createQueryKey('listDebriefQuestions', options);

/**
 * List Incident Debrief Questions
 */
export const listDebriefQuestionsOptions = (options?: Options<ListDebriefQuestionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listDebriefQuestions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDebriefQuestionsQueryKey(options)
    });
};

export const listDebriefQuestionsInfiniteQueryKey = (options?: Options<ListDebriefQuestionsData>): QueryKey<Options<ListDebriefQuestionsData>> => createQueryKey('listDebriefQuestions', options, true);

/**
 * List Incident Debrief Questions
 */
export const listDebriefQuestionsInfiniteOptions = (options?: Options<ListDebriefQuestionsData>) => {
    return infiniteQueryOptions<ListDebriefQuestionsResponse, ListDebriefQuestionsError, InfiniteData<ListDebriefQuestionsResponse>, QueryKey<Options<ListDebriefQuestionsData>>, number | Pick<QueryKey<Options<ListDebriefQuestionsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListDebriefQuestionsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listDebriefQuestions({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDebriefQuestionsInfiniteQueryKey(options)
    });
};

/**
 * Create an Incident Debrief Question
 */
export const createDebriefQuestionMutation = (options?: Partial<Options<CreateDebriefQuestionData>>): MutationOptions<CreateDebriefQuestionResponse, CreateDebriefQuestionError, Options<CreateDebriefQuestionData>> => {
    const mutationOptions: MutationOptions<CreateDebriefQuestionResponse, CreateDebriefQuestionError, Options<CreateDebriefQuestionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createDebriefQuestion({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive an Incident Debrief Question
 */
export const archiveDebriefQuestionMutation = (options?: Partial<Options<ArchiveDebriefQuestionData>>): MutationOptions<ArchiveDebriefQuestionResponse, ArchiveDebriefQuestionError, Options<ArchiveDebriefQuestionData>> => {
    const mutationOptions: MutationOptions<ArchiveDebriefQuestionResponse, ArchiveDebriefQuestionError, Options<ArchiveDebriefQuestionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveDebriefQuestion({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getDebriefQuestionQueryKey = (options: Options<GetDebriefQuestionData>) => createQueryKey('getDebriefQuestion', options);

/**
 * Get an Incident Debrief Question
 */
export const getDebriefQuestionOptions = (options: Options<GetDebriefQuestionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDebriefQuestion({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDebriefQuestionQueryKey(options)
    });
};

/**
 * Update an Incident Debrief Question
 */
export const updateDebriefQuestionMutation = (options?: Partial<Options<UpdateDebriefQuestionData>>): MutationOptions<UpdateDebriefQuestionResponse, UpdateDebriefQuestionError, Options<UpdateDebriefQuestionData>> => {
    const mutationOptions: MutationOptions<UpdateDebriefQuestionResponse, UpdateDebriefQuestionError, Options<UpdateDebriefQuestionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateDebriefQuestion({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Request a Document Editor Session
 */
export const requestDocumentEditorSessionMutation = (options?: Partial<Options<RequestDocumentEditorSessionData>>): MutationOptions<RequestDocumentEditorSessionResponse, RequestDocumentEditorSessionError, Options<RequestDocumentEditorSessionData>> => {
    const mutationOptions: MutationOptions<RequestDocumentEditorSessionResponse, RequestDocumentEditorSessionError, Options<RequestDocumentEditorSessionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await requestDocumentEditorSession({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listEventAnnotationsQueryKey = (options?: Options<ListEventAnnotationsData>) => createQueryKey('listEventAnnotations', options);

/**
 * List Event Annotations
 */
export const listEventAnnotationsOptions = (options?: Options<ListEventAnnotationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listEventAnnotations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listEventAnnotationsQueryKey(options)
    });
};

export const listEventAnnotationsInfiniteQueryKey = (options?: Options<ListEventAnnotationsData>): QueryKey<Options<ListEventAnnotationsData>> => createQueryKey('listEventAnnotations', options, true);

/**
 * List Event Annotations
 */
export const listEventAnnotationsInfiniteOptions = (options?: Options<ListEventAnnotationsData>) => {
    return infiniteQueryOptions<ListEventAnnotationsResponse, ListEventAnnotationsError, InfiniteData<ListEventAnnotationsResponse>, QueryKey<Options<ListEventAnnotationsData>>, number | Pick<QueryKey<Options<ListEventAnnotationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListEventAnnotationsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listEventAnnotations({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listEventAnnotationsInfiniteQueryKey(options)
    });
};

/**
 * Create an Event Annotation
 */
export const createEventAnnotationMutation = (options?: Partial<Options<CreateEventAnnotationData>>): MutationOptions<CreateEventAnnotationResponse, CreateEventAnnotationError, Options<CreateEventAnnotationData>> => {
    const mutationOptions: MutationOptions<CreateEventAnnotationResponse, CreateEventAnnotationError, Options<CreateEventAnnotationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createEventAnnotation({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete an Event Annotation
 */
export const deleteEventAnnotationMutation = (options?: Partial<Options<DeleteEventAnnotationData>>): MutationOptions<DeleteEventAnnotationResponse, DeleteEventAnnotationError, Options<DeleteEventAnnotationData>> => {
    const mutationOptions: MutationOptions<DeleteEventAnnotationResponse, DeleteEventAnnotationError, Options<DeleteEventAnnotationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteEventAnnotation({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update an Event Annotation
 */
export const updateEventAnnotationMutation = (options?: Partial<Options<UpdateEventAnnotationData>>): MutationOptions<UpdateEventAnnotationResponse, UpdateEventAnnotationError, Options<UpdateEventAnnotationData>> => {
    const mutationOptions: MutationOptions<UpdateEventAnnotationResponse, UpdateEventAnnotationError, Options<UpdateEventAnnotationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateEventAnnotation({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listEventsQueryKey = (options?: Options<ListEventsData>) => createQueryKey('listEvents', options);

/**
 * List Events
 */
export const listEventsOptions = (options?: Options<ListEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listEventsQueryKey(options)
    });
};

export const listEventsInfiniteQueryKey = (options?: Options<ListEventsData>): QueryKey<Options<ListEventsData>> => createQueryKey('listEvents', options, true);

/**
 * List Events
 */
export const listEventsInfiniteOptions = (options?: Options<ListEventsData>) => {
    return infiniteQueryOptions<ListEventsResponse, ListEventsError, InfiniteData<ListEventsResponse>, QueryKey<Options<ListEventsData>>, number | Pick<QueryKey<Options<ListEventsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListEventsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listEvents({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listEventsInfiniteQueryKey(options)
    });
};

export const getEventQueryKey = (options: Options<GetEventData>) => createQueryKey('getEvent', options);

/**
 * Get Event
 */
export const getEventOptions = (options: Options<GetEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEventQueryKey(options)
    });
};

export const getIncidentDebriefQueryKey = (options: Options<GetIncidentDebriefData>) => createQueryKey('getIncidentDebrief', options);

/**
 * Get Incident Debrief
 */
export const getIncidentDebriefOptions = (options: Options<GetIncidentDebriefData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIncidentDebrief({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIncidentDebriefQueryKey(options)
    });
};

/**
 * Update Incident Debrief
 */
export const updateIncidentDebriefMutation = (options?: Partial<Options<UpdateIncidentDebriefData>>): MutationOptions<UpdateIncidentDebriefResponse, UpdateIncidentDebriefError, Options<UpdateIncidentDebriefData>> => {
    const mutationOptions: MutationOptions<UpdateIncidentDebriefResponse, UpdateIncidentDebriefError, Options<UpdateIncidentDebriefData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateIncidentDebrief({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listDebriefMessagesQueryKey = (options: Options<ListDebriefMessagesData>) => createQueryKey('listDebriefMessages', options);

/**
 * List Incident Debrief Messages
 */
export const listDebriefMessagesOptions = (options: Options<ListDebriefMessagesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listDebriefMessages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDebriefMessagesQueryKey(options)
    });
};

export const listDebriefMessagesInfiniteQueryKey = (options: Options<ListDebriefMessagesData>): QueryKey<Options<ListDebriefMessagesData>> => createQueryKey('listDebriefMessages', options, true);

/**
 * List Incident Debrief Messages
 */
export const listDebriefMessagesInfiniteOptions = (options: Options<ListDebriefMessagesData>) => {
    return infiniteQueryOptions<ListDebriefMessagesResponse, ListDebriefMessagesError, InfiniteData<ListDebriefMessagesResponse>, QueryKey<Options<ListDebriefMessagesData>>, number | Pick<QueryKey<Options<ListDebriefMessagesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListDebriefMessagesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listDebriefMessages({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDebriefMessagesInfiniteQueryKey(options)
    });
};

/**
 * Add an Incident Debrief message
 */
export const addIncidentDebriefUserMessageMutation = (options?: Partial<Options<AddIncidentDebriefUserMessageData>>): MutationOptions<AddIncidentDebriefUserMessageResponse, AddIncidentDebriefUserMessageError, Options<AddIncidentDebriefUserMessageData>> => {
    const mutationOptions: MutationOptions<AddIncidentDebriefUserMessageResponse, AddIncidentDebriefUserMessageError, Options<AddIncidentDebriefUserMessageData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await addIncidentDebriefUserMessage({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listDebriefSuggestionsQueryKey = (options: Options<ListDebriefSuggestionsData>) => createQueryKey('listDebriefSuggestions', options);

/**
 * List Incident Debrief Suggestions
 */
export const listDebriefSuggestionsOptions = (options: Options<ListDebriefSuggestionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listDebriefSuggestions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDebriefSuggestionsQueryKey(options)
    });
};

export const listDebriefSuggestionsInfiniteQueryKey = (options: Options<ListDebriefSuggestionsData>): QueryKey<Options<ListDebriefSuggestionsData>> => createQueryKey('listDebriefSuggestions', options, true);

/**
 * List Incident Debrief Suggestions
 */
export const listDebriefSuggestionsInfiniteOptions = (options: Options<ListDebriefSuggestionsData>) => {
    return infiniteQueryOptions<ListDebriefSuggestionsResponse, ListDebriefSuggestionsError, InfiniteData<ListDebriefSuggestionsResponse>, QueryKey<Options<ListDebriefSuggestionsData>>, number | Pick<QueryKey<Options<ListDebriefSuggestionsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListDebriefSuggestionsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listDebriefSuggestions({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDebriefSuggestionsInfiniteQueryKey(options)
    });
};

export const listIncidentEventContributingFactorCategoriesQueryKey = (options?: Options<ListIncidentEventContributingFactorCategoriesData>) => createQueryKey('listIncidentEventContributingFactorCategories', options);

/**
 * List Categories of Contributing Factors used in Incident Events
 */
export const listIncidentEventContributingFactorCategoriesOptions = (options?: Options<ListIncidentEventContributingFactorCategoriesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listIncidentEventContributingFactorCategories({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentEventContributingFactorCategoriesQueryKey(options)
    });
};

export const listIncidentEventContributingFactorCategoriesInfiniteQueryKey = (options?: Options<ListIncidentEventContributingFactorCategoriesData>): QueryKey<Options<ListIncidentEventContributingFactorCategoriesData>> => createQueryKey('listIncidentEventContributingFactorCategories', options, true);

/**
 * List Categories of Contributing Factors used in Incident Events
 */
export const listIncidentEventContributingFactorCategoriesInfiniteOptions = (options?: Options<ListIncidentEventContributingFactorCategoriesData>) => {
    return infiniteQueryOptions<ListIncidentEventContributingFactorCategoriesResponse, ListIncidentEventContributingFactorCategoriesError, InfiniteData<ListIncidentEventContributingFactorCategoriesResponse>, QueryKey<Options<ListIncidentEventContributingFactorCategoriesData>>, number | Pick<QueryKey<Options<ListIncidentEventContributingFactorCategoriesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListIncidentEventContributingFactorCategoriesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listIncidentEventContributingFactorCategories({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentEventContributingFactorCategoriesInfiniteQueryKey(options)
    });
};

/**
 * Delete an Incident Event
 */
export const deleteIncidentEventMutation = (options?: Partial<Options<DeleteIncidentEventData>>): MutationOptions<DeleteIncidentEventResponse, DeleteIncidentEventError, Options<DeleteIncidentEventData>> => {
    const mutationOptions: MutationOptions<DeleteIncidentEventResponse, DeleteIncidentEventError, Options<DeleteIncidentEventData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteIncidentEvent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update an Incident Event
 */
export const updateIncidentEventMutation = (options?: Partial<Options<UpdateIncidentEventData>>): MutationOptions<UpdateIncidentEventResponse, UpdateIncidentEventError, Options<UpdateIncidentEventData>> => {
    const mutationOptions: MutationOptions<UpdateIncidentEventResponse, UpdateIncidentEventError, Options<UpdateIncidentEventData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateIncidentEvent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listIncidentFieldsQueryKey = (options?: Options<ListIncidentFieldsData>) => createQueryKey('listIncidentFields', options);

/**
 * List Incident Fields
 */
export const listIncidentFieldsOptions = (options?: Options<ListIncidentFieldsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listIncidentFields({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentFieldsQueryKey(options)
    });
};

export const listIncidentFieldsInfiniteQueryKey = (options?: Options<ListIncidentFieldsData>): QueryKey<Options<ListIncidentFieldsData>> => createQueryKey('listIncidentFields', options, true);

/**
 * List Incident Fields
 */
export const listIncidentFieldsInfiniteOptions = (options?: Options<ListIncidentFieldsData>) => {
    return infiniteQueryOptions<ListIncidentFieldsResponse, ListIncidentFieldsError, InfiniteData<ListIncidentFieldsResponse>, QueryKey<Options<ListIncidentFieldsData>>, number | Pick<QueryKey<Options<ListIncidentFieldsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListIncidentFieldsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listIncidentFields({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentFieldsInfiniteQueryKey(options)
    });
};

/**
 * Create an Incident Field
 */
export const createIncidentFieldMutation = (options?: Partial<Options<CreateIncidentFieldData>>): MutationOptions<CreateIncidentFieldResponse, CreateIncidentFieldError, Options<CreateIncidentFieldData>> => {
    const mutationOptions: MutationOptions<CreateIncidentFieldResponse, CreateIncidentFieldError, Options<CreateIncidentFieldData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIncidentField({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive an Incident Field
 */
export const archiveIncidentFieldMutation = (options?: Partial<Options<ArchiveIncidentFieldData>>): MutationOptions<ArchiveIncidentFieldResponse, ArchiveIncidentFieldError, Options<ArchiveIncidentFieldData>> => {
    const mutationOptions: MutationOptions<ArchiveIncidentFieldResponse, ArchiveIncidentFieldError, Options<ArchiveIncidentFieldData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveIncidentField({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getIncidentFieldQueryKey = (options: Options<GetIncidentFieldData>) => createQueryKey('getIncidentField', options);

/**
 * Get an Incident Field
 */
export const getIncidentFieldOptions = (options: Options<GetIncidentFieldData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIncidentField({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIncidentFieldQueryKey(options)
    });
};

/**
 * Update an Incident Field
 */
export const updateIncidentFieldMutation = (options?: Partial<Options<UpdateIncidentFieldData>>): MutationOptions<UpdateIncidentFieldResponse, UpdateIncidentFieldError, Options<UpdateIncidentFieldData>> => {
    const mutationOptions: MutationOptions<UpdateIncidentFieldResponse, UpdateIncidentFieldError, Options<UpdateIncidentFieldData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateIncidentField({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete an Incident Milestone
 */
export const deleteIncidentMilestoneMutation = (options?: Partial<Options<DeleteIncidentMilestoneData>>): MutationOptions<DeleteIncidentMilestoneResponse, DeleteIncidentMilestoneError, Options<DeleteIncidentMilestoneData>> => {
    const mutationOptions: MutationOptions<DeleteIncidentMilestoneResponse, DeleteIncidentMilestoneError, Options<DeleteIncidentMilestoneData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteIncidentMilestone({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update an Incident Milestone
 */
export const updateIncidentMilestoneMutation = (options?: Partial<Options<UpdateIncidentMilestoneData>>): MutationOptions<UpdateIncidentMilestoneResponse, UpdateIncidentMilestoneError, Options<UpdateIncidentMilestoneData>> => {
    const mutationOptions: MutationOptions<UpdateIncidentMilestoneResponse, UpdateIncidentMilestoneError, Options<UpdateIncidentMilestoneData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateIncidentMilestone({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listIncidentRolesQueryKey = (options?: Options<ListIncidentRolesData>) => createQueryKey('listIncidentRoles', options);

/**
 * List Incident Roles
 */
export const listIncidentRolesOptions = (options?: Options<ListIncidentRolesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listIncidentRoles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentRolesQueryKey(options)
    });
};

export const listIncidentRolesInfiniteQueryKey = (options?: Options<ListIncidentRolesData>): QueryKey<Options<ListIncidentRolesData>> => createQueryKey('listIncidentRoles', options, true);

/**
 * List Incident Roles
 */
export const listIncidentRolesInfiniteOptions = (options?: Options<ListIncidentRolesData>) => {
    return infiniteQueryOptions<ListIncidentRolesResponse, ListIncidentRolesError, InfiniteData<ListIncidentRolesResponse>, QueryKey<Options<ListIncidentRolesData>>, number | Pick<QueryKey<Options<ListIncidentRolesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListIncidentRolesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listIncidentRoles({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentRolesInfiniteQueryKey(options)
    });
};

/**
 * Create an Incident Role
 */
export const createIncidentRoleMutation = (options?: Partial<Options<CreateIncidentRoleData>>): MutationOptions<CreateIncidentRoleResponse, CreateIncidentRoleError, Options<CreateIncidentRoleData>> => {
    const mutationOptions: MutationOptions<CreateIncidentRoleResponse, CreateIncidentRoleError, Options<CreateIncidentRoleData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIncidentRole({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive an Incident Role
 */
export const archiveIncidentRoleMutation = (options?: Partial<Options<ArchiveIncidentRoleData>>): MutationOptions<ArchiveIncidentRoleResponse, ArchiveIncidentRoleError, Options<ArchiveIncidentRoleData>> => {
    const mutationOptions: MutationOptions<ArchiveIncidentRoleResponse, ArchiveIncidentRoleError, Options<ArchiveIncidentRoleData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveIncidentRole({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getIncidentRoleQueryKey = (options: Options<GetIncidentRoleData>) => createQueryKey('getIncidentRole', options);

/**
 * Get an Incident Role
 */
export const getIncidentRoleOptions = (options: Options<GetIncidentRoleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIncidentRole({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIncidentRoleQueryKey(options)
    });
};

/**
 * Update an Incident Role
 */
export const updateIncidentRoleMutation = (options?: Partial<Options<UpdateIncidentRoleData>>): MutationOptions<UpdateIncidentRoleResponse, UpdateIncidentRoleError, Options<UpdateIncidentRoleData>> => {
    const mutationOptions: MutationOptions<UpdateIncidentRoleResponse, UpdateIncidentRoleError, Options<UpdateIncidentRoleData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateIncidentRole({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listIncidentSeveritiesQueryKey = (options?: Options<ListIncidentSeveritiesData>) => createQueryKey('listIncidentSeverities', options);

/**
 * List Severities
 */
export const listIncidentSeveritiesOptions = (options?: Options<ListIncidentSeveritiesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listIncidentSeverities({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentSeveritiesQueryKey(options)
    });
};

export const listIncidentSeveritiesInfiniteQueryKey = (options?: Options<ListIncidentSeveritiesData>): QueryKey<Options<ListIncidentSeveritiesData>> => createQueryKey('listIncidentSeverities', options, true);

/**
 * List Severities
 */
export const listIncidentSeveritiesInfiniteOptions = (options?: Options<ListIncidentSeveritiesData>) => {
    return infiniteQueryOptions<ListIncidentSeveritiesResponse, ListIncidentSeveritiesError, InfiniteData<ListIncidentSeveritiesResponse>, QueryKey<Options<ListIncidentSeveritiesData>>, number | Pick<QueryKey<Options<ListIncidentSeveritiesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListIncidentSeveritiesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listIncidentSeverities({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentSeveritiesInfiniteQueryKey(options)
    });
};

/**
 * Create a Severity
 */
export const createIncidentSeverityMutation = (options?: Partial<Options<CreateIncidentSeverityData>>): MutationOptions<CreateIncidentSeverityResponse, CreateIncidentSeverityError, Options<CreateIncidentSeverityData>> => {
    const mutationOptions: MutationOptions<CreateIncidentSeverityResponse, CreateIncidentSeverityError, Options<CreateIncidentSeverityData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIncidentSeverity({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a Severity
 */
export const archiveIncidentSeverityMutation = (options?: Partial<Options<ArchiveIncidentSeverityData>>): MutationOptions<ArchiveIncidentSeverityResponse, ArchiveIncidentSeverityError, Options<ArchiveIncidentSeverityData>> => {
    const mutationOptions: MutationOptions<ArchiveIncidentSeverityResponse, ArchiveIncidentSeverityError, Options<ArchiveIncidentSeverityData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveIncidentSeverity({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getIncidentSeverityQueryKey = (options: Options<GetIncidentSeverityData>) => createQueryKey('getIncidentSeverity', options);

/**
 * Get a Severity
 */
export const getIncidentSeverityOptions = (options: Options<GetIncidentSeverityData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIncidentSeverity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIncidentSeverityQueryKey(options)
    });
};

/**
 * Update a Severity
 */
export const updateIncidentSeverityMutation = (options?: Partial<Options<UpdateIncidentSeverityData>>): MutationOptions<UpdateIncidentSeverityResponse, UpdateIncidentSeverityError, Options<UpdateIncidentSeverityData>> => {
    const mutationOptions: MutationOptions<UpdateIncidentSeverityResponse, UpdateIncidentSeverityError, Options<UpdateIncidentSeverityData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateIncidentSeverity({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listIncidentTagsQueryKey = (options?: Options<ListIncidentTagsData>) => createQueryKey('listIncidentTags', options);

/**
 * List Incident Tags
 */
export const listIncidentTagsOptions = (options?: Options<ListIncidentTagsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listIncidentTags({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentTagsQueryKey(options)
    });
};

export const listIncidentTagsInfiniteQueryKey = (options?: Options<ListIncidentTagsData>): QueryKey<Options<ListIncidentTagsData>> => createQueryKey('listIncidentTags', options, true);

/**
 * List Incident Tags
 */
export const listIncidentTagsInfiniteOptions = (options?: Options<ListIncidentTagsData>) => {
    return infiniteQueryOptions<ListIncidentTagsResponse, ListIncidentTagsError, InfiniteData<ListIncidentTagsResponse>, QueryKey<Options<ListIncidentTagsData>>, number | Pick<QueryKey<Options<ListIncidentTagsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListIncidentTagsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listIncidentTags({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentTagsInfiniteQueryKey(options)
    });
};

/**
 * Create an Incident Tag
 */
export const createIncidentTagMutation = (options?: Partial<Options<CreateIncidentTagData>>): MutationOptions<CreateIncidentTagResponse, CreateIncidentTagError, Options<CreateIncidentTagData>> => {
    const mutationOptions: MutationOptions<CreateIncidentTagResponse, CreateIncidentTagError, Options<CreateIncidentTagData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIncidentTag({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive an Incident Tag
 */
export const archiveIncidentTagMutation = (options?: Partial<Options<ArchiveIncidentTagData>>): MutationOptions<ArchiveIncidentTagResponse, ArchiveIncidentTagError, Options<ArchiveIncidentTagData>> => {
    const mutationOptions: MutationOptions<ArchiveIncidentTagResponse, ArchiveIncidentTagError, Options<ArchiveIncidentTagData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveIncidentTag({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getIncidentTagQueryKey = (options: Options<GetIncidentTagData>) => createQueryKey('getIncidentTag', options);

/**
 * Get an Incident Tag
 */
export const getIncidentTagOptions = (options: Options<GetIncidentTagData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIncidentTag({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIncidentTagQueryKey(options)
    });
};

/**
 * Update an Incident Tag
 */
export const updateIncidentTagMutation = (options?: Partial<Options<UpdateIncidentTagData>>): MutationOptions<UpdateIncidentTagResponse, UpdateIncidentTagError, Options<UpdateIncidentTagData>> => {
    const mutationOptions: MutationOptions<UpdateIncidentTagResponse, UpdateIncidentTagError, Options<UpdateIncidentTagData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateIncidentTag({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listIncidentTypesQueryKey = (options?: Options<ListIncidentTypesData>) => createQueryKey('listIncidentTypes', options);

/**
 * List Types
 */
export const listIncidentTypesOptions = (options?: Options<ListIncidentTypesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listIncidentTypes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentTypesQueryKey(options)
    });
};

export const listIncidentTypesInfiniteQueryKey = (options?: Options<ListIncidentTypesData>): QueryKey<Options<ListIncidentTypesData>> => createQueryKey('listIncidentTypes', options, true);

/**
 * List Types
 */
export const listIncidentTypesInfiniteOptions = (options?: Options<ListIncidentTypesData>) => {
    return infiniteQueryOptions<ListIncidentTypesResponse, ListIncidentTypesError, InfiniteData<ListIncidentTypesResponse>, QueryKey<Options<ListIncidentTypesData>>, number | Pick<QueryKey<Options<ListIncidentTypesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListIncidentTypesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listIncidentTypes({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentTypesInfiniteQueryKey(options)
    });
};

/**
 * Create an Incident Type
 */
export const createIncidentTypeMutation = (options?: Partial<Options<CreateIncidentTypeData>>): MutationOptions<CreateIncidentTypeResponse, CreateIncidentTypeError, Options<CreateIncidentTypeData>> => {
    const mutationOptions: MutationOptions<CreateIncidentTypeResponse, CreateIncidentTypeError, Options<CreateIncidentTypeData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIncidentType({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive an Incident Type
 */
export const archiveIncidentTypeMutation = (options?: Partial<Options<ArchiveIncidentTypeData>>): MutationOptions<ArchiveIncidentTypeResponse, ArchiveIncidentTypeError, Options<ArchiveIncidentTypeData>> => {
    const mutationOptions: MutationOptions<ArchiveIncidentTypeResponse, ArchiveIncidentTypeError, Options<ArchiveIncidentTypeData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveIncidentType({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getIncidentTypeQueryKey = (options: Options<GetIncidentTypeData>) => createQueryKey('getIncidentType', options);

/**
 * Get a Severity
 */
export const getIncidentTypeOptions = (options: Options<GetIncidentTypeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIncidentType({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIncidentTypeQueryKey(options)
    });
};

/**
 * Update an Incident Type
 */
export const updateIncidentTypeMutation = (options?: Partial<Options<UpdateIncidentTypeData>>): MutationOptions<UpdateIncidentTypeResponse, UpdateIncidentTypeError, Options<UpdateIncidentTypeData>> => {
    const mutationOptions: MutationOptions<UpdateIncidentTypeResponse, UpdateIncidentTypeError, Options<UpdateIncidentTypeData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateIncidentType({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listIncidentsQueryKey = (options?: Options<ListIncidentsData>) => createQueryKey('listIncidents', options);

/**
 * List Incidents
 */
export const listIncidentsOptions = (options?: Options<ListIncidentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listIncidents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentsQueryKey(options)
    });
};

export const listIncidentsInfiniteQueryKey = (options?: Options<ListIncidentsData>): QueryKey<Options<ListIncidentsData>> => createQueryKey('listIncidents', options, true);

/**
 * List Incidents
 */
export const listIncidentsInfiniteOptions = (options?: Options<ListIncidentsData>) => {
    return infiniteQueryOptions<ListIncidentsResponse, ListIncidentsError, InfiniteData<ListIncidentsResponse>, QueryKey<Options<ListIncidentsData>>, number | Pick<QueryKey<Options<ListIncidentsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListIncidentsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listIncidents({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentsInfiniteQueryKey(options)
    });
};

/**
 * Create an Incident
 */
export const createIncidentMutation = (options?: Partial<Options<CreateIncidentData>>): MutationOptions<CreateIncidentResponse, CreateIncidentError, Options<CreateIncidentData>> => {
    const mutationOptions: MutationOptions<CreateIncidentResponse, CreateIncidentError, Options<CreateIncidentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIncident({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive an Incident
 */
export const archiveIncidentMutation = (options?: Partial<Options<ArchiveIncidentData>>): MutationOptions<ArchiveIncidentResponse, ArchiveIncidentError, Options<ArchiveIncidentData>> => {
    const mutationOptions: MutationOptions<ArchiveIncidentResponse, ArchiveIncidentError, Options<ArchiveIncidentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveIncident({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getIncidentQueryKey = (options: Options<GetIncidentData>) => createQueryKey('getIncident', options);

/**
 * Get Incident
 */
export const getIncidentOptions = (options: Options<GetIncidentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIncident({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIncidentQueryKey(options)
    });
};

/**
 * Update an Incident
 */
export const updateIncidentMutation = (options?: Partial<Options<UpdateIncidentData>>): MutationOptions<UpdateIncidentResponse, UpdateIncidentError, Options<UpdateIncidentData>> => {
    const mutationOptions: MutationOptions<UpdateIncidentResponse, UpdateIncidentError, Options<UpdateIncidentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateIncident({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getIncidentUserDebriefQueryKey = (options: Options<GetIncidentUserDebriefData>) => createQueryKey('getIncidentUserDebrief', options);

/**
 * Get Debrief For Incident
 */
export const getIncidentUserDebriefOptions = (options: Options<GetIncidentUserDebriefData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIncidentUserDebrief({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIncidentUserDebriefQueryKey(options)
    });
};

export const listIncidentEventsQueryKey = (options: Options<ListIncidentEventsData>) => createQueryKey('listIncidentEvents', options);

/**
 * List Events for Incident
 */
export const listIncidentEventsOptions = (options: Options<ListIncidentEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listIncidentEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentEventsQueryKey(options)
    });
};

export const listIncidentEventsInfiniteQueryKey = (options: Options<ListIncidentEventsData>): QueryKey<Options<ListIncidentEventsData>> => createQueryKey('listIncidentEvents', options, true);

/**
 * List Events for Incident
 */
export const listIncidentEventsInfiniteOptions = (options: Options<ListIncidentEventsData>) => {
    return infiniteQueryOptions<ListIncidentEventsResponse, ListIncidentEventsError, InfiniteData<ListIncidentEventsResponse>, QueryKey<Options<ListIncidentEventsData>>, number | Pick<QueryKey<Options<ListIncidentEventsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListIncidentEventsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listIncidentEvents({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentEventsInfiniteQueryKey(options)
    });
};

/**
 * Create an Incident Event
 */
export const createIncidentEventMutation = (options?: Partial<Options<CreateIncidentEventData>>): MutationOptions<CreateIncidentEventResponse, CreateIncidentEventError, Options<CreateIncidentEventData>> => {
    const mutationOptions: MutationOptions<CreateIncidentEventResponse, CreateIncidentEventError, Options<CreateIncidentEventData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIncidentEvent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listIncidentMilestonesQueryKey = (options: Options<ListIncidentMilestonesData>) => createQueryKey('listIncidentMilestones', options);

/**
 * List Milestones for Incident
 */
export const listIncidentMilestonesOptions = (options: Options<ListIncidentMilestonesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listIncidentMilestones({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIncidentMilestonesQueryKey(options)
    });
};

/**
 * Create an Incident Milestone
 */
export const createIncidentMilestoneMutation = (options?: Partial<Options<CreateIncidentMilestoneData>>): MutationOptions<CreateIncidentMilestoneResponse, CreateIncidentMilestoneError, Options<CreateIncidentMilestoneData>> => {
    const mutationOptions: MutationOptions<CreateIncidentMilestoneResponse, CreateIncidentMilestoneError, Options<CreateIncidentMilestoneData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIncidentMilestone({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRetrospectiveForIncidentQueryKey = (options: Options<GetRetrospectiveForIncidentData>) => createQueryKey('getRetrospectiveForIncident', options);

/**
 * Get a Retrospective for an Incident
 */
export const getRetrospectiveForIncidentOptions = (options: Options<GetRetrospectiveForIncidentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRetrospectiveForIncident({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRetrospectiveForIncidentQueryKey(options)
    });
};

export const listIntegrationsQueryKey = (options?: Options<ListIntegrationsData>) => createQueryKey('listIntegrations', options);

/**
 * List Integrations
 */
export const listIntegrationsOptions = (options?: Options<ListIntegrationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listIntegrations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIntegrationsQueryKey(options)
    });
};

export const listIntegrationsInfiniteQueryKey = (options?: Options<ListIntegrationsData>): QueryKey<Options<ListIntegrationsData>> => createQueryKey('listIntegrations', options, true);

/**
 * List Integrations
 */
export const listIntegrationsInfiniteOptions = (options?: Options<ListIntegrationsData>) => {
    return infiniteQueryOptions<ListIntegrationsResponse, ListIntegrationsError, InfiniteData<ListIntegrationsResponse>, QueryKey<Options<ListIntegrationsData>>, number | Pick<QueryKey<Options<ListIntegrationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListIntegrationsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listIntegrations({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listIntegrationsInfiniteQueryKey(options)
    });
};

/**
 * Create an Integration
 */
export const createIntegrationMutation = (options?: Partial<Options<CreateIntegrationData>>): MutationOptions<CreateIntegrationResponse, CreateIntegrationError, Options<CreateIntegrationData>> => {
    const mutationOptions: MutationOptions<CreateIntegrationResponse, CreateIntegrationError, Options<CreateIntegrationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIntegration({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete an Integration
 */
export const deleteIntegrationMutation = (options?: Partial<Options<DeleteIntegrationData>>): MutationOptions<DeleteIntegrationResponse, DeleteIntegrationError, Options<DeleteIntegrationData>> => {
    const mutationOptions: MutationOptions<DeleteIntegrationResponse, DeleteIntegrationError, Options<DeleteIntegrationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteIntegration({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getIntegrationQueryKey = (options: Options<GetIntegrationData>) => createQueryKey('getIntegration', options);

/**
 * Get an Integration
 */
export const getIntegrationOptions = (options: Options<GetIntegrationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIntegration({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIntegrationQueryKey(options)
    });
};

/**
 * Update an Integration
 */
export const updateIntegrationMutation = (options?: Partial<Options<UpdateIntegrationData>>): MutationOptions<UpdateIntegrationResponse, UpdateIntegrationError, Options<UpdateIntegrationData>> => {
    const mutationOptions: MutationOptions<UpdateIntegrationResponse, UpdateIntegrationError, Options<UpdateIntegrationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateIntegration({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listMeetingSchedulesQueryKey = (options?: Options<ListMeetingSchedulesData>) => createQueryKey('listMeetingSchedules', options);

/**
 * List Meeting Schedules
 */
export const listMeetingSchedulesOptions = (options?: Options<ListMeetingSchedulesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listMeetingSchedules({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listMeetingSchedulesQueryKey(options)
    });
};

export const listMeetingSchedulesInfiniteQueryKey = (options?: Options<ListMeetingSchedulesData>): QueryKey<Options<ListMeetingSchedulesData>> => createQueryKey('listMeetingSchedules', options, true);

/**
 * List Meeting Schedules
 */
export const listMeetingSchedulesInfiniteOptions = (options?: Options<ListMeetingSchedulesData>) => {
    return infiniteQueryOptions<ListMeetingSchedulesResponse, ListMeetingSchedulesError, InfiniteData<ListMeetingSchedulesResponse>, QueryKey<Options<ListMeetingSchedulesData>>, number | Pick<QueryKey<Options<ListMeetingSchedulesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListMeetingSchedulesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listMeetingSchedules({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listMeetingSchedulesInfiniteQueryKey(options)
    });
};

/**
 * Create a Meeting Schedule
 */
export const createMeetingScheduleMutation = (options?: Partial<Options<CreateMeetingScheduleData>>): MutationOptions<CreateMeetingScheduleResponse, CreateMeetingScheduleError, Options<CreateMeetingScheduleData>> => {
    const mutationOptions: MutationOptions<CreateMeetingScheduleResponse, CreateMeetingScheduleError, Options<CreateMeetingScheduleData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createMeetingSchedule({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a Meeting Schedule
 */
export const archiveMeetingScheduleMutation = (options?: Partial<Options<ArchiveMeetingScheduleData>>): MutationOptions<ArchiveMeetingScheduleResponse, ArchiveMeetingScheduleError, Options<ArchiveMeetingScheduleData>> => {
    const mutationOptions: MutationOptions<ArchiveMeetingScheduleResponse, ArchiveMeetingScheduleError, Options<ArchiveMeetingScheduleData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveMeetingSchedule({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMeetingScheduleQueryKey = (options: Options<GetMeetingScheduleData>) => createQueryKey('getMeetingSchedule', options);

/**
 * Get a Meeting Schedule
 */
export const getMeetingScheduleOptions = (options: Options<GetMeetingScheduleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMeetingSchedule({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMeetingScheduleQueryKey(options)
    });
};

/**
 * Update a Meeting Schedule
 */
export const updateMeetingScheduleMutation = (options?: Partial<Options<UpdateMeetingScheduleData>>): MutationOptions<UpdateMeetingScheduleResponse, UpdateMeetingScheduleError, Options<UpdateMeetingScheduleData>> => {
    const mutationOptions: MutationOptions<UpdateMeetingScheduleResponse, UpdateMeetingScheduleError, Options<UpdateMeetingScheduleData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateMeetingSchedule({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listMeetingSessionsQueryKey = (options?: Options<ListMeetingSessionsData>) => createQueryKey('listMeetingSessions', options);

/**
 * List Sessions
 */
export const listMeetingSessionsOptions = (options?: Options<ListMeetingSessionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listMeetingSessions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listMeetingSessionsQueryKey(options)
    });
};

export const listMeetingSessionsInfiniteQueryKey = (options?: Options<ListMeetingSessionsData>): QueryKey<Options<ListMeetingSessionsData>> => createQueryKey('listMeetingSessions', options, true);

/**
 * List Sessions
 */
export const listMeetingSessionsInfiniteOptions = (options?: Options<ListMeetingSessionsData>) => {
    return infiniteQueryOptions<ListMeetingSessionsResponse, ListMeetingSessionsError, InfiniteData<ListMeetingSessionsResponse>, QueryKey<Options<ListMeetingSessionsData>>, number | Pick<QueryKey<Options<ListMeetingSessionsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListMeetingSessionsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listMeetingSessions({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listMeetingSessionsInfiniteQueryKey(options)
    });
};

/**
 * Create a Meeting Session
 */
export const createMeetingSessionMutation = (options?: Partial<Options<CreateMeetingSessionData>>): MutationOptions<CreateMeetingSessionResponse, CreateMeetingSessionError, Options<CreateMeetingSessionData>> => {
    const mutationOptions: MutationOptions<CreateMeetingSessionResponse, CreateMeetingSessionError, Options<CreateMeetingSessionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createMeetingSession({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a Meeting Session
 */
export const archiveMeetingSessionMutation = (options?: Partial<Options<ArchiveMeetingSessionData>>): MutationOptions<ArchiveMeetingSessionResponse, ArchiveMeetingSessionError, Options<ArchiveMeetingSessionData>> => {
    const mutationOptions: MutationOptions<ArchiveMeetingSessionResponse, ArchiveMeetingSessionError, Options<ArchiveMeetingSessionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveMeetingSession({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMeetingSessionQueryKey = (options: Options<GetMeetingSessionData>) => createQueryKey('getMeetingSession', options);

/**
 * Get a Meeting Session
 */
export const getMeetingSessionOptions = (options: Options<GetMeetingSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMeetingSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMeetingSessionQueryKey(options)
    });
};

/**
 * Update a Meeting Session
 */
export const updateMeetingSessionMutation = (options?: Partial<Options<UpdateMeetingSessionData>>): MutationOptions<UpdateMeetingSessionResponse, UpdateMeetingSessionError, Options<UpdateMeetingSessionData>> => {
    const mutationOptions: MutationOptions<UpdateMeetingSessionResponse, UpdateMeetingSessionError, Options<UpdateMeetingSessionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateMeetingSession({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create an Oncall Handover Template
 */
export const createOncallHandoverTemplateMutation = (options?: Partial<Options<CreateOncallHandoverTemplateData>>): MutationOptions<CreateOncallHandoverTemplateResponse, CreateOncallHandoverTemplateError, Options<CreateOncallHandoverTemplateData>> => {
    const mutationOptions: MutationOptions<CreateOncallHandoverTemplateResponse, CreateOncallHandoverTemplateError, Options<CreateOncallHandoverTemplateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createOncallHandoverTemplate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive an Oncall Handover Template
 */
export const archiveOncallHandoverTemplateMutation = (options?: Partial<Options<ArchiveOncallHandoverTemplateData>>): MutationOptions<ArchiveOncallHandoverTemplateResponse, ArchiveOncallHandoverTemplateError, Options<ArchiveOncallHandoverTemplateData>> => {
    const mutationOptions: MutationOptions<ArchiveOncallHandoverTemplateResponse, ArchiveOncallHandoverTemplateError, Options<ArchiveOncallHandoverTemplateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveOncallHandoverTemplate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOncallShiftHandoverTemplateQueryKey = (options: Options<GetOncallShiftHandoverTemplateData>) => createQueryKey('getOncallShiftHandoverTemplate', options);

/**
 * Get handover for a shift
 */
export const getOncallShiftHandoverTemplateOptions = (options: Options<GetOncallShiftHandoverTemplateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOncallShiftHandoverTemplate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOncallShiftHandoverTemplateQueryKey(options)
    });
};

/**
 * Update an Oncall Handover Template
 */
export const updateOncallHandoverTemplateMutation = (options?: Partial<Options<UpdateOncallHandoverTemplateData>>): MutationOptions<UpdateOncallHandoverTemplateResponse, UpdateOncallHandoverTemplateError, Options<UpdateOncallHandoverTemplateData>> => {
    const mutationOptions: MutationOptions<UpdateOncallHandoverTemplateResponse, UpdateOncallHandoverTemplateError, Options<UpdateOncallHandoverTemplateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateOncallHandoverTemplate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update an Oncall Shift Handover
 */
export const updateOncallShiftHandoverMutation = (options?: Partial<Options<UpdateOncallShiftHandoverData>>): MutationOptions<UpdateOncallShiftHandoverResponse, UpdateOncallShiftHandoverError, Options<UpdateOncallShiftHandoverData>> => {
    const mutationOptions: MutationOptions<UpdateOncallShiftHandoverResponse, UpdateOncallShiftHandoverError, Options<UpdateOncallShiftHandoverData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateOncallShiftHandover({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Send a Shift Handover
 */
export const sendOncallShiftHandoverMutation = (options?: Partial<Options<SendOncallShiftHandoverData>>): MutationOptions<SendOncallShiftHandoverResponse, SendOncallShiftHandoverError, Options<SendOncallShiftHandoverData>> => {
    const mutationOptions: MutationOptions<SendOncallShiftHandoverResponse, SendOncallShiftHandoverError, Options<SendOncallShiftHandoverData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await sendOncallShiftHandover({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listOncallRostersQueryKey = (options?: Options<ListOncallRostersData>) => createQueryKey('listOncallRosters', options);

/**
 * List Oncall Rosters
 */
export const listOncallRostersOptions = (options?: Options<ListOncallRostersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listOncallRosters({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOncallRostersQueryKey(options)
    });
};

export const listOncallRostersInfiniteQueryKey = (options?: Options<ListOncallRostersData>): QueryKey<Options<ListOncallRostersData>> => createQueryKey('listOncallRosters', options, true);

/**
 * List Oncall Rosters
 */
export const listOncallRostersInfiniteOptions = (options?: Options<ListOncallRostersData>) => {
    return infiniteQueryOptions<ListOncallRostersResponse, ListOncallRostersError, InfiniteData<ListOncallRostersResponse>, QueryKey<Options<ListOncallRostersData>>, number | Pick<QueryKey<Options<ListOncallRostersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListOncallRostersData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listOncallRosters({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOncallRostersInfiniteQueryKey(options)
    });
};

export const getOncallRosterQueryKey = (options: Options<GetOncallRosterData>) => createQueryKey('getOncallRoster', options);

/**
 * Get oncall roster
 */
export const getOncallRosterOptions = (options: Options<GetOncallRosterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOncallRoster({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOncallRosterQueryKey(options)
    });
};

export const listOncallShiftsQueryKey = (options?: Options<ListOncallShiftsData>) => createQueryKey('listOncallShifts', options);

/**
 * List Oncall Shifts
 */
export const listOncallShiftsOptions = (options?: Options<ListOncallShiftsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listOncallShifts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOncallShiftsQueryKey(options)
    });
};

export const listOncallShiftsInfiniteQueryKey = (options?: Options<ListOncallShiftsData>): QueryKey<Options<ListOncallShiftsData>> => createQueryKey('listOncallShifts', options, true);

/**
 * List Oncall Shifts
 */
export const listOncallShiftsInfiniteOptions = (options?: Options<ListOncallShiftsData>) => {
    return infiniteQueryOptions<ListOncallShiftsResponse, ListOncallShiftsError, InfiniteData<ListOncallShiftsResponse>, QueryKey<Options<ListOncallShiftsData>>, number | Pick<QueryKey<Options<ListOncallShiftsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListOncallShiftsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listOncallShifts({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOncallShiftsInfiniteQueryKey(options)
    });
};

export const getOncallShiftQueryKey = (options: Options<GetOncallShiftData>) => createQueryKey('getOncallShift', options);

/**
 * Get an Oncall Shift
 */
export const getOncallShiftOptions = (options: Options<GetOncallShiftData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOncallShift({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOncallShiftQueryKey(options)
    });
};

export const getAdjacentOncallShiftsQueryKey = (options: Options<GetAdjacentOncallShiftsData>) => createQueryKey('getAdjacentOncallShifts', options);

/**
 * Get shifts adjacent to a given shift
 */
export const getAdjacentOncallShiftsOptions = (options: Options<GetAdjacentOncallShiftsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdjacentOncallShifts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdjacentOncallShiftsQueryKey(options)
    });
};

export const getOncallShiftHandoverQueryKey = (options: Options<GetOncallShiftHandoverData>) => createQueryKey('getOncallShiftHandover', options);

/**
 * Get handover for a shift
 */
export const getOncallShiftHandoverOptions = (options: Options<GetOncallShiftHandoverData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOncallShiftHandover({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOncallShiftHandoverQueryKey(options)
    });
};

export const getUserOncallInformationQueryKey = (options: Options<GetUserOncallInformationData>) => createQueryKey('getUserOncallInformation', options);

/**
 * Get oncall information for a user
 */
export const getUserOncallInformationOptions = (options: Options<GetUserOncallInformationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserOncallInformation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserOncallInformationQueryKey(options)
    });
};

export const listWatchedOncallRostersQueryKey = (options?: Options<ListWatchedOncallRostersData>) => createQueryKey('listWatchedOncallRosters', options);

/**
 * List watched oncall rosters
 */
export const listWatchedOncallRostersOptions = (options?: Options<ListWatchedOncallRostersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listWatchedOncallRosters({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listWatchedOncallRostersQueryKey(options)
    });
};

/**
 * Remove a watched oncall roster
 */
export const removeWatchedOncallRosterMutation = (options?: Partial<Options<RemoveWatchedOncallRosterData>>): MutationOptions<RemoveWatchedOncallRosterResponse, RemoveWatchedOncallRosterError, Options<RemoveWatchedOncallRosterData>> => {
    const mutationOptions: MutationOptions<RemoveWatchedOncallRosterResponse, RemoveWatchedOncallRosterError, Options<RemoveWatchedOncallRosterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await removeWatchedOncallRoster({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Add a watched oncall roster
 */
export const addWatchedOncallRosterMutation = (options?: Partial<Options<AddWatchedOncallRosterData>>): MutationOptions<AddWatchedOncallRosterResponse, AddWatchedOncallRosterError, Options<AddWatchedOncallRosterData>> => {
    const mutationOptions: MutationOptions<AddWatchedOncallRosterResponse, AddWatchedOncallRosterError, Options<AddWatchedOncallRosterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await addWatchedOncallRoster({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOncallShiftBurdenMetricWeightsQueryKey = (options?: Options<GetOncallShiftBurdenMetricWeightsData>) => createQueryKey('getOncallShiftBurdenMetricWeights', options);

/**
 * Get Weights for Calculating Burden
 */
export const getOncallShiftBurdenMetricWeightsOptions = (options?: Options<GetOncallShiftBurdenMetricWeightsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOncallShiftBurdenMetricWeights({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOncallShiftBurdenMetricWeightsQueryKey(options)
    });
};

export const getOncallRosterMetricsQueryKey = (options?: Options<GetOncallRosterMetricsData>) => createQueryKey('getOncallRosterMetrics', options);

/**
 * Get Metrics for an Oncall Roster
 */
export const getOncallRosterMetricsOptions = (options?: Options<GetOncallRosterMetricsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOncallRosterMetrics({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOncallRosterMetricsQueryKey(options)
    });
};

export const getOncallShiftMetricsQueryKey = (options?: Options<GetOncallShiftMetricsData>) => createQueryKey('getOncallShiftMetrics', options);

/**
 * Get Metrics for an Oncall Shift
 */
export const getOncallShiftMetricsOptions = (options?: Options<GetOncallShiftMetricsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOncallShiftMetrics({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOncallShiftMetricsQueryKey(options)
    });
};

/**
 * Finish initial org setup
 */
export const finishOrganizationSetupMutation = (options?: Partial<Options<FinishOrganizationSetupData>>): MutationOptions<FinishOrganizationSetupResponse, FinishOrganizationSetupError, Options<FinishOrganizationSetupData>> => {
    const mutationOptions: MutationOptions<FinishOrganizationSetupResponse, FinishOrganizationSetupError, Options<FinishOrganizationSetupData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await finishOrganizationSetup({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listPlaybooksQueryKey = (options?: Options<ListPlaybooksData>) => createQueryKey('listPlaybooks', options);

/**
 * List Playbooks
 */
export const listPlaybooksOptions = (options?: Options<ListPlaybooksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listPlaybooks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listPlaybooksQueryKey(options)
    });
};

export const listPlaybooksInfiniteQueryKey = (options?: Options<ListPlaybooksData>): QueryKey<Options<ListPlaybooksData>> => createQueryKey('listPlaybooks', options, true);

/**
 * List Playbooks
 */
export const listPlaybooksInfiniteOptions = (options?: Options<ListPlaybooksData>) => {
    return infiniteQueryOptions<ListPlaybooksResponse, ListPlaybooksError, InfiniteData<ListPlaybooksResponse>, QueryKey<Options<ListPlaybooksData>>, number | Pick<QueryKey<Options<ListPlaybooksData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListPlaybooksData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listPlaybooks({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listPlaybooksInfiniteQueryKey(options)
    });
};

/**
 * Create a Playbook
 */
export const createPlaybookMutation = (options?: Partial<Options<CreatePlaybookData>>): MutationOptions<CreatePlaybookResponse, CreatePlaybookError, Options<CreatePlaybookData>> => {
    const mutationOptions: MutationOptions<CreatePlaybookResponse, CreatePlaybookError, Options<CreatePlaybookData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createPlaybook({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a Playbook
 */
export const archivePlaybookMutation = (options?: Partial<Options<ArchivePlaybookData>>): MutationOptions<ArchivePlaybookResponse, ArchivePlaybookError, Options<ArchivePlaybookData>> => {
    const mutationOptions: MutationOptions<ArchivePlaybookResponse, ArchivePlaybookError, Options<ArchivePlaybookData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archivePlaybook({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPlaybookQueryKey = (options: Options<GetPlaybookData>) => createQueryKey('getPlaybook', options);

/**
 * Get Playbook
 */
export const getPlaybookOptions = (options: Options<GetPlaybookData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPlaybook({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPlaybookQueryKey(options)
    });
};

/**
 * Update a Playbook
 */
export const updatePlaybookMutation = (options?: Partial<Options<UpdatePlaybookData>>): MutationOptions<UpdatePlaybookResponse, UpdatePlaybookError, Options<UpdatePlaybookData>> => {
    const mutationOptions: MutationOptions<UpdatePlaybookResponse, UpdatePlaybookError, Options<UpdatePlaybookData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updatePlaybook({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRetrospectiveCommentQueryKey = (options: Options<GetRetrospectiveCommentData>) => createQueryKey('getRetrospectiveComment', options);

/**
 * Get a Retrospective Comment
 */
export const getRetrospectiveCommentOptions = (options: Options<GetRetrospectiveCommentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRetrospectiveComment({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRetrospectiveCommentQueryKey(options)
    });
};

export const getRetrospectiveCommentInfiniteQueryKey = (options: Options<GetRetrospectiveCommentData>): QueryKey<Options<GetRetrospectiveCommentData>> => createQueryKey('getRetrospectiveComment', options, true);

/**
 * Get a Retrospective Comment
 */
export const getRetrospectiveCommentInfiniteOptions = (options: Options<GetRetrospectiveCommentData>) => {
    return infiniteQueryOptions<GetRetrospectiveCommentResponse, GetRetrospectiveCommentError, InfiniteData<GetRetrospectiveCommentResponse>, QueryKey<Options<GetRetrospectiveCommentData>>, number | Pick<QueryKey<Options<GetRetrospectiveCommentData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetRetrospectiveCommentData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getRetrospectiveComment({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRetrospectiveCommentInfiniteQueryKey(options)
    });
};

/**
 * Update a Retrospective Comment
 */
export const updateRetrospectiveCommentMutation = (options?: Partial<Options<UpdateRetrospectiveCommentData>>): MutationOptions<UpdateRetrospectiveCommentResponse, UpdateRetrospectiveCommentError, Options<UpdateRetrospectiveCommentData>> => {
    const mutationOptions: MutationOptions<UpdateRetrospectiveCommentResponse, UpdateRetrospectiveCommentError, Options<UpdateRetrospectiveCommentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateRetrospectiveComment({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a Retrospective Review
 */
export const archiveRetrospectiveReviewMutation = (options?: Partial<Options<ArchiveRetrospectiveReviewData>>): MutationOptions<ArchiveRetrospectiveReviewResponse, ArchiveRetrospectiveReviewError, Options<ArchiveRetrospectiveReviewData>> => {
    const mutationOptions: MutationOptions<ArchiveRetrospectiveReviewResponse, ArchiveRetrospectiveReviewError, Options<ArchiveRetrospectiveReviewData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveRetrospectiveReview({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update a Retrospective Review
 */
export const updateRetrospectiveReviewMutation = (options?: Partial<Options<UpdateRetrospectiveReviewData>>): MutationOptions<UpdateRetrospectiveReviewResponse, UpdateRetrospectiveReviewError, Options<UpdateRetrospectiveReviewData>> => {
    const mutationOptions: MutationOptions<UpdateRetrospectiveReviewResponse, UpdateRetrospectiveReviewError, Options<UpdateRetrospectiveReviewData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateRetrospectiveReview({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listRetrospectivesQueryKey = (options?: Options<ListRetrospectivesData>) => createQueryKey('listRetrospectives', options);

/**
 * List Retrospectives
 */
export const listRetrospectivesOptions = (options?: Options<ListRetrospectivesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listRetrospectives({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRetrospectivesQueryKey(options)
    });
};

export const listRetrospectivesInfiniteQueryKey = (options?: Options<ListRetrospectivesData>): QueryKey<Options<ListRetrospectivesData>> => createQueryKey('listRetrospectives', options, true);

/**
 * List Retrospectives
 */
export const listRetrospectivesInfiniteOptions = (options?: Options<ListRetrospectivesData>) => {
    return infiniteQueryOptions<ListRetrospectivesResponse, ListRetrospectivesError, InfiniteData<ListRetrospectivesResponse>, QueryKey<Options<ListRetrospectivesData>>, number | Pick<QueryKey<Options<ListRetrospectivesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListRetrospectivesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listRetrospectives({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRetrospectivesInfiniteQueryKey(options)
    });
};

/**
 * Create an Incident Retrospective
 */
export const createRetrospectiveMutation = (options?: Partial<Options<CreateRetrospectiveData>>): MutationOptions<CreateRetrospectiveResponse, CreateRetrospectiveError, Options<CreateRetrospectiveData>> => {
    const mutationOptions: MutationOptions<CreateRetrospectiveResponse, CreateRetrospectiveError, Options<CreateRetrospectiveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createRetrospective({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRetrospectiveQueryKey = (options: Options<GetRetrospectiveData>) => createQueryKey('getRetrospective', options);

/**
 * Get a Retrospective
 */
export const getRetrospectiveOptions = (options: Options<GetRetrospectiveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRetrospective({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRetrospectiveQueryKey(options)
    });
};

export const listRetrospectiveCommentsQueryKey = (options: Options<ListRetrospectiveCommentsData>) => createQueryKey('listRetrospectiveComments', options);

/**
 * List Comments For a Retrospective
 */
export const listRetrospectiveCommentsOptions = (options: Options<ListRetrospectiveCommentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listRetrospectiveComments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRetrospectiveCommentsQueryKey(options)
    });
};

export const listRetrospectiveCommentsInfiniteQueryKey = (options: Options<ListRetrospectiveCommentsData>): QueryKey<Options<ListRetrospectiveCommentsData>> => createQueryKey('listRetrospectiveComments', options, true);

/**
 * List Comments For a Retrospective
 */
export const listRetrospectiveCommentsInfiniteOptions = (options: Options<ListRetrospectiveCommentsData>) => {
    return infiniteQueryOptions<ListRetrospectiveCommentsResponse, ListRetrospectiveCommentsError, InfiniteData<ListRetrospectiveCommentsResponse>, QueryKey<Options<ListRetrospectiveCommentsData>>, number | Pick<QueryKey<Options<ListRetrospectiveCommentsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListRetrospectiveCommentsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listRetrospectiveComments({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRetrospectiveCommentsInfiniteQueryKey(options)
    });
};

/**
 * Create a Retrospective Comment
 */
export const createRetrospectiveDiscussionMutation = (options?: Partial<Options<CreateRetrospectiveDiscussionData>>): MutationOptions<CreateRetrospectiveDiscussionResponse, CreateRetrospectiveDiscussionError, Options<CreateRetrospectiveDiscussionData>> => {
    const mutationOptions: MutationOptions<CreateRetrospectiveDiscussionResponse, CreateRetrospectiveDiscussionError, Options<CreateRetrospectiveDiscussionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createRetrospectiveDiscussion({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listRetrospectiveReviewsQueryKey = (options?: Options<ListRetrospectiveReviewsData>) => createQueryKey('listRetrospectiveReviews', options);

/**
 * List Retrospective Reviews
 */
export const listRetrospectiveReviewsOptions = (options?: Options<ListRetrospectiveReviewsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listRetrospectiveReviews({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRetrospectiveReviewsQueryKey(options)
    });
};

export const listRetrospectiveReviewsInfiniteQueryKey = (options?: Options<ListRetrospectiveReviewsData>): QueryKey<Options<ListRetrospectiveReviewsData>> => createQueryKey('listRetrospectiveReviews', options, true);

/**
 * List Retrospective Reviews
 */
export const listRetrospectiveReviewsInfiniteOptions = (options?: Options<ListRetrospectiveReviewsData>) => {
    return infiniteQueryOptions<ListRetrospectiveReviewsResponse, ListRetrospectiveReviewsError, InfiniteData<ListRetrospectiveReviewsResponse>, QueryKey<Options<ListRetrospectiveReviewsData>>, number | Pick<QueryKey<Options<ListRetrospectiveReviewsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListRetrospectiveReviewsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listRetrospectiveReviews({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRetrospectiveReviewsInfiniteQueryKey(options)
    });
};

/**
 * Create a Retrospective Review
 */
export const createRetrospectiveReviewMutation = (options?: Partial<Options<CreateRetrospectiveReviewData>>): MutationOptions<CreateRetrospectiveReviewResponse, CreateRetrospectiveReviewError, Options<CreateRetrospectiveReviewData>> => {
    const mutationOptions: MutationOptions<CreateRetrospectiveReviewResponse, CreateRetrospectiveReviewError, Options<CreateRetrospectiveReviewData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createRetrospectiveReview({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSystemAnalysisQueryKey = (options: Options<GetSystemAnalysisData>) => createQueryKey('getSystemAnalysis', options);

/**
 * Get System Analysis
 */
export const getSystemAnalysisOptions = (options: Options<GetSystemAnalysisData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSystemAnalysis({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSystemAnalysisQueryKey(options)
    });
};

export const listSystemAnalysisComponentsQueryKey = (options: Options<ListSystemAnalysisComponentsData>) => createQueryKey('listSystemAnalysisComponents', options);

/**
 * List components in a System analysis
 */
export const listSystemAnalysisComponentsOptions = (options: Options<ListSystemAnalysisComponentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSystemAnalysisComponents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSystemAnalysisComponentsQueryKey(options)
    });
};

export const listSystemAnalysisComponentsInfiniteQueryKey = (options: Options<ListSystemAnalysisComponentsData>): QueryKey<Options<ListSystemAnalysisComponentsData>> => createQueryKey('listSystemAnalysisComponents', options, true);

/**
 * List components in a System analysis
 */
export const listSystemAnalysisComponentsInfiniteOptions = (options: Options<ListSystemAnalysisComponentsData>) => {
    return infiniteQueryOptions<ListSystemAnalysisComponentsResponse, ListSystemAnalysisComponentsError, InfiniteData<ListSystemAnalysisComponentsResponse>, QueryKey<Options<ListSystemAnalysisComponentsData>>, number | Pick<QueryKey<Options<ListSystemAnalysisComponentsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListSystemAnalysisComponentsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listSystemAnalysisComponents({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSystemAnalysisComponentsInfiniteQueryKey(options)
    });
};

/**
 * Add a Component to a System Analysis
 */
export const addSystemAnalysisComponentMutation = (options?: Partial<Options<AddSystemAnalysisComponentData>>): MutationOptions<AddSystemAnalysisComponentResponse, AddSystemAnalysisComponentError, Options<AddSystemAnalysisComponentData>> => {
    const mutationOptions: MutationOptions<AddSystemAnalysisComponentResponse, AddSystemAnalysisComponentError, Options<AddSystemAnalysisComponentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await addSystemAnalysisComponent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listSystemAnalysisRelationshipsQueryKey = (options: Options<ListSystemAnalysisRelationshipsData>) => createQueryKey('listSystemAnalysisRelationships', options);

/**
 * List relationships in a System analysis
 */
export const listSystemAnalysisRelationshipsOptions = (options: Options<ListSystemAnalysisRelationshipsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSystemAnalysisRelationships({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSystemAnalysisRelationshipsQueryKey(options)
    });
};

export const listSystemAnalysisRelationshipsInfiniteQueryKey = (options: Options<ListSystemAnalysisRelationshipsData>): QueryKey<Options<ListSystemAnalysisRelationshipsData>> => createQueryKey('listSystemAnalysisRelationships', options, true);

/**
 * List relationships in a System analysis
 */
export const listSystemAnalysisRelationshipsInfiniteOptions = (options: Options<ListSystemAnalysisRelationshipsData>) => {
    return infiniteQueryOptions<ListSystemAnalysisRelationshipsResponse, ListSystemAnalysisRelationshipsError, InfiniteData<ListSystemAnalysisRelationshipsResponse>, QueryKey<Options<ListSystemAnalysisRelationshipsData>>, number | Pick<QueryKey<Options<ListSystemAnalysisRelationshipsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListSystemAnalysisRelationshipsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listSystemAnalysisRelationships({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSystemAnalysisRelationshipsInfiniteQueryKey(options)
    });
};

/**
 * Create a Relationship in a System Analysis
 */
export const createSystemAnalysisRelationshipMutation = (options?: Partial<Options<CreateSystemAnalysisRelationshipData>>): MutationOptions<CreateSystemAnalysisRelationshipResponse, CreateSystemAnalysisRelationshipError, Options<CreateSystemAnalysisRelationshipData>> => {
    const mutationOptions: MutationOptions<CreateSystemAnalysisRelationshipResponse, CreateSystemAnalysisRelationshipError, Options<CreateSystemAnalysisRelationshipData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSystemAnalysisRelationship({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete a Component from a System Analysis
 */
export const deleteSystemAnalysisComponentMutation = (options?: Partial<Options<DeleteSystemAnalysisComponentData>>): MutationOptions<DeleteSystemAnalysisComponentResponse, DeleteSystemAnalysisComponentError, Options<DeleteSystemAnalysisComponentData>> => {
    const mutationOptions: MutationOptions<DeleteSystemAnalysisComponentResponse, DeleteSystemAnalysisComponentError, Options<DeleteSystemAnalysisComponentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteSystemAnalysisComponent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSystemAnalysisComponentQueryKey = (options: Options<GetSystemAnalysisComponentData>) => createQueryKey('getSystemAnalysisComponent', options);

/**
 * Get a component in a System analysis
 */
export const getSystemAnalysisComponentOptions = (options: Options<GetSystemAnalysisComponentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSystemAnalysisComponent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSystemAnalysisComponentQueryKey(options)
    });
};

/**
 * Update a System Analysis Component
 */
export const updateSystemAnalysisComponentMutation = (options?: Partial<Options<UpdateSystemAnalysisComponentData>>): MutationOptions<UpdateSystemAnalysisComponentResponse, UpdateSystemAnalysisComponentError, Options<UpdateSystemAnalysisComponentData>> => {
    const mutationOptions: MutationOptions<UpdateSystemAnalysisComponentResponse, UpdateSystemAnalysisComponentError, Options<UpdateSystemAnalysisComponentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSystemAnalysisComponent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete a Relationship from a System Analysis
 */
export const deleteSystemAnalysisRelationshipMutation = (options?: Partial<Options<DeleteSystemAnalysisRelationshipData>>): MutationOptions<DeleteSystemAnalysisRelationshipResponse, DeleteSystemAnalysisRelationshipError, Options<DeleteSystemAnalysisRelationshipData>> => {
    const mutationOptions: MutationOptions<DeleteSystemAnalysisRelationshipResponse, DeleteSystemAnalysisRelationshipError, Options<DeleteSystemAnalysisRelationshipData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteSystemAnalysisRelationship({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSystemAnalysisRelationshipQueryKey = (options: Options<GetSystemAnalysisRelationshipData>) => createQueryKey('getSystemAnalysisRelationship', options);

/**
 * Get a relationship in a System analysis
 */
export const getSystemAnalysisRelationshipOptions = (options: Options<GetSystemAnalysisRelationshipData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSystemAnalysisRelationship({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSystemAnalysisRelationshipQueryKey(options)
    });
};

/**
 * Update a System Analysis Relationship
 */
export const updateSystemAnalysisRelationshipMutation = (options?: Partial<Options<UpdateSystemAnalysisRelationshipData>>): MutationOptions<UpdateSystemAnalysisRelationshipResponse, UpdateSystemAnalysisRelationshipError, Options<UpdateSystemAnalysisRelationshipData>> => {
    const mutationOptions: MutationOptions<UpdateSystemAnalysisRelationshipResponse, UpdateSystemAnalysisRelationshipError, Options<UpdateSystemAnalysisRelationshipData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSystemAnalysisRelationship({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a System Component Constraint
 */
export const archiveSystemComponentConstraintMutation = (options?: Partial<Options<ArchiveSystemComponentConstraintData>>): MutationOptions<ArchiveSystemComponentConstraintResponse, ArchiveSystemComponentConstraintError, Options<ArchiveSystemComponentConstraintData>> => {
    const mutationOptions: MutationOptions<ArchiveSystemComponentConstraintResponse, ArchiveSystemComponentConstraintError, Options<ArchiveSystemComponentConstraintData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveSystemComponentConstraint({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSystemComponentConstraintQueryKey = (options: Options<GetSystemComponentConstraintData>) => createQueryKey('getSystemComponentConstraint', options);

/**
 * Get a System Component
 */
export const getSystemComponentConstraintOptions = (options: Options<GetSystemComponentConstraintData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSystemComponentConstraint({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSystemComponentConstraintQueryKey(options)
    });
};

/**
 * Update a System Component Constraint
 */
export const updateSystemComponentConstraintMutation = (options?: Partial<Options<UpdateSystemComponentConstraintData>>): MutationOptions<UpdateSystemComponentConstraintResponse, UpdateSystemComponentConstraintError, Options<UpdateSystemComponentConstraintData>> => {
    const mutationOptions: MutationOptions<UpdateSystemComponentConstraintResponse, UpdateSystemComponentConstraintError, Options<UpdateSystemComponentConstraintData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSystemComponentConstraint({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a System Component Control
 */
export const archiveSystemComponentControlMutation = (options?: Partial<Options<ArchiveSystemComponentControlData>>): MutationOptions<ArchiveSystemComponentControlResponse, ArchiveSystemComponentControlError, Options<ArchiveSystemComponentControlData>> => {
    const mutationOptions: MutationOptions<ArchiveSystemComponentControlResponse, ArchiveSystemComponentControlError, Options<ArchiveSystemComponentControlData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveSystemComponentControl({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSystemComponentControlQueryKey = (options: Options<GetSystemComponentControlData>) => createQueryKey('getSystemComponentControl', options);

/**
 * Get a System Component Control
 */
export const getSystemComponentControlOptions = (options: Options<GetSystemComponentControlData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSystemComponentControl({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSystemComponentControlQueryKey(options)
    });
};

/**
 * Update a System Component Control
 */
export const updateSystemComponentControlMutation = (options?: Partial<Options<UpdateSystemComponentControlData>>): MutationOptions<UpdateSystemComponentControlResponse, UpdateSystemComponentControlError, Options<UpdateSystemComponentControlData>> => {
    const mutationOptions: MutationOptions<UpdateSystemComponentControlResponse, UpdateSystemComponentControlError, Options<UpdateSystemComponentControlData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSystemComponentControl({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listSystemComponentKindsQueryKey = (options?: Options<ListSystemComponentKindsData>) => createQueryKey('listSystemComponentKinds', options);

/**
 * List System Component Kinds
 */
export const listSystemComponentKindsOptions = (options?: Options<ListSystemComponentKindsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSystemComponentKinds({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSystemComponentKindsQueryKey(options)
    });
};

export const listSystemComponentKindsInfiniteQueryKey = (options?: Options<ListSystemComponentKindsData>): QueryKey<Options<ListSystemComponentKindsData>> => createQueryKey('listSystemComponentKinds', options, true);

/**
 * List System Component Kinds
 */
export const listSystemComponentKindsInfiniteOptions = (options?: Options<ListSystemComponentKindsData>) => {
    return infiniteQueryOptions<ListSystemComponentKindsResponse, ListSystemComponentKindsError, InfiniteData<ListSystemComponentKindsResponse>, QueryKey<Options<ListSystemComponentKindsData>>, number | Pick<QueryKey<Options<ListSystemComponentKindsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListSystemComponentKindsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listSystemComponentKinds({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSystemComponentKindsInfiniteQueryKey(options)
    });
};

/**
 * Create a System Component Kind
 */
export const createSystemComponentKindMutation = (options?: Partial<Options<CreateSystemComponentKindData>>): MutationOptions<CreateSystemComponentKindResponse, CreateSystemComponentKindError, Options<CreateSystemComponentKindData>> => {
    const mutationOptions: MutationOptions<CreateSystemComponentKindResponse, CreateSystemComponentKindError, Options<CreateSystemComponentKindData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSystemComponentKind({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a System Component Kind
 */
export const archiveSystemComponentKindMutation = (options?: Partial<Options<ArchiveSystemComponentKindData>>): MutationOptions<ArchiveSystemComponentKindResponse, ArchiveSystemComponentKindError, Options<ArchiveSystemComponentKindData>> => {
    const mutationOptions: MutationOptions<ArchiveSystemComponentKindResponse, ArchiveSystemComponentKindError, Options<ArchiveSystemComponentKindData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveSystemComponentKind({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSystemComponentKindQueryKey = (options: Options<GetSystemComponentKindData>) => createQueryKey('getSystemComponentKind', options);

/**
 * Get a System Component Kind
 */
export const getSystemComponentKindOptions = (options: Options<GetSystemComponentKindData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSystemComponentKind({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSystemComponentKindQueryKey(options)
    });
};

/**
 * Update a System Component Kind
 */
export const updateSystemComponentKindMutation = (options?: Partial<Options<UpdateSystemComponentKindData>>): MutationOptions<UpdateSystemComponentKindResponse, UpdateSystemComponentKindError, Options<UpdateSystemComponentKindData>> => {
    const mutationOptions: MutationOptions<UpdateSystemComponentKindResponse, UpdateSystemComponentKindError, Options<UpdateSystemComponentKindData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSystemComponentKind({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listSystemComponentRelationshipsQueryKey = (options?: Options<ListSystemComponentRelationshipsData>) => createQueryKey('listSystemComponentRelationships', options);

/**
 * List System Component Relationships
 */
export const listSystemComponentRelationshipsOptions = (options?: Options<ListSystemComponentRelationshipsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSystemComponentRelationships({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSystemComponentRelationshipsQueryKey(options)
    });
};

export const listSystemComponentRelationshipsInfiniteQueryKey = (options?: Options<ListSystemComponentRelationshipsData>): QueryKey<Options<ListSystemComponentRelationshipsData>> => createQueryKey('listSystemComponentRelationships', options, true);

/**
 * List System Component Relationships
 */
export const listSystemComponentRelationshipsInfiniteOptions = (options?: Options<ListSystemComponentRelationshipsData>) => {
    return infiniteQueryOptions<ListSystemComponentRelationshipsResponse, ListSystemComponentRelationshipsError, InfiniteData<ListSystemComponentRelationshipsResponse>, QueryKey<Options<ListSystemComponentRelationshipsData>>, number | Pick<QueryKey<Options<ListSystemComponentRelationshipsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListSystemComponentRelationshipsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listSystemComponentRelationships({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSystemComponentRelationshipsInfiniteQueryKey(options)
    });
};

/**
 * Create a System Component Relationship
 */
export const createSystemComponentRelationshipMutation = (options?: Partial<Options<CreateSystemComponentRelationshipData>>): MutationOptions<CreateSystemComponentRelationshipResponse, CreateSystemComponentRelationshipError, Options<CreateSystemComponentRelationshipData>> => {
    const mutationOptions: MutationOptions<CreateSystemComponentRelationshipResponse, CreateSystemComponentRelationshipError, Options<CreateSystemComponentRelationshipData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSystemComponentRelationship({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a System Component Relationship
 */
export const archiveSystemComponentRelationshipMutation = (options?: Partial<Options<ArchiveSystemComponentRelationshipData>>): MutationOptions<ArchiveSystemComponentRelationshipResponse, ArchiveSystemComponentRelationshipError, Options<ArchiveSystemComponentRelationshipData>> => {
    const mutationOptions: MutationOptions<ArchiveSystemComponentRelationshipResponse, ArchiveSystemComponentRelationshipError, Options<ArchiveSystemComponentRelationshipData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveSystemComponentRelationship({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSystemComponentRelationshipQueryKey = (options: Options<GetSystemComponentRelationshipData>) => createQueryKey('getSystemComponentRelationship', options);

/**
 * Get a System Component Relationship
 */
export const getSystemComponentRelationshipOptions = (options: Options<GetSystemComponentRelationshipData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSystemComponentRelationship({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSystemComponentRelationshipQueryKey(options)
    });
};

/**
 * Update a System Component Relationship
 */
export const updateSystemComponentRelationshipMutation = (options?: Partial<Options<UpdateSystemComponentRelationshipData>>): MutationOptions<UpdateSystemComponentRelationshipResponse, UpdateSystemComponentRelationshipError, Options<UpdateSystemComponentRelationshipData>> => {
    const mutationOptions: MutationOptions<UpdateSystemComponentRelationshipResponse, UpdateSystemComponentRelationshipError, Options<UpdateSystemComponentRelationshipData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSystemComponentRelationship({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a System Component Signal
 */
export const archiveSystemComponentSignalMutation = (options?: Partial<Options<ArchiveSystemComponentSignalData>>): MutationOptions<ArchiveSystemComponentSignalResponse, ArchiveSystemComponentSignalError, Options<ArchiveSystemComponentSignalData>> => {
    const mutationOptions: MutationOptions<ArchiveSystemComponentSignalResponse, ArchiveSystemComponentSignalError, Options<ArchiveSystemComponentSignalData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveSystemComponentSignal({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSystemComponentSignalQueryKey = (options: Options<GetSystemComponentSignalData>) => createQueryKey('getSystemComponentSignal', options);

/**
 * Get a System Component Signal
 */
export const getSystemComponentSignalOptions = (options: Options<GetSystemComponentSignalData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSystemComponentSignal({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSystemComponentSignalQueryKey(options)
    });
};

/**
 * Update a System Component Signal
 */
export const updateSystemComponentSignalMutation = (options?: Partial<Options<UpdateSystemComponentSignalData>>): MutationOptions<UpdateSystemComponentSignalResponse, UpdateSystemComponentSignalError, Options<UpdateSystemComponentSignalData>> => {
    const mutationOptions: MutationOptions<UpdateSystemComponentSignalResponse, UpdateSystemComponentSignalError, Options<UpdateSystemComponentSignalData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSystemComponentSignal({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listSystemComponentsQueryKey = (options?: Options<ListSystemComponentsData>) => createQueryKey('listSystemComponents', options);

/**
 * List System Components
 */
export const listSystemComponentsOptions = (options?: Options<ListSystemComponentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSystemComponents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSystemComponentsQueryKey(options)
    });
};

export const listSystemComponentsInfiniteQueryKey = (options?: Options<ListSystemComponentsData>): QueryKey<Options<ListSystemComponentsData>> => createQueryKey('listSystemComponents', options, true);

/**
 * List System Components
 */
export const listSystemComponentsInfiniteOptions = (options?: Options<ListSystemComponentsData>) => {
    return infiniteQueryOptions<ListSystemComponentsResponse, ListSystemComponentsError, InfiniteData<ListSystemComponentsResponse>, QueryKey<Options<ListSystemComponentsData>>, number | Pick<QueryKey<Options<ListSystemComponentsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListSystemComponentsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listSystemComponents({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSystemComponentsInfiniteQueryKey(options)
    });
};

/**
 * Create a System Component
 */
export const createSystemComponentMutation = (options?: Partial<Options<CreateSystemComponentData>>): MutationOptions<CreateSystemComponentResponse, CreateSystemComponentError, Options<CreateSystemComponentData>> => {
    const mutationOptions: MutationOptions<CreateSystemComponentResponse, CreateSystemComponentError, Options<CreateSystemComponentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSystemComponent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a System Component
 */
export const archiveSystemComponentMutation = (options?: Partial<Options<ArchiveSystemComponentData>>): MutationOptions<ArchiveSystemComponentResponse, ArchiveSystemComponentError, Options<ArchiveSystemComponentData>> => {
    const mutationOptions: MutationOptions<ArchiveSystemComponentResponse, ArchiveSystemComponentError, Options<ArchiveSystemComponentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveSystemComponent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSystemComponentQueryKey = (options: Options<GetSystemComponentData>) => createQueryKey('getSystemComponent', options);

/**
 * Get a System Component
 */
export const getSystemComponentOptions = (options: Options<GetSystemComponentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSystemComponent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSystemComponentQueryKey(options)
    });
};

/**
 * Update a System Component
 */
export const updateSystemComponentMutation = (options?: Partial<Options<UpdateSystemComponentData>>): MutationOptions<UpdateSystemComponentResponse, UpdateSystemComponentError, Options<UpdateSystemComponentData>> => {
    const mutationOptions: MutationOptions<UpdateSystemComponentResponse, UpdateSystemComponentError, Options<UpdateSystemComponentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSystemComponent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create a System Component Constraint
 */
export const createSystemComponentConstraintMutation = (options?: Partial<Options<CreateSystemComponentConstraintData>>): MutationOptions<CreateSystemComponentConstraintResponse, CreateSystemComponentConstraintError, Options<CreateSystemComponentConstraintData>> => {
    const mutationOptions: MutationOptions<CreateSystemComponentConstraintResponse, CreateSystemComponentConstraintError, Options<CreateSystemComponentConstraintData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSystemComponentConstraint({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create a System Component Control
 */
export const createSystemComponentControlMutation = (options?: Partial<Options<CreateSystemComponentControlData>>): MutationOptions<CreateSystemComponentControlResponse, CreateSystemComponentControlError, Options<CreateSystemComponentControlData>> => {
    const mutationOptions: MutationOptions<CreateSystemComponentControlResponse, CreateSystemComponentControlError, Options<CreateSystemComponentControlData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSystemComponentControl({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create a System Component Signal
 */
export const createSystemComponentSignalMutation = (options?: Partial<Options<CreateSystemComponentSignalData>>): MutationOptions<CreateSystemComponentSignalResponse, CreateSystemComponentSignalError, Options<CreateSystemComponentSignalData>> => {
    const mutationOptions: MutationOptions<CreateSystemComponentSignalResponse, CreateSystemComponentSignalError, Options<CreateSystemComponentSignalData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSystemComponentSignal({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listTasksQueryKey = (options?: Options<ListTasksData>) => createQueryKey('listTasks', options);

/**
 * List Tasks
 */
export const listTasksOptions = (options?: Options<ListTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTasksQueryKey(options)
    });
};

export const listTasksInfiniteQueryKey = (options?: Options<ListTasksData>): QueryKey<Options<ListTasksData>> => createQueryKey('listTasks', options, true);

/**
 * List Tasks
 */
export const listTasksInfiniteOptions = (options?: Options<ListTasksData>) => {
    return infiniteQueryOptions<ListTasksResponse, ListTasksError, InfiniteData<ListTasksResponse>, QueryKey<Options<ListTasksData>>, number | Pick<QueryKey<Options<ListTasksData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListTasksData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listTasks({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTasksInfiniteQueryKey(options)
    });
};

/**
 * Create a Task
 */
export const createTaskMutation = (options?: Partial<Options<CreateTaskData>>): MutationOptions<CreateTaskResponse, CreateTaskError, Options<CreateTaskData>> => {
    const mutationOptions: MutationOptions<CreateTaskResponse, CreateTaskError, Options<CreateTaskData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createTask({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a Task
 */
export const archiveTaskMutation = (options?: Partial<Options<ArchiveTaskData>>): MutationOptions<ArchiveTaskResponse, ArchiveTaskError, Options<ArchiveTaskData>> => {
    const mutationOptions: MutationOptions<ArchiveTaskResponse, ArchiveTaskError, Options<ArchiveTaskData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveTask({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTaskQueryKey = (options: Options<GetTaskData>) => createQueryKey('getTask', options);

/**
 * Get Task
 */
export const getTaskOptions = (options: Options<GetTaskData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTask({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTaskQueryKey(options)
    });
};

/**
 * Update a Task
 */
export const updateTaskMutation = (options?: Partial<Options<UpdateTaskData>>): MutationOptions<UpdateTaskResponse, UpdateTaskError, Options<UpdateTaskData>> => {
    const mutationOptions: MutationOptions<UpdateTaskResponse, UpdateTaskError, Options<UpdateTaskData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateTask({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listTeamsQueryKey = (options?: Options<ListTeamsData>) => createQueryKey('listTeams', options);

/**
 * List Teams
 */
export const listTeamsOptions = (options?: Options<ListTeamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTeams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTeamsQueryKey(options)
    });
};

export const listTeamsInfiniteQueryKey = (options?: Options<ListTeamsData>): QueryKey<Options<ListTeamsData>> => createQueryKey('listTeams', options, true);

/**
 * List Teams
 */
export const listTeamsInfiniteOptions = (options?: Options<ListTeamsData>) => {
    return infiniteQueryOptions<ListTeamsResponse, ListTeamsError, InfiniteData<ListTeamsResponse>, QueryKey<Options<ListTeamsData>>, number | Pick<QueryKey<Options<ListTeamsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListTeamsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listTeams({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTeamsInfiniteQueryKey(options)
    });
};

/**
 * Create a Team
 */
export const createTeamMutation = (options?: Partial<Options<CreateTeamData>>): MutationOptions<CreateTeamResponse, CreateTeamError, Options<CreateTeamData>> => {
    const mutationOptions: MutationOptions<CreateTeamResponse, CreateTeamError, Options<CreateTeamData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createTeam({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Archive a Team
 */
export const archiveTeamMutation = (options?: Partial<Options<ArchiveTeamData>>): MutationOptions<ArchiveTeamResponse, ArchiveTeamError, Options<ArchiveTeamData>> => {
    const mutationOptions: MutationOptions<ArchiveTeamResponse, ArchiveTeamError, Options<ArchiveTeamData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await archiveTeam({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTeamQueryKey = (options: Options<GetTeamData>) => createQueryKey('getTeam', options);

/**
 * Get a Team
 */
export const getTeamOptions = (options: Options<GetTeamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTeam({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTeamQueryKey(options)
    });
};

/**
 * Update a Team
 */
export const updateTeamsMutation = (options?: Partial<Options<UpdateTeamsData>>): MutationOptions<UpdateTeamsResponse, UpdateTeamsError, Options<UpdateTeamsData>> => {
    const mutationOptions: MutationOptions<UpdateTeamsResponse, UpdateTeamsError, Options<UpdateTeamsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateTeams({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete a Notification for the Current User
 */
export const deleteUserNotificationMutation = (options?: Partial<Options<DeleteUserNotificationData>>): MutationOptions<DeleteUserNotificationResponse, DeleteUserNotificationError, Options<DeleteUserNotificationData>> => {
    const mutationOptions: MutationOptions<DeleteUserNotificationResponse, DeleteUserNotificationError, Options<DeleteUserNotificationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteUserNotification({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listUsersQueryKey = (options?: Options<ListUsersData>) => createQueryKey('listUsers', options);

/**
 * List Users
 */
export const listUsersOptions = (options?: Options<ListUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUsersQueryKey(options)
    });
};

export const listUsersInfiniteQueryKey = (options?: Options<ListUsersData>): QueryKey<Options<ListUsersData>> => createQueryKey('listUsers', options, true);

/**
 * List Users
 */
export const listUsersInfiniteOptions = (options?: Options<ListUsersData>) => {
    return infiniteQueryOptions<ListUsersResponse, ListUsersError, InfiniteData<ListUsersResponse>, QueryKey<Options<ListUsersData>>, number | Pick<QueryKey<Options<ListUsersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListUsersData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listUsers({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUsersInfiniteQueryKey(options)
    });
};

export const getUserQueryKey = (options: Options<GetUserData>) => createQueryKey('getUser', options);

/**
 * Get a User
 */
export const getUserOptions = (options: Options<GetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserQueryKey(options)
    });
};
