// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidentfieldoption"
	"github.com/rezible/rezible/ent/incidentlink"
	"github.com/rezible/rezible/ent/incidentmilestone"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/incidentseverity"
	"github.com/rezible/rezible/ent/incidenttag"
	"github.com/rezible/rezible/ent/incidenttype"
	"github.com/rezible/rezible/ent/meetingsession"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/task"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// IncidentCreate is the builder for creating a Incident entity.
type IncidentCreate struct {
	config
	mutation *IncidentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (ic *IncidentCreate) SetTenantID(i int) *IncidentCreate {
	ic.mutation.SetTenantID(i)
	return ic
}

// SetSlug sets the "slug" field.
func (ic *IncidentCreate) SetSlug(s string) *IncidentCreate {
	ic.mutation.SetSlug(s)
	return ic
}

// SetTitle sets the "title" field.
func (ic *IncidentCreate) SetTitle(s string) *IncidentCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetPrivate sets the "private" field.
func (ic *IncidentCreate) SetPrivate(b bool) *IncidentCreate {
	ic.mutation.SetPrivate(b)
	return ic
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (ic *IncidentCreate) SetNillablePrivate(b *bool) *IncidentCreate {
	if b != nil {
		ic.SetPrivate(*b)
	}
	return ic
}

// SetSummary sets the "summary" field.
func (ic *IncidentCreate) SetSummary(s string) *IncidentCreate {
	ic.mutation.SetSummary(s)
	return ic
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableSummary(s *string) *IncidentCreate {
	if s != nil {
		ic.SetSummary(*s)
	}
	return ic
}

// SetOpenedAt sets the "opened_at" field.
func (ic *IncidentCreate) SetOpenedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetOpenedAt(t)
	return ic
}

// SetNillableOpenedAt sets the "opened_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableOpenedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetOpenedAt(*t)
	}
	return ic
}

// SetModifiedAt sets the "modified_at" field.
func (ic *IncidentCreate) SetModifiedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetModifiedAt(t)
	return ic
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableModifiedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetModifiedAt(*t)
	}
	return ic
}

// SetClosedAt sets the "closed_at" field.
func (ic *IncidentCreate) SetClosedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetClosedAt(t)
	return ic
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableClosedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetClosedAt(*t)
	}
	return ic
}

// SetProviderID sets the "provider_id" field.
func (ic *IncidentCreate) SetProviderID(s string) *IncidentCreate {
	ic.mutation.SetProviderID(s)
	return ic
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableProviderID(s *string) *IncidentCreate {
	if s != nil {
		ic.SetProviderID(*s)
	}
	return ic
}

// SetChatChannelID sets the "chat_channel_id" field.
func (ic *IncidentCreate) SetChatChannelID(s string) *IncidentCreate {
	ic.mutation.SetChatChannelID(s)
	return ic
}

// SetNillableChatChannelID sets the "chat_channel_id" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableChatChannelID(s *string) *IncidentCreate {
	if s != nil {
		ic.SetChatChannelID(*s)
	}
	return ic
}

// SetSeverityID sets the "severity_id" field.
func (ic *IncidentCreate) SetSeverityID(u uuid.UUID) *IncidentCreate {
	ic.mutation.SetSeverityID(u)
	return ic
}

// SetNillableSeverityID sets the "severity_id" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableSeverityID(u *uuid.UUID) *IncidentCreate {
	if u != nil {
		ic.SetSeverityID(*u)
	}
	return ic
}

// SetTypeID sets the "type_id" field.
func (ic *IncidentCreate) SetTypeID(u uuid.UUID) *IncidentCreate {
	ic.mutation.SetTypeID(u)
	return ic
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableTypeID(u *uuid.UUID) *IncidentCreate {
	if u != nil {
		ic.SetTypeID(*u)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *IncidentCreate) SetID(u uuid.UUID) *IncidentCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableID(u *uuid.UUID) *IncidentCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ic *IncidentCreate) SetTenant(t *Tenant) *IncidentCreate {
	return ic.SetTenantID(t.ID)
}

// SetSeverity sets the "severity" edge to the IncidentSeverity entity.
func (ic *IncidentCreate) SetSeverity(i *IncidentSeverity) *IncidentCreate {
	return ic.SetSeverityID(i.ID)
}

// SetType sets the "type" edge to the IncidentType entity.
func (ic *IncidentCreate) SetType(i *IncidentType) *IncidentCreate {
	return ic.SetTypeID(i.ID)
}

// AddMilestoneIDs adds the "milestones" edge to the IncidentMilestone entity by IDs.
func (ic *IncidentCreate) AddMilestoneIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddMilestoneIDs(ids...)
	return ic
}

// AddMilestones adds the "milestones" edges to the IncidentMilestone entity.
func (ic *IncidentCreate) AddMilestones(i ...*IncidentMilestone) *IncidentCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddMilestoneIDs(ids...)
}

// AddEventIDs adds the "events" edge to the IncidentEvent entity by IDs.
func (ic *IncidentCreate) AddEventIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddEventIDs(ids...)
	return ic
}

// AddEvents adds the "events" edges to the IncidentEvent entity.
func (ic *IncidentCreate) AddEvents(i ...*IncidentEvent) *IncidentCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddEventIDs(ids...)
}

// SetRetrospectiveID sets the "retrospective" edge to the Retrospective entity by ID.
func (ic *IncidentCreate) SetRetrospectiveID(id uuid.UUID) *IncidentCreate {
	ic.mutation.SetRetrospectiveID(id)
	return ic
}

// SetNillableRetrospectiveID sets the "retrospective" edge to the Retrospective entity by ID if the given value is not nil.
func (ic *IncidentCreate) SetNillableRetrospectiveID(id *uuid.UUID) *IncidentCreate {
	if id != nil {
		ic = ic.SetRetrospectiveID(*id)
	}
	return ic
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (ic *IncidentCreate) SetRetrospective(r *Retrospective) *IncidentCreate {
	return ic.SetRetrospectiveID(r.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ic *IncidentCreate) AddUserIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddUserIDs(ids...)
	return ic
}

// AddUsers adds the "users" edges to the User entity.
func (ic *IncidentCreate) AddUsers(u ...*User) *IncidentCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ic.AddUserIDs(ids...)
}

// AddRoleAssignmentIDs adds the "role_assignments" edge to the IncidentRoleAssignment entity by IDs.
func (ic *IncidentCreate) AddRoleAssignmentIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddRoleAssignmentIDs(ids...)
	return ic
}

// AddRoleAssignments adds the "role_assignments" edges to the IncidentRoleAssignment entity.
func (ic *IncidentCreate) AddRoleAssignments(i ...*IncidentRoleAssignment) *IncidentCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddRoleAssignmentIDs(ids...)
}

// AddLinkedIncidentIDs adds the "linked_incidents" edge to the Incident entity by IDs.
func (ic *IncidentCreate) AddLinkedIncidentIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddLinkedIncidentIDs(ids...)
	return ic
}

// AddLinkedIncidents adds the "linked_incidents" edges to the Incident entity.
func (ic *IncidentCreate) AddLinkedIncidents(i ...*Incident) *IncidentCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddLinkedIncidentIDs(ids...)
}

// AddFieldSelectionIDs adds the "field_selections" edge to the IncidentFieldOption entity by IDs.
func (ic *IncidentCreate) AddFieldSelectionIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddFieldSelectionIDs(ids...)
	return ic
}

// AddFieldSelections adds the "field_selections" edges to the IncidentFieldOption entity.
func (ic *IncidentCreate) AddFieldSelections(i ...*IncidentFieldOption) *IncidentCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddFieldSelectionIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ic *IncidentCreate) AddTaskIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddTaskIDs(ids...)
	return ic
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ic *IncidentCreate) AddTasks(t ...*Task) *IncidentCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ic.AddTaskIDs(ids...)
}

// AddTagAssignmentIDs adds the "tag_assignments" edge to the IncidentTag entity by IDs.
func (ic *IncidentCreate) AddTagAssignmentIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddTagAssignmentIDs(ids...)
	return ic
}

// AddTagAssignments adds the "tag_assignments" edges to the IncidentTag entity.
func (ic *IncidentCreate) AddTagAssignments(i ...*IncidentTag) *IncidentCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddTagAssignmentIDs(ids...)
}

// AddDebriefIDs adds the "debriefs" edge to the IncidentDebrief entity by IDs.
func (ic *IncidentCreate) AddDebriefIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddDebriefIDs(ids...)
	return ic
}

// AddDebriefs adds the "debriefs" edges to the IncidentDebrief entity.
func (ic *IncidentCreate) AddDebriefs(i ...*IncidentDebrief) *IncidentCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddDebriefIDs(ids...)
}

// AddReviewSessionIDs adds the "review_sessions" edge to the MeetingSession entity by IDs.
func (ic *IncidentCreate) AddReviewSessionIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddReviewSessionIDs(ids...)
	return ic
}

// AddReviewSessions adds the "review_sessions" edges to the MeetingSession entity.
func (ic *IncidentCreate) AddReviewSessions(m ...*MeetingSession) *IncidentCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ic.AddReviewSessionIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the IncidentRoleAssignment entity by IDs.
func (ic *IncidentCreate) AddUserRoleIDs(ids ...uuid.UUID) *IncidentCreate {
	ic.mutation.AddUserRoleIDs(ids...)
	return ic
}

// AddUserRoles adds the "user_roles" edges to the IncidentRoleAssignment entity.
func (ic *IncidentCreate) AddUserRoles(i ...*IncidentRoleAssignment) *IncidentCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddUserRoleIDs(ids...)
}

// AddIncidentLinkIDs adds the "incident_links" edge to the IncidentLink entity by IDs.
func (ic *IncidentCreate) AddIncidentLinkIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddIncidentLinkIDs(ids...)
	return ic
}

// AddIncidentLinks adds the "incident_links" edges to the IncidentLink entity.
func (ic *IncidentCreate) AddIncidentLinks(i ...*IncidentLink) *IncidentCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddIncidentLinkIDs(ids...)
}

// Mutation returns the IncidentMutation object of the builder.
func (ic *IncidentCreate) Mutation() *IncidentMutation {
	return ic.mutation
}

// Save creates the Incident in the database.
func (ic *IncidentCreate) Save(ctx context.Context) (*Incident, error) {
	if err := ic.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IncidentCreate) SaveX(ctx context.Context) *Incident {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IncidentCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IncidentCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IncidentCreate) defaults() error {
	if _, ok := ic.mutation.Private(); !ok {
		v := incident.DefaultPrivate
		ic.mutation.SetPrivate(v)
	}
	if _, ok := ic.mutation.OpenedAt(); !ok {
		if incident.DefaultOpenedAt == nil {
			return fmt.Errorf("ent: uninitialized incident.DefaultOpenedAt (forgotten import ent/runtime?)")
		}
		v := incident.DefaultOpenedAt()
		ic.mutation.SetOpenedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		if incident.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized incident.DefaultID (forgotten import ent/runtime?)")
		}
		v := incident.DefaultID()
		ic.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ic *IncidentCreate) check() error {
	if _, ok := ic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Incident.tenant_id"`)}
	}
	if _, ok := ic.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Incident.slug"`)}
	}
	if _, ok := ic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Incident.title"`)}
	}
	if _, ok := ic.mutation.Private(); !ok {
		return &ValidationError{Name: "private", err: errors.New(`ent: missing required field "Incident.private"`)}
	}
	if _, ok := ic.mutation.OpenedAt(); !ok {
		return &ValidationError{Name: "opened_at", err: errors.New(`ent: missing required field "Incident.opened_at"`)}
	}
	if len(ic.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Incident.tenant"`)}
	}
	return nil
}

func (ic *IncidentCreate) sqlSave(ctx context.Context) (*Incident, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IncidentCreate) createSpec() (*Incident, *sqlgraph.CreateSpec) {
	var (
		_node = &Incident{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(incident.Table, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.Slug(); ok {
		_spec.SetField(incident.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := ic.mutation.Title(); ok {
		_spec.SetField(incident.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ic.mutation.Private(); ok {
		_spec.SetField(incident.FieldPrivate, field.TypeBool, value)
		_node.Private = value
	}
	if value, ok := ic.mutation.Summary(); ok {
		_spec.SetField(incident.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := ic.mutation.OpenedAt(); ok {
		_spec.SetField(incident.FieldOpenedAt, field.TypeTime, value)
		_node.OpenedAt = value
	}
	if value, ok := ic.mutation.ModifiedAt(); ok {
		_spec.SetField(incident.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	if value, ok := ic.mutation.ClosedAt(); ok {
		_spec.SetField(incident.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = value
	}
	if value, ok := ic.mutation.ProviderID(); ok {
		_spec.SetField(incident.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if value, ok := ic.mutation.ChatChannelID(); ok {
		_spec.SetField(incident.FieldChatChannelID, field.TypeString, value)
		_node.ChatChannelID = value
	}
	if nodes := ic.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incident.TenantTable,
			Columns: []string{incident.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.SeverityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incident.SeverityTable,
			Columns: []string{incident.SeverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentseverity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SeverityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incident.TypeTable,
			Columns: []string{incident.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.MilestonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.MilestonesTable,
			Columns: []string{incident.MilestonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentmilestone.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.EventsTable,
			Columns: []string{incident.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incident.RetrospectiveTable,
			Columns: []string{incident.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incident.UsersTable,
			Columns: incident.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentRoleAssignmentCreate{config: ic.config, mutation: newIncidentRoleAssignmentMutation(ic.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.RoleAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incident.RoleAssignmentsTable,
			Columns: []string{incident.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentroleassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.LinkedIncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incident.LinkedIncidentsTable,
			Columns: incident.LinkedIncidentsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.FieldSelectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incident.FieldSelectionsTable,
			Columns: incident.FieldSelectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfieldoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.TasksTable,
			Columns: []string{incident.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.TagAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incident.TagAssignmentsTable,
			Columns: incident.TagAssignmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.DebriefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.DebriefsTable,
			Columns: []string{incident.DebriefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ReviewSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incident.ReviewSessionsTable,
			Columns: incident.ReviewSessionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incident.UserRolesTable,
			Columns: []string{incident.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentroleassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.IncidentLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incident.IncidentLinksTable,
			Columns: []string{incident.IncidentLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentlink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Incident.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ic *IncidentCreate) OnConflict(opts ...sql.ConflictOption) *IncidentUpsertOne {
	ic.conflict = opts
	return &IncidentUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Incident.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *IncidentCreate) OnConflictColumns(columns ...string) *IncidentUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &IncidentUpsertOne{
		create: ic,
	}
}

type (
	// IncidentUpsertOne is the builder for "upsert"-ing
	//  one Incident node.
	IncidentUpsertOne struct {
		create *IncidentCreate
	}

	// IncidentUpsert is the "OnConflict" setter.
	IncidentUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlug sets the "slug" field.
func (u *IncidentUpsert) SetSlug(v string) *IncidentUpsert {
	u.Set(incident.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateSlug() *IncidentUpsert {
	u.SetExcluded(incident.FieldSlug)
	return u
}

// SetTitle sets the "title" field.
func (u *IncidentUpsert) SetTitle(v string) *IncidentUpsert {
	u.Set(incident.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateTitle() *IncidentUpsert {
	u.SetExcluded(incident.FieldTitle)
	return u
}

// SetPrivate sets the "private" field.
func (u *IncidentUpsert) SetPrivate(v bool) *IncidentUpsert {
	u.Set(incident.FieldPrivate, v)
	return u
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *IncidentUpsert) UpdatePrivate() *IncidentUpsert {
	u.SetExcluded(incident.FieldPrivate)
	return u
}

// SetSummary sets the "summary" field.
func (u *IncidentUpsert) SetSummary(v string) *IncidentUpsert {
	u.Set(incident.FieldSummary, v)
	return u
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateSummary() *IncidentUpsert {
	u.SetExcluded(incident.FieldSummary)
	return u
}

// ClearSummary clears the value of the "summary" field.
func (u *IncidentUpsert) ClearSummary() *IncidentUpsert {
	u.SetNull(incident.FieldSummary)
	return u
}

// SetOpenedAt sets the "opened_at" field.
func (u *IncidentUpsert) SetOpenedAt(v time.Time) *IncidentUpsert {
	u.Set(incident.FieldOpenedAt, v)
	return u
}

// UpdateOpenedAt sets the "opened_at" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateOpenedAt() *IncidentUpsert {
	u.SetExcluded(incident.FieldOpenedAt)
	return u
}

// SetModifiedAt sets the "modified_at" field.
func (u *IncidentUpsert) SetModifiedAt(v time.Time) *IncidentUpsert {
	u.Set(incident.FieldModifiedAt, v)
	return u
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateModifiedAt() *IncidentUpsert {
	u.SetExcluded(incident.FieldModifiedAt)
	return u
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *IncidentUpsert) ClearModifiedAt() *IncidentUpsert {
	u.SetNull(incident.FieldModifiedAt)
	return u
}

// SetClosedAt sets the "closed_at" field.
func (u *IncidentUpsert) SetClosedAt(v time.Time) *IncidentUpsert {
	u.Set(incident.FieldClosedAt, v)
	return u
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateClosedAt() *IncidentUpsert {
	u.SetExcluded(incident.FieldClosedAt)
	return u
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *IncidentUpsert) ClearClosedAt() *IncidentUpsert {
	u.SetNull(incident.FieldClosedAt)
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *IncidentUpsert) SetProviderID(v string) *IncidentUpsert {
	u.Set(incident.FieldProviderID, v)
	return u
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateProviderID() *IncidentUpsert {
	u.SetExcluded(incident.FieldProviderID)
	return u
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *IncidentUpsert) ClearProviderID() *IncidentUpsert {
	u.SetNull(incident.FieldProviderID)
	return u
}

// SetChatChannelID sets the "chat_channel_id" field.
func (u *IncidentUpsert) SetChatChannelID(v string) *IncidentUpsert {
	u.Set(incident.FieldChatChannelID, v)
	return u
}

// UpdateChatChannelID sets the "chat_channel_id" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateChatChannelID() *IncidentUpsert {
	u.SetExcluded(incident.FieldChatChannelID)
	return u
}

// ClearChatChannelID clears the value of the "chat_channel_id" field.
func (u *IncidentUpsert) ClearChatChannelID() *IncidentUpsert {
	u.SetNull(incident.FieldChatChannelID)
	return u
}

// SetSeverityID sets the "severity_id" field.
func (u *IncidentUpsert) SetSeverityID(v uuid.UUID) *IncidentUpsert {
	u.Set(incident.FieldSeverityID, v)
	return u
}

// UpdateSeverityID sets the "severity_id" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateSeverityID() *IncidentUpsert {
	u.SetExcluded(incident.FieldSeverityID)
	return u
}

// ClearSeverityID clears the value of the "severity_id" field.
func (u *IncidentUpsert) ClearSeverityID() *IncidentUpsert {
	u.SetNull(incident.FieldSeverityID)
	return u
}

// SetTypeID sets the "type_id" field.
func (u *IncidentUpsert) SetTypeID(v uuid.UUID) *IncidentUpsert {
	u.Set(incident.FieldTypeID, v)
	return u
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *IncidentUpsert) UpdateTypeID() *IncidentUpsert {
	u.SetExcluded(incident.FieldTypeID)
	return u
}

// ClearTypeID clears the value of the "type_id" field.
func (u *IncidentUpsert) ClearTypeID() *IncidentUpsert {
	u.SetNull(incident.FieldTypeID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Incident.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incident.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentUpsertOne) UpdateNewValues() *IncidentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incident.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(incident.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Incident.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentUpsertOne) Ignore() *IncidentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentUpsertOne) DoNothing() *IncidentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentCreate.OnConflict
// documentation for more info.
func (u *IncidentUpsertOne) Update(set func(*IncidentUpsert)) *IncidentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *IncidentUpsertOne) SetSlug(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateSlug() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *IncidentUpsertOne) SetTitle(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateTitle() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateTitle()
	})
}

// SetPrivate sets the "private" field.
func (u *IncidentUpsertOne) SetPrivate(v bool) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetPrivate(v)
	})
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdatePrivate() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdatePrivate()
	})
}

// SetSummary sets the "summary" field.
func (u *IncidentUpsertOne) SetSummary(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetSummary(v)
	})
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateSummary() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateSummary()
	})
}

// ClearSummary clears the value of the "summary" field.
func (u *IncidentUpsertOne) ClearSummary() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearSummary()
	})
}

// SetOpenedAt sets the "opened_at" field.
func (u *IncidentUpsertOne) SetOpenedAt(v time.Time) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetOpenedAt(v)
	})
}

// UpdateOpenedAt sets the "opened_at" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateOpenedAt() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateOpenedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *IncidentUpsertOne) SetModifiedAt(v time.Time) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateModifiedAt() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateModifiedAt()
	})
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *IncidentUpsertOne) ClearModifiedAt() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearModifiedAt()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *IncidentUpsertOne) SetClosedAt(v time.Time) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateClosedAt() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *IncidentUpsertOne) ClearClosedAt() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearClosedAt()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *IncidentUpsertOne) SetProviderID(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateProviderID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateProviderID()
	})
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *IncidentUpsertOne) ClearProviderID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearProviderID()
	})
}

// SetChatChannelID sets the "chat_channel_id" field.
func (u *IncidentUpsertOne) SetChatChannelID(v string) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetChatChannelID(v)
	})
}

// UpdateChatChannelID sets the "chat_channel_id" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateChatChannelID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateChatChannelID()
	})
}

// ClearChatChannelID clears the value of the "chat_channel_id" field.
func (u *IncidentUpsertOne) ClearChatChannelID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearChatChannelID()
	})
}

// SetSeverityID sets the "severity_id" field.
func (u *IncidentUpsertOne) SetSeverityID(v uuid.UUID) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetSeverityID(v)
	})
}

// UpdateSeverityID sets the "severity_id" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateSeverityID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateSeverityID()
	})
}

// ClearSeverityID clears the value of the "severity_id" field.
func (u *IncidentUpsertOne) ClearSeverityID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearSeverityID()
	})
}

// SetTypeID sets the "type_id" field.
func (u *IncidentUpsertOne) SetTypeID(v uuid.UUID) *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *IncidentUpsertOne) UpdateTypeID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateTypeID()
	})
}

// ClearTypeID clears the value of the "type_id" field.
func (u *IncidentUpsertOne) ClearTypeID() *IncidentUpsertOne {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearTypeID()
	})
}

// Exec executes the query.
func (u *IncidentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentUpsertOne.ID is not supported by MySQL driver. Use IncidentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentCreateBulk is the builder for creating many Incident entities in bulk.
type IncidentCreateBulk struct {
	config
	err      error
	builders []*IncidentCreate
	conflict []sql.ConflictOption
}

// Save creates the Incident entities in the database.
func (icb *IncidentCreateBulk) Save(ctx context.Context) ([]*Incident, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Incident, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IncidentCreateBulk) SaveX(ctx context.Context) []*Incident {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IncidentCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IncidentCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Incident.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (icb *IncidentCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentUpsertBulk {
	icb.conflict = opts
	return &IncidentUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Incident.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *IncidentCreateBulk) OnConflictColumns(columns ...string) *IncidentUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &IncidentUpsertBulk{
		create: icb,
	}
}

// IncidentUpsertBulk is the builder for "upsert"-ing
// a bulk of Incident nodes.
type IncidentUpsertBulk struct {
	create *IncidentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Incident.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incident.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentUpsertBulk) UpdateNewValues() *IncidentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incident.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(incident.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Incident.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentUpsertBulk) Ignore() *IncidentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentUpsertBulk) DoNothing() *IncidentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentUpsertBulk) Update(set func(*IncidentUpsert)) *IncidentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *IncidentUpsertBulk) SetSlug(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateSlug() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *IncidentUpsertBulk) SetTitle(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateTitle() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateTitle()
	})
}

// SetPrivate sets the "private" field.
func (u *IncidentUpsertBulk) SetPrivate(v bool) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetPrivate(v)
	})
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdatePrivate() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdatePrivate()
	})
}

// SetSummary sets the "summary" field.
func (u *IncidentUpsertBulk) SetSummary(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetSummary(v)
	})
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateSummary() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateSummary()
	})
}

// ClearSummary clears the value of the "summary" field.
func (u *IncidentUpsertBulk) ClearSummary() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearSummary()
	})
}

// SetOpenedAt sets the "opened_at" field.
func (u *IncidentUpsertBulk) SetOpenedAt(v time.Time) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetOpenedAt(v)
	})
}

// UpdateOpenedAt sets the "opened_at" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateOpenedAt() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateOpenedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *IncidentUpsertBulk) SetModifiedAt(v time.Time) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateModifiedAt() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateModifiedAt()
	})
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (u *IncidentUpsertBulk) ClearModifiedAt() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearModifiedAt()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *IncidentUpsertBulk) SetClosedAt(v time.Time) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateClosedAt() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *IncidentUpsertBulk) ClearClosedAt() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearClosedAt()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *IncidentUpsertBulk) SetProviderID(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateProviderID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateProviderID()
	})
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *IncidentUpsertBulk) ClearProviderID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearProviderID()
	})
}

// SetChatChannelID sets the "chat_channel_id" field.
func (u *IncidentUpsertBulk) SetChatChannelID(v string) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetChatChannelID(v)
	})
}

// UpdateChatChannelID sets the "chat_channel_id" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateChatChannelID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateChatChannelID()
	})
}

// ClearChatChannelID clears the value of the "chat_channel_id" field.
func (u *IncidentUpsertBulk) ClearChatChannelID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearChatChannelID()
	})
}

// SetSeverityID sets the "severity_id" field.
func (u *IncidentUpsertBulk) SetSeverityID(v uuid.UUID) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetSeverityID(v)
	})
}

// UpdateSeverityID sets the "severity_id" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateSeverityID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateSeverityID()
	})
}

// ClearSeverityID clears the value of the "severity_id" field.
func (u *IncidentUpsertBulk) ClearSeverityID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearSeverityID()
	})
}

// SetTypeID sets the "type_id" field.
func (u *IncidentUpsertBulk) SetTypeID(v uuid.UUID) *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *IncidentUpsertBulk) UpdateTypeID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.UpdateTypeID()
	})
}

// ClearTypeID clears the value of the "type_id" field.
func (u *IncidentUpsertBulk) ClearTypeID() *IncidentUpsertBulk {
	return u.Update(func(s *IncidentUpsert) {
		s.ClearTypeID()
	})
}

// Exec executes the query.
func (u *IncidentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
