// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontext"
	"github.com/rezible/rezible/ent/incidenteventcontributingfactor"
	"github.com/rezible/rezible/ent/incidenteventevidence"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentEventCreate is the builder for creating a IncidentEvent entity.
type IncidentEventCreate struct {
	config
	mutation *IncidentEventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (iec *IncidentEventCreate) SetTenantID(i int) *IncidentEventCreate {
	iec.mutation.SetTenantID(i)
	return iec
}

// SetIncidentID sets the "incident_id" field.
func (iec *IncidentEventCreate) SetIncidentID(u uuid.UUID) *IncidentEventCreate {
	iec.mutation.SetIncidentID(u)
	return iec
}

// SetEventID sets the "event_id" field.
func (iec *IncidentEventCreate) SetEventID(u uuid.UUID) *IncidentEventCreate {
	iec.mutation.SetEventID(u)
	return iec
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (iec *IncidentEventCreate) SetNillableEventID(u *uuid.UUID) *IncidentEventCreate {
	if u != nil {
		iec.SetEventID(*u)
	}
	return iec
}

// SetTimestamp sets the "timestamp" field.
func (iec *IncidentEventCreate) SetTimestamp(t time.Time) *IncidentEventCreate {
	iec.mutation.SetTimestamp(t)
	return iec
}

// SetKind sets the "kind" field.
func (iec *IncidentEventCreate) SetKind(i incidentevent.Kind) *IncidentEventCreate {
	iec.mutation.SetKind(i)
	return iec
}

// SetTitle sets the "title" field.
func (iec *IncidentEventCreate) SetTitle(s string) *IncidentEventCreate {
	iec.mutation.SetTitle(s)
	return iec
}

// SetDescription sets the "description" field.
func (iec *IncidentEventCreate) SetDescription(s string) *IncidentEventCreate {
	iec.mutation.SetDescription(s)
	return iec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iec *IncidentEventCreate) SetNillableDescription(s *string) *IncidentEventCreate {
	if s != nil {
		iec.SetDescription(*s)
	}
	return iec
}

// SetIsKey sets the "is_key" field.
func (iec *IncidentEventCreate) SetIsKey(b bool) *IncidentEventCreate {
	iec.mutation.SetIsKey(b)
	return iec
}

// SetNillableIsKey sets the "is_key" field if the given value is not nil.
func (iec *IncidentEventCreate) SetNillableIsKey(b *bool) *IncidentEventCreate {
	if b != nil {
		iec.SetIsKey(*b)
	}
	return iec
}

// SetCreatedAt sets the "created_at" field.
func (iec *IncidentEventCreate) SetCreatedAt(t time.Time) *IncidentEventCreate {
	iec.mutation.SetCreatedAt(t)
	return iec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iec *IncidentEventCreate) SetNillableCreatedAt(t *time.Time) *IncidentEventCreate {
	if t != nil {
		iec.SetCreatedAt(*t)
	}
	return iec
}

// SetUpdatedAt sets the "updated_at" field.
func (iec *IncidentEventCreate) SetUpdatedAt(t time.Time) *IncidentEventCreate {
	iec.mutation.SetUpdatedAt(t)
	return iec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iec *IncidentEventCreate) SetNillableUpdatedAt(t *time.Time) *IncidentEventCreate {
	if t != nil {
		iec.SetUpdatedAt(*t)
	}
	return iec
}

// SetCreatedBy sets the "created_by" field.
func (iec *IncidentEventCreate) SetCreatedBy(u uuid.UUID) *IncidentEventCreate {
	iec.mutation.SetCreatedBy(u)
	return iec
}

// SetSequence sets the "sequence" field.
func (iec *IncidentEventCreate) SetSequence(i int) *IncidentEventCreate {
	iec.mutation.SetSequence(i)
	return iec
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (iec *IncidentEventCreate) SetNillableSequence(i *int) *IncidentEventCreate {
	if i != nil {
		iec.SetSequence(*i)
	}
	return iec
}

// SetIsDraft sets the "is_draft" field.
func (iec *IncidentEventCreate) SetIsDraft(b bool) *IncidentEventCreate {
	iec.mutation.SetIsDraft(b)
	return iec
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (iec *IncidentEventCreate) SetNillableIsDraft(b *bool) *IncidentEventCreate {
	if b != nil {
		iec.SetIsDraft(*b)
	}
	return iec
}

// SetID sets the "id" field.
func (iec *IncidentEventCreate) SetID(u uuid.UUID) *IncidentEventCreate {
	iec.mutation.SetID(u)
	return iec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iec *IncidentEventCreate) SetNillableID(u *uuid.UUID) *IncidentEventCreate {
	if u != nil {
		iec.SetID(*u)
	}
	return iec
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iec *IncidentEventCreate) SetTenant(t *Tenant) *IncidentEventCreate {
	return iec.SetTenantID(t.ID)
}

// SetIncident sets the "incident" edge to the Incident entity.
func (iec *IncidentEventCreate) SetIncident(i *Incident) *IncidentEventCreate {
	return iec.SetIncidentID(i.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (iec *IncidentEventCreate) SetEvent(e *Event) *IncidentEventCreate {
	return iec.SetEventID(e.ID)
}

// SetContextID sets the "context" edge to the IncidentEventContext entity by ID.
func (iec *IncidentEventCreate) SetContextID(id uuid.UUID) *IncidentEventCreate {
	iec.mutation.SetContextID(id)
	return iec
}

// SetNillableContextID sets the "context" edge to the IncidentEventContext entity by ID if the given value is not nil.
func (iec *IncidentEventCreate) SetNillableContextID(id *uuid.UUID) *IncidentEventCreate {
	if id != nil {
		iec = iec.SetContextID(*id)
	}
	return iec
}

// SetContext sets the "context" edge to the IncidentEventContext entity.
func (iec *IncidentEventCreate) SetContext(i *IncidentEventContext) *IncidentEventCreate {
	return iec.SetContextID(i.ID)
}

// AddFactorIDs adds the "factors" edge to the IncidentEventContributingFactor entity by IDs.
func (iec *IncidentEventCreate) AddFactorIDs(ids ...uuid.UUID) *IncidentEventCreate {
	iec.mutation.AddFactorIDs(ids...)
	return iec
}

// AddFactors adds the "factors" edges to the IncidentEventContributingFactor entity.
func (iec *IncidentEventCreate) AddFactors(i ...*IncidentEventContributingFactor) *IncidentEventCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iec.AddFactorIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the IncidentEventEvidence entity by IDs.
func (iec *IncidentEventCreate) AddEvidenceIDs(ids ...uuid.UUID) *IncidentEventCreate {
	iec.mutation.AddEvidenceIDs(ids...)
	return iec
}

// AddEvidence adds the "evidence" edges to the IncidentEventEvidence entity.
func (iec *IncidentEventCreate) AddEvidence(i ...*IncidentEventEvidence) *IncidentEventCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iec.AddEvidenceIDs(ids...)
}

// AddSystemComponentIDs adds the "system_components" edge to the SystemComponent entity by IDs.
func (iec *IncidentEventCreate) AddSystemComponentIDs(ids ...uuid.UUID) *IncidentEventCreate {
	iec.mutation.AddSystemComponentIDs(ids...)
	return iec
}

// AddSystemComponents adds the "system_components" edges to the SystemComponent entity.
func (iec *IncidentEventCreate) AddSystemComponents(s ...*SystemComponent) *IncidentEventCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iec.AddSystemComponentIDs(ids...)
}

// AddEventComponentIDs adds the "event_components" edge to the IncidentEventSystemComponent entity by IDs.
func (iec *IncidentEventCreate) AddEventComponentIDs(ids ...uuid.UUID) *IncidentEventCreate {
	iec.mutation.AddEventComponentIDs(ids...)
	return iec
}

// AddEventComponents adds the "event_components" edges to the IncidentEventSystemComponent entity.
func (iec *IncidentEventCreate) AddEventComponents(i ...*IncidentEventSystemComponent) *IncidentEventCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iec.AddEventComponentIDs(ids...)
}

// Mutation returns the IncidentEventMutation object of the builder.
func (iec *IncidentEventCreate) Mutation() *IncidentEventMutation {
	return iec.mutation
}

// Save creates the IncidentEvent in the database.
func (iec *IncidentEventCreate) Save(ctx context.Context) (*IncidentEvent, error) {
	if err := iec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iec.sqlSave, iec.mutation, iec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iec *IncidentEventCreate) SaveX(ctx context.Context) *IncidentEvent {
	v, err := iec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iec *IncidentEventCreate) Exec(ctx context.Context) error {
	_, err := iec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iec *IncidentEventCreate) ExecX(ctx context.Context) {
	if err := iec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iec *IncidentEventCreate) defaults() error {
	if _, ok := iec.mutation.IsKey(); !ok {
		v := incidentevent.DefaultIsKey
		iec.mutation.SetIsKey(v)
	}
	if _, ok := iec.mutation.CreatedAt(); !ok {
		if incidentevent.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized incidentevent.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := incidentevent.DefaultCreatedAt()
		iec.mutation.SetCreatedAt(v)
	}
	if _, ok := iec.mutation.UpdatedAt(); !ok {
		if incidentevent.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized incidentevent.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := incidentevent.DefaultUpdatedAt()
		iec.mutation.SetUpdatedAt(v)
	}
	if _, ok := iec.mutation.Sequence(); !ok {
		v := incidentevent.DefaultSequence
		iec.mutation.SetSequence(v)
	}
	if _, ok := iec.mutation.IsDraft(); !ok {
		v := incidentevent.DefaultIsDraft
		iec.mutation.SetIsDraft(v)
	}
	if _, ok := iec.mutation.ID(); !ok {
		if incidentevent.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized incidentevent.DefaultID (forgotten import ent/runtime?)")
		}
		v := incidentevent.DefaultID()
		iec.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iec *IncidentEventCreate) check() error {
	if _, ok := iec.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "IncidentEvent.tenant_id"`)}
	}
	if _, ok := iec.mutation.IncidentID(); !ok {
		return &ValidationError{Name: "incident_id", err: errors.New(`ent: missing required field "IncidentEvent.incident_id"`)}
	}
	if _, ok := iec.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "IncidentEvent.timestamp"`)}
	}
	if _, ok := iec.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "IncidentEvent.kind"`)}
	}
	if v, ok := iec.mutation.Kind(); ok {
		if err := incidentevent.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "IncidentEvent.kind": %w`, err)}
		}
	}
	if _, ok := iec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "IncidentEvent.title"`)}
	}
	if v, ok := iec.mutation.Title(); ok {
		if err := incidentevent.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IncidentEvent.title": %w`, err)}
		}
	}
	if _, ok := iec.mutation.IsKey(); !ok {
		return &ValidationError{Name: "is_key", err: errors.New(`ent: missing required field "IncidentEvent.is_key"`)}
	}
	if _, ok := iec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IncidentEvent.created_at"`)}
	}
	if _, ok := iec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IncidentEvent.updated_at"`)}
	}
	if _, ok := iec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "IncidentEvent.created_by"`)}
	}
	if _, ok := iec.mutation.Sequence(); !ok {
		return &ValidationError{Name: "sequence", err: errors.New(`ent: missing required field "IncidentEvent.sequence"`)}
	}
	if _, ok := iec.mutation.IsDraft(); !ok {
		return &ValidationError{Name: "is_draft", err: errors.New(`ent: missing required field "IncidentEvent.is_draft"`)}
	}
	if len(iec.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "IncidentEvent.tenant"`)}
	}
	if len(iec.mutation.IncidentIDs()) == 0 {
		return &ValidationError{Name: "incident", err: errors.New(`ent: missing required edge "IncidentEvent.incident"`)}
	}
	return nil
}

func (iec *IncidentEventCreate) sqlSave(ctx context.Context) (*IncidentEvent, error) {
	if err := iec.check(); err != nil {
		return nil, err
	}
	_node, _spec := iec.createSpec()
	if err := sqlgraph.CreateNode(ctx, iec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iec.mutation.id = &_node.ID
	iec.mutation.done = true
	return _node, nil
}

func (iec *IncidentEventCreate) createSpec() (*IncidentEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentEvent{config: iec.config}
		_spec = sqlgraph.NewCreateSpec(incidentevent.Table, sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = iec.conflict
	if id, ok := iec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iec.mutation.Timestamp(); ok {
		_spec.SetField(incidentevent.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := iec.mutation.Kind(); ok {
		_spec.SetField(incidentevent.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := iec.mutation.Title(); ok {
		_spec.SetField(incidentevent.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := iec.mutation.Description(); ok {
		_spec.SetField(incidentevent.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := iec.mutation.IsKey(); ok {
		_spec.SetField(incidentevent.FieldIsKey, field.TypeBool, value)
		_node.IsKey = value
	}
	if value, ok := iec.mutation.CreatedAt(); ok {
		_spec.SetField(incidentevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iec.mutation.UpdatedAt(); ok {
		_spec.SetField(incidentevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := iec.mutation.CreatedBy(); ok {
		_spec.SetField(incidentevent.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := iec.mutation.Sequence(); ok {
		_spec.SetField(incidentevent.FieldSequence, field.TypeInt, value)
		_node.Sequence = value
	}
	if value, ok := iec.mutation.IsDraft(); ok {
		_spec.SetField(incidentevent.FieldIsDraft, field.TypeBool, value)
		_node.IsDraft = value
	}
	if nodes := iec.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentevent.TenantTable,
			Columns: []string{incidentevent.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentevent.IncidentTable,
			Columns: []string{incidentevent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IncidentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentevent.EventTable,
			Columns: []string{incidentevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.ContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidentevent.ContextTable,
			Columns: []string{incidentevent.ContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontext.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.FactorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.FactorsTable,
			Columns: []string{incidentevent.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.EvidenceTable,
			Columns: []string{incidentevent.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.SystemComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentevent.SystemComponentsTable,
			Columns: incidentevent.SystemComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentEventSystemComponentCreate{config: iec.config, mutation: newIncidentEventSystemComponentMutation(iec.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.EventComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentevent.EventComponentsTable,
			Columns: []string{incidentevent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentEvent.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentEventUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (iec *IncidentEventCreate) OnConflict(opts ...sql.ConflictOption) *IncidentEventUpsertOne {
	iec.conflict = opts
	return &IncidentEventUpsertOne{
		create: iec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iec *IncidentEventCreate) OnConflictColumns(columns ...string) *IncidentEventUpsertOne {
	iec.conflict = append(iec.conflict, sql.ConflictColumns(columns...))
	return &IncidentEventUpsertOne{
		create: iec,
	}
}

type (
	// IncidentEventUpsertOne is the builder for "upsert"-ing
	//  one IncidentEvent node.
	IncidentEventUpsertOne struct {
		create *IncidentEventCreate
	}

	// IncidentEventUpsert is the "OnConflict" setter.
	IncidentEventUpsert struct {
		*sql.UpdateSet
	}
)

// SetIncidentID sets the "incident_id" field.
func (u *IncidentEventUpsert) SetIncidentID(v uuid.UUID) *IncidentEventUpsert {
	u.Set(incidentevent.FieldIncidentID, v)
	return u
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateIncidentID() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldIncidentID)
	return u
}

// SetEventID sets the "event_id" field.
func (u *IncidentEventUpsert) SetEventID(v uuid.UUID) *IncidentEventUpsert {
	u.Set(incidentevent.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateEventID() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldEventID)
	return u
}

// ClearEventID clears the value of the "event_id" field.
func (u *IncidentEventUpsert) ClearEventID() *IncidentEventUpsert {
	u.SetNull(incidentevent.FieldEventID)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *IncidentEventUpsert) SetTimestamp(v time.Time) *IncidentEventUpsert {
	u.Set(incidentevent.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateTimestamp() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldTimestamp)
	return u
}

// SetKind sets the "kind" field.
func (u *IncidentEventUpsert) SetKind(v incidentevent.Kind) *IncidentEventUpsert {
	u.Set(incidentevent.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateKind() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldKind)
	return u
}

// SetTitle sets the "title" field.
func (u *IncidentEventUpsert) SetTitle(v string) *IncidentEventUpsert {
	u.Set(incidentevent.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateTitle() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *IncidentEventUpsert) SetDescription(v string) *IncidentEventUpsert {
	u.Set(incidentevent.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateDescription() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentEventUpsert) ClearDescription() *IncidentEventUpsert {
	u.SetNull(incidentevent.FieldDescription)
	return u
}

// SetIsKey sets the "is_key" field.
func (u *IncidentEventUpsert) SetIsKey(v bool) *IncidentEventUpsert {
	u.Set(incidentevent.FieldIsKey, v)
	return u
}

// UpdateIsKey sets the "is_key" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateIsKey() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldIsKey)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventUpsert) SetCreatedAt(v time.Time) *IncidentEventUpsert {
	u.Set(incidentevent.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateCreatedAt() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IncidentEventUpsert) SetUpdatedAt(v time.Time) *IncidentEventUpsert {
	u.Set(incidentevent.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateUpdatedAt() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *IncidentEventUpsert) SetCreatedBy(v uuid.UUID) *IncidentEventUpsert {
	u.Set(incidentevent.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateCreatedBy() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldCreatedBy)
	return u
}

// SetSequence sets the "sequence" field.
func (u *IncidentEventUpsert) SetSequence(v int) *IncidentEventUpsert {
	u.Set(incidentevent.FieldSequence, v)
	return u
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateSequence() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldSequence)
	return u
}

// AddSequence adds v to the "sequence" field.
func (u *IncidentEventUpsert) AddSequence(v int) *IncidentEventUpsert {
	u.Add(incidentevent.FieldSequence, v)
	return u
}

// SetIsDraft sets the "is_draft" field.
func (u *IncidentEventUpsert) SetIsDraft(v bool) *IncidentEventUpsert {
	u.Set(incidentevent.FieldIsDraft, v)
	return u
}

// UpdateIsDraft sets the "is_draft" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateIsDraft() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldIsDraft)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentEventUpsertOne) UpdateNewValues() *IncidentEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidentevent.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(incidentevent.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentEventUpsertOne) Ignore() *IncidentEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentEventUpsertOne) DoNothing() *IncidentEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentEventCreate.OnConflict
// documentation for more info.
func (u *IncidentEventUpsertOne) Update(set func(*IncidentEventUpsert)) *IncidentEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentEventUpsertOne) SetIncidentID(v uuid.UUID) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateIncidentID() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateIncidentID()
	})
}

// SetEventID sets the "event_id" field.
func (u *IncidentEventUpsertOne) SetEventID(v uuid.UUID) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateEventID() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *IncidentEventUpsertOne) ClearEventID() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.ClearEventID()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *IncidentEventUpsertOne) SetTimestamp(v time.Time) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateTimestamp() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateTimestamp()
	})
}

// SetKind sets the "kind" field.
func (u *IncidentEventUpsertOne) SetKind(v incidentevent.Kind) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateKind() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateKind()
	})
}

// SetTitle sets the "title" field.
func (u *IncidentEventUpsertOne) SetTitle(v string) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateTitle() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *IncidentEventUpsertOne) SetDescription(v string) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateDescription() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentEventUpsertOne) ClearDescription() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.ClearDescription()
	})
}

// SetIsKey sets the "is_key" field.
func (u *IncidentEventUpsertOne) SetIsKey(v bool) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetIsKey(v)
	})
}

// UpdateIsKey sets the "is_key" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateIsKey() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateIsKey()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventUpsertOne) SetCreatedAt(v time.Time) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateCreatedAt() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IncidentEventUpsertOne) SetUpdatedAt(v time.Time) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateUpdatedAt() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *IncidentEventUpsertOne) SetCreatedBy(v uuid.UUID) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateCreatedBy() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetSequence sets the "sequence" field.
func (u *IncidentEventUpsertOne) SetSequence(v int) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetSequence(v)
	})
}

// AddSequence adds v to the "sequence" field.
func (u *IncidentEventUpsertOne) AddSequence(v int) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.AddSequence(v)
	})
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateSequence() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateSequence()
	})
}

// SetIsDraft sets the "is_draft" field.
func (u *IncidentEventUpsertOne) SetIsDraft(v bool) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetIsDraft(v)
	})
}

// UpdateIsDraft sets the "is_draft" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateIsDraft() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateIsDraft()
	})
}

// Exec executes the query.
func (u *IncidentEventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentEventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentEventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentEventUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentEventUpsertOne.ID is not supported by MySQL driver. Use IncidentEventUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentEventUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentEventCreateBulk is the builder for creating many IncidentEvent entities in bulk.
type IncidentEventCreateBulk struct {
	config
	err      error
	builders []*IncidentEventCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentEvent entities in the database.
func (iecb *IncidentEventCreateBulk) Save(ctx context.Context) ([]*IncidentEvent, error) {
	if iecb.err != nil {
		return nil, iecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iecb.builders))
	nodes := make([]*IncidentEvent, len(iecb.builders))
	mutators := make([]Mutator, len(iecb.builders))
	for i := range iecb.builders {
		func(i int, root context.Context) {
			builder := iecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iecb *IncidentEventCreateBulk) SaveX(ctx context.Context) []*IncidentEvent {
	v, err := iecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iecb *IncidentEventCreateBulk) Exec(ctx context.Context) error {
	_, err := iecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecb *IncidentEventCreateBulk) ExecX(ctx context.Context) {
	if err := iecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentEvent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentEventUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (iecb *IncidentEventCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentEventUpsertBulk {
	iecb.conflict = opts
	return &IncidentEventUpsertBulk{
		create: iecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iecb *IncidentEventCreateBulk) OnConflictColumns(columns ...string) *IncidentEventUpsertBulk {
	iecb.conflict = append(iecb.conflict, sql.ConflictColumns(columns...))
	return &IncidentEventUpsertBulk{
		create: iecb,
	}
}

// IncidentEventUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentEvent nodes.
type IncidentEventUpsertBulk struct {
	create *IncidentEventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentEventUpsertBulk) UpdateNewValues() *IncidentEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidentevent.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(incidentevent.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentEventUpsertBulk) Ignore() *IncidentEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentEventUpsertBulk) DoNothing() *IncidentEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentEventCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentEventUpsertBulk) Update(set func(*IncidentEventUpsert)) *IncidentEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentEventUpsertBulk) SetIncidentID(v uuid.UUID) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateIncidentID() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateIncidentID()
	})
}

// SetEventID sets the "event_id" field.
func (u *IncidentEventUpsertBulk) SetEventID(v uuid.UUID) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateEventID() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *IncidentEventUpsertBulk) ClearEventID() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.ClearEventID()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *IncidentEventUpsertBulk) SetTimestamp(v time.Time) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateTimestamp() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateTimestamp()
	})
}

// SetKind sets the "kind" field.
func (u *IncidentEventUpsertBulk) SetKind(v incidentevent.Kind) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateKind() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateKind()
	})
}

// SetTitle sets the "title" field.
func (u *IncidentEventUpsertBulk) SetTitle(v string) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateTitle() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *IncidentEventUpsertBulk) SetDescription(v string) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateDescription() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentEventUpsertBulk) ClearDescription() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.ClearDescription()
	})
}

// SetIsKey sets the "is_key" field.
func (u *IncidentEventUpsertBulk) SetIsKey(v bool) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetIsKey(v)
	})
}

// UpdateIsKey sets the "is_key" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateIsKey() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateIsKey()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventUpsertBulk) SetCreatedAt(v time.Time) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateCreatedAt() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IncidentEventUpsertBulk) SetUpdatedAt(v time.Time) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateUpdatedAt() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *IncidentEventUpsertBulk) SetCreatedBy(v uuid.UUID) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateCreatedBy() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetSequence sets the "sequence" field.
func (u *IncidentEventUpsertBulk) SetSequence(v int) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetSequence(v)
	})
}

// AddSequence adds v to the "sequence" field.
func (u *IncidentEventUpsertBulk) AddSequence(v int) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.AddSequence(v)
	})
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateSequence() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateSequence()
	})
}

// SetIsDraft sets the "is_draft" field.
func (u *IncidentEventUpsertBulk) SetIsDraft(v bool) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetIsDraft(v)
	})
}

// UpdateIsDraft sets the "is_draft" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateIsDraft() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateIsDraft()
	})
}

// Exec executes the query.
func (u *IncidentEventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentEventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentEventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentEventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
