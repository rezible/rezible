// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/alertfeedback"
	"github.com/rezible/rezible/ent/alertinstance"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/predicate"
)

// AlertInstanceUpdate is the builder for updating AlertInstance entities.
type AlertInstanceUpdate struct {
	config
	hooks     []Hook
	mutation  *AlertInstanceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AlertInstanceUpdate builder.
func (aiu *AlertInstanceUpdate) Where(ps ...predicate.AlertInstance) *AlertInstanceUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetAlertID sets the "alert_id" field.
func (aiu *AlertInstanceUpdate) SetAlertID(u uuid.UUID) *AlertInstanceUpdate {
	aiu.mutation.SetAlertID(u)
	return aiu
}

// SetNillableAlertID sets the "alert_id" field if the given value is not nil.
func (aiu *AlertInstanceUpdate) SetNillableAlertID(u *uuid.UUID) *AlertInstanceUpdate {
	if u != nil {
		aiu.SetAlertID(*u)
	}
	return aiu
}

// SetEventID sets the "event_id" field.
func (aiu *AlertInstanceUpdate) SetEventID(u uuid.UUID) *AlertInstanceUpdate {
	aiu.mutation.SetEventID(u)
	return aiu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (aiu *AlertInstanceUpdate) SetNillableEventID(u *uuid.UUID) *AlertInstanceUpdate {
	if u != nil {
		aiu.SetEventID(*u)
	}
	return aiu
}

// SetProviderID sets the "provider_id" field.
func (aiu *AlertInstanceUpdate) SetProviderID(s string) *AlertInstanceUpdate {
	aiu.mutation.SetProviderID(s)
	return aiu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (aiu *AlertInstanceUpdate) SetNillableProviderID(s *string) *AlertInstanceUpdate {
	if s != nil {
		aiu.SetProviderID(*s)
	}
	return aiu
}

// SetAcknowledgedAt sets the "acknowledged_at" field.
func (aiu *AlertInstanceUpdate) SetAcknowledgedAt(t time.Time) *AlertInstanceUpdate {
	aiu.mutation.SetAcknowledgedAt(t)
	return aiu
}

// SetNillableAcknowledgedAt sets the "acknowledged_at" field if the given value is not nil.
func (aiu *AlertInstanceUpdate) SetNillableAcknowledgedAt(t *time.Time) *AlertInstanceUpdate {
	if t != nil {
		aiu.SetAcknowledgedAt(*t)
	}
	return aiu
}

// ClearAcknowledgedAt clears the value of the "acknowledged_at" field.
func (aiu *AlertInstanceUpdate) ClearAcknowledgedAt() *AlertInstanceUpdate {
	aiu.mutation.ClearAcknowledgedAt()
	return aiu
}

// SetAlert sets the "alert" edge to the Alert entity.
func (aiu *AlertInstanceUpdate) SetAlert(a *Alert) *AlertInstanceUpdate {
	return aiu.SetAlertID(a.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (aiu *AlertInstanceUpdate) SetEvent(e *Event) *AlertInstanceUpdate {
	return aiu.SetEventID(e.ID)
}

// SetFeedbackID sets the "feedback" edge to the AlertFeedback entity by ID.
func (aiu *AlertInstanceUpdate) SetFeedbackID(id uuid.UUID) *AlertInstanceUpdate {
	aiu.mutation.SetFeedbackID(id)
	return aiu
}

// SetNillableFeedbackID sets the "feedback" edge to the AlertFeedback entity by ID if the given value is not nil.
func (aiu *AlertInstanceUpdate) SetNillableFeedbackID(id *uuid.UUID) *AlertInstanceUpdate {
	if id != nil {
		aiu = aiu.SetFeedbackID(*id)
	}
	return aiu
}

// SetFeedback sets the "feedback" edge to the AlertFeedback entity.
func (aiu *AlertInstanceUpdate) SetFeedback(a *AlertFeedback) *AlertInstanceUpdate {
	return aiu.SetFeedbackID(a.ID)
}

// Mutation returns the AlertInstanceMutation object of the builder.
func (aiu *AlertInstanceUpdate) Mutation() *AlertInstanceMutation {
	return aiu.mutation
}

// ClearAlert clears the "alert" edge to the Alert entity.
func (aiu *AlertInstanceUpdate) ClearAlert() *AlertInstanceUpdate {
	aiu.mutation.ClearAlert()
	return aiu
}

// ClearEvent clears the "event" edge to the Event entity.
func (aiu *AlertInstanceUpdate) ClearEvent() *AlertInstanceUpdate {
	aiu.mutation.ClearEvent()
	return aiu
}

// ClearFeedback clears the "feedback" edge to the AlertFeedback entity.
func (aiu *AlertInstanceUpdate) ClearFeedback() *AlertInstanceUpdate {
	aiu.mutation.ClearFeedback()
	return aiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *AlertInstanceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aiu.sqlSave, aiu.mutation, aiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *AlertInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *AlertInstanceUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *AlertInstanceUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiu *AlertInstanceUpdate) check() error {
	if aiu.mutation.TenantCleared() && len(aiu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AlertInstance.tenant"`)
	}
	if aiu.mutation.AlertCleared() && len(aiu.mutation.AlertIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AlertInstance.alert"`)
	}
	if aiu.mutation.EventCleared() && len(aiu.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AlertInstance.event"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aiu *AlertInstanceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlertInstanceUpdate {
	aiu.modifiers = append(aiu.modifiers, modifiers...)
	return aiu
}

func (aiu *AlertInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(alertinstance.Table, alertinstance.Columns, sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID))
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.ProviderID(); ok {
		_spec.SetField(alertinstance.FieldProviderID, field.TypeString, value)
	}
	if value, ok := aiu.mutation.AcknowledgedAt(); ok {
		_spec.SetField(alertinstance.FieldAcknowledgedAt, field.TypeTime, value)
	}
	if aiu.mutation.AcknowledgedAtCleared() {
		_spec.ClearField(alertinstance.FieldAcknowledgedAt, field.TypeTime)
	}
	if aiu.mutation.AlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.AlertTable,
			Columns: []string{alertinstance.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.AlertTable,
			Columns: []string{alertinstance.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.EventTable,
			Columns: []string{alertinstance.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.EventTable,
			Columns: []string{alertinstance.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.FeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.FeedbackTable,
			Columns: []string{alertinstance.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertfeedback.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.FeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.FeedbackTable,
			Columns: []string{alertinstance.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aiu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alertinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aiu.mutation.done = true
	return n, nil
}

// AlertInstanceUpdateOne is the builder for updating a single AlertInstance entity.
type AlertInstanceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AlertInstanceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAlertID sets the "alert_id" field.
func (aiuo *AlertInstanceUpdateOne) SetAlertID(u uuid.UUID) *AlertInstanceUpdateOne {
	aiuo.mutation.SetAlertID(u)
	return aiuo
}

// SetNillableAlertID sets the "alert_id" field if the given value is not nil.
func (aiuo *AlertInstanceUpdateOne) SetNillableAlertID(u *uuid.UUID) *AlertInstanceUpdateOne {
	if u != nil {
		aiuo.SetAlertID(*u)
	}
	return aiuo
}

// SetEventID sets the "event_id" field.
func (aiuo *AlertInstanceUpdateOne) SetEventID(u uuid.UUID) *AlertInstanceUpdateOne {
	aiuo.mutation.SetEventID(u)
	return aiuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (aiuo *AlertInstanceUpdateOne) SetNillableEventID(u *uuid.UUID) *AlertInstanceUpdateOne {
	if u != nil {
		aiuo.SetEventID(*u)
	}
	return aiuo
}

// SetProviderID sets the "provider_id" field.
func (aiuo *AlertInstanceUpdateOne) SetProviderID(s string) *AlertInstanceUpdateOne {
	aiuo.mutation.SetProviderID(s)
	return aiuo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (aiuo *AlertInstanceUpdateOne) SetNillableProviderID(s *string) *AlertInstanceUpdateOne {
	if s != nil {
		aiuo.SetProviderID(*s)
	}
	return aiuo
}

// SetAcknowledgedAt sets the "acknowledged_at" field.
func (aiuo *AlertInstanceUpdateOne) SetAcknowledgedAt(t time.Time) *AlertInstanceUpdateOne {
	aiuo.mutation.SetAcknowledgedAt(t)
	return aiuo
}

// SetNillableAcknowledgedAt sets the "acknowledged_at" field if the given value is not nil.
func (aiuo *AlertInstanceUpdateOne) SetNillableAcknowledgedAt(t *time.Time) *AlertInstanceUpdateOne {
	if t != nil {
		aiuo.SetAcknowledgedAt(*t)
	}
	return aiuo
}

// ClearAcknowledgedAt clears the value of the "acknowledged_at" field.
func (aiuo *AlertInstanceUpdateOne) ClearAcknowledgedAt() *AlertInstanceUpdateOne {
	aiuo.mutation.ClearAcknowledgedAt()
	return aiuo
}

// SetAlert sets the "alert" edge to the Alert entity.
func (aiuo *AlertInstanceUpdateOne) SetAlert(a *Alert) *AlertInstanceUpdateOne {
	return aiuo.SetAlertID(a.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (aiuo *AlertInstanceUpdateOne) SetEvent(e *Event) *AlertInstanceUpdateOne {
	return aiuo.SetEventID(e.ID)
}

// SetFeedbackID sets the "feedback" edge to the AlertFeedback entity by ID.
func (aiuo *AlertInstanceUpdateOne) SetFeedbackID(id uuid.UUID) *AlertInstanceUpdateOne {
	aiuo.mutation.SetFeedbackID(id)
	return aiuo
}

// SetNillableFeedbackID sets the "feedback" edge to the AlertFeedback entity by ID if the given value is not nil.
func (aiuo *AlertInstanceUpdateOne) SetNillableFeedbackID(id *uuid.UUID) *AlertInstanceUpdateOne {
	if id != nil {
		aiuo = aiuo.SetFeedbackID(*id)
	}
	return aiuo
}

// SetFeedback sets the "feedback" edge to the AlertFeedback entity.
func (aiuo *AlertInstanceUpdateOne) SetFeedback(a *AlertFeedback) *AlertInstanceUpdateOne {
	return aiuo.SetFeedbackID(a.ID)
}

// Mutation returns the AlertInstanceMutation object of the builder.
func (aiuo *AlertInstanceUpdateOne) Mutation() *AlertInstanceMutation {
	return aiuo.mutation
}

// ClearAlert clears the "alert" edge to the Alert entity.
func (aiuo *AlertInstanceUpdateOne) ClearAlert() *AlertInstanceUpdateOne {
	aiuo.mutation.ClearAlert()
	return aiuo
}

// ClearEvent clears the "event" edge to the Event entity.
func (aiuo *AlertInstanceUpdateOne) ClearEvent() *AlertInstanceUpdateOne {
	aiuo.mutation.ClearEvent()
	return aiuo
}

// ClearFeedback clears the "feedback" edge to the AlertFeedback entity.
func (aiuo *AlertInstanceUpdateOne) ClearFeedback() *AlertInstanceUpdateOne {
	aiuo.mutation.ClearFeedback()
	return aiuo
}

// Where appends a list predicates to the AlertInstanceUpdate builder.
func (aiuo *AlertInstanceUpdateOne) Where(ps ...predicate.AlertInstance) *AlertInstanceUpdateOne {
	aiuo.mutation.Where(ps...)
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *AlertInstanceUpdateOne) Select(field string, fields ...string) *AlertInstanceUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated AlertInstance entity.
func (aiuo *AlertInstanceUpdateOne) Save(ctx context.Context) (*AlertInstance, error) {
	return withHooks(ctx, aiuo.sqlSave, aiuo.mutation, aiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *AlertInstanceUpdateOne) SaveX(ctx context.Context) *AlertInstance {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *AlertInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *AlertInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiuo *AlertInstanceUpdateOne) check() error {
	if aiuo.mutation.TenantCleared() && len(aiuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AlertInstance.tenant"`)
	}
	if aiuo.mutation.AlertCleared() && len(aiuo.mutation.AlertIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AlertInstance.alert"`)
	}
	if aiuo.mutation.EventCleared() && len(aiuo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AlertInstance.event"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aiuo *AlertInstanceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlertInstanceUpdateOne {
	aiuo.modifiers = append(aiuo.modifiers, modifiers...)
	return aiuo
}

func (aiuo *AlertInstanceUpdateOne) sqlSave(ctx context.Context) (_node *AlertInstance, err error) {
	if err := aiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(alertinstance.Table, alertinstance.Columns, sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID))
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AlertInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alertinstance.FieldID)
		for _, f := range fields {
			if !alertinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != alertinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.ProviderID(); ok {
		_spec.SetField(alertinstance.FieldProviderID, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.AcknowledgedAt(); ok {
		_spec.SetField(alertinstance.FieldAcknowledgedAt, field.TypeTime, value)
	}
	if aiuo.mutation.AcknowledgedAtCleared() {
		_spec.ClearField(alertinstance.FieldAcknowledgedAt, field.TypeTime)
	}
	if aiuo.mutation.AlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.AlertTable,
			Columns: []string{alertinstance.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.AlertTable,
			Columns: []string{alertinstance.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.EventTable,
			Columns: []string{alertinstance.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.EventTable,
			Columns: []string{alertinstance.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.FeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.FeedbackTable,
			Columns: []string{alertinstance.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertfeedback.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.FeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.FeedbackTable,
			Columns: []string{alertinstance.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aiuo.modifiers...)
	_node = &AlertInstance{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alertinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aiuo.mutation.done = true
	return _node, nil
}
