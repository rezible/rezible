// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AlertsColumns holds the columns for the "alerts" table.
	AlertsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "definition", Type: field.TypeString, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "roster_id", Type: field.TypeUUID, Nullable: true},
	}
	// AlertsTable holds the schema information for the "alerts" table.
	AlertsTable = &schema.Table{
		Name:       "alerts",
		Columns:    AlertsColumns,
		PrimaryKey: []*schema.Column{AlertsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "alerts_tenants_tenant",
				Columns:    []*schema.Column{AlertsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "alerts_oncall_rosters_alerts",
				Columns:    []*schema.Column{AlertsColumns[6]},
				RefColumns: []*schema.Column{OncallRostersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "alert_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{AlertsColumns[5]},
			},
		},
	}
	// AlertFeedbacksColumns holds the columns for the "alert_feedbacks" table.
	AlertFeedbacksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "actionable", Type: field.TypeBool},
		{Name: "accurate", Type: field.TypeEnum, Enums: []string{"yes", "no", "unknown"}},
		{Name: "documentation_available", Type: field.TypeBool},
		{Name: "documentation_needs_update", Type: field.TypeBool},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "alert_instance_id", Type: field.TypeUUID},
	}
	// AlertFeedbacksTable holds the schema information for the "alert_feedbacks" table.
	AlertFeedbacksTable = &schema.Table{
		Name:       "alert_feedbacks",
		Columns:    AlertFeedbacksColumns,
		PrimaryKey: []*schema.Column{AlertFeedbacksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "alert_feedbacks_tenants_tenant",
				Columns:    []*schema.Column{AlertFeedbacksColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "alert_feedbacks_alert_instances_alert_instance",
				Columns:    []*schema.Column{AlertFeedbacksColumns[6]},
				RefColumns: []*schema.Column{AlertInstancesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "alertfeedback_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{AlertFeedbacksColumns[5]},
			},
		},
	}
	// AlertInstancesColumns holds the columns for the "alert_instances" table.
	AlertInstancesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "acknowledged_at", Type: field.TypeTime, Nullable: true},
		{Name: "alert_instances", Type: field.TypeUUID, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "alert_id", Type: field.TypeUUID},
		{Name: "event_id", Type: field.TypeUUID},
		{Name: "alert_instance_feedback", Type: field.TypeUUID, Nullable: true},
	}
	// AlertInstancesTable holds the schema information for the "alert_instances" table.
	AlertInstancesTable = &schema.Table{
		Name:       "alert_instances",
		Columns:    AlertInstancesColumns,
		PrimaryKey: []*schema.Column{AlertInstancesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "alert_instances_alerts_instances",
				Columns:    []*schema.Column{AlertInstancesColumns[3]},
				RefColumns: []*schema.Column{AlertsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "alert_instances_tenants_tenant",
				Columns:    []*schema.Column{AlertInstancesColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "alert_instances_alerts_alert",
				Columns:    []*schema.Column{AlertInstancesColumns[5]},
				RefColumns: []*schema.Column{AlertsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "alert_instances_events_event",
				Columns:    []*schema.Column{AlertInstancesColumns[6]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "alert_instances_alert_feedbacks_feedback",
				Columns:    []*schema.Column{AlertInstancesColumns[7]},
				RefColumns: []*schema.Column{AlertFeedbacksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "alertinstance_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{AlertInstancesColumns[4]},
			},
		},
	}
	// DocumentsColumns holds the columns for the "documents" table.
	DocumentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "content", Type: field.TypeBytes},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// DocumentsTable holds the schema information for the "documents" table.
	DocumentsTable = &schema.Table{
		Name:       "documents",
		Columns:    DocumentsColumns,
		PrimaryKey: []*schema.Column{DocumentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "documents_tenants_tenant",
				Columns:    []*schema.Column{DocumentsColumns[2]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "document_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{DocumentsColumns[2]},
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "kind", Type: field.TypeEnum, Enums: []string{"alert", "interrupt", "message", "other"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_tenants_tenant",
				Columns:    []*schema.Column{EventsColumns[7]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "event_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{EventsColumns[7]},
			},
		},
	}
	// EventAnnotationsColumns holds the columns for the "event_annotations" table.
	EventAnnotationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "minutes_occupied", Type: field.TypeInt},
		{Name: "notes", Type: field.TypeString, Size: 2147483647},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "event_id", Type: field.TypeUUID},
		{Name: "creator_id", Type: field.TypeUUID},
	}
	// EventAnnotationsTable holds the schema information for the "event_annotations" table.
	EventAnnotationsTable = &schema.Table{
		Name:       "event_annotations",
		Columns:    EventAnnotationsColumns,
		PrimaryKey: []*schema.Column{EventAnnotationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_annotations_tenants_tenant",
				Columns:    []*schema.Column{EventAnnotationsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "event_annotations_events_event",
				Columns:    []*schema.Column{EventAnnotationsColumns[6]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "event_annotations_users_creator",
				Columns:    []*schema.Column{EventAnnotationsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "eventannotation_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{EventAnnotationsColumns[5]},
			},
		},
	}
	// IncidentsColumns holds the columns for the "incidents" table.
	IncidentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "private", Type: field.TypeBool, Default: false},
		{Name: "summary", Type: field.TypeString},
		{Name: "opened_at", Type: field.TypeTime},
		{Name: "modified_at", Type: field.TypeTime},
		{Name: "closed_at", Type: field.TypeTime},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "chat_channel_id", Type: field.TypeString, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "severity_id", Type: field.TypeUUID, Nullable: true},
		{Name: "type_id", Type: field.TypeUUID, Nullable: true},
	}
	// IncidentsTable holds the schema information for the "incidents" table.
	IncidentsTable = &schema.Table{
		Name:       "incidents",
		Columns:    IncidentsColumns,
		PrimaryKey: []*schema.Column{IncidentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incidents_tenants_tenant",
				Columns:    []*schema.Column{IncidentsColumns[10]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incidents_incident_severities_severity",
				Columns:    []*schema.Column{IncidentsColumns[11]},
				RefColumns: []*schema.Column{IncidentSeveritiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "incidents_incident_types_type",
				Columns:    []*schema.Column{IncidentsColumns[12]},
				RefColumns: []*schema.Column{IncidentTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incident_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentsColumns[10]},
			},
		},
	}
	// IncidentDebriefsColumns holds the columns for the "incident_debriefs" table.
	IncidentDebriefsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "required", Type: field.TypeBool},
		{Name: "started", Type: field.TypeBool},
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// IncidentDebriefsTable holds the schema information for the "incident_debriefs" table.
	IncidentDebriefsTable = &schema.Table{
		Name:       "incident_debriefs",
		Columns:    IncidentDebriefsColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debriefs_incidents_debriefs",
				Columns:    []*schema.Column{IncidentDebriefsColumns[3]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_debriefs_tenants_tenant",
				Columns:    []*schema.Column{IncidentDebriefsColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_debriefs_users_incident_debriefs",
				Columns:    []*schema.Column{IncidentDebriefsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentdebrief_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentDebriefsColumns[4]},
			},
		},
	}
	// IncidentDebriefMessagesColumns holds the columns for the "incident_debrief_messages" table.
	IncidentDebriefMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"user", "assistant", "question"}},
		{Name: "requested_tool", Type: field.TypeEnum, Nullable: true, Enums: []string{"rating"}},
		{Name: "body", Type: field.TypeString, Size: 2147483647},
		{Name: "debrief_id", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "question_id", Type: field.TypeUUID, Nullable: true},
	}
	// IncidentDebriefMessagesTable holds the schema information for the "incident_debrief_messages" table.
	IncidentDebriefMessagesTable = &schema.Table{
		Name:       "incident_debrief_messages",
		Columns:    IncidentDebriefMessagesColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_messages_incident_debriefs_messages",
				Columns:    []*schema.Column{IncidentDebriefMessagesColumns[5]},
				RefColumns: []*schema.Column{IncidentDebriefsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_debrief_messages_tenants_tenant",
				Columns:    []*schema.Column{IncidentDebriefMessagesColumns[6]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_debrief_messages_incident_debrief_questions_from_question",
				Columns:    []*schema.Column{IncidentDebriefMessagesColumns[7]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentdebriefmessage_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentDebriefMessagesColumns[6]},
			},
		},
	}
	// IncidentDebriefQuestionsColumns holds the columns for the "incident_debrief_questions" table.
	IncidentDebriefQuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentDebriefQuestionsTable holds the schema information for the "incident_debrief_questions" table.
	IncidentDebriefQuestionsTable = &schema.Table{
		Name:       "incident_debrief_questions",
		Columns:    IncidentDebriefQuestionsColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_questions_tenants_tenant",
				Columns:    []*schema.Column{IncidentDebriefQuestionsColumns[2]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentdebriefquestion_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentDebriefQuestionsColumns[2]},
			},
		},
	}
	// IncidentDebriefSuggestionsColumns holds the columns for the "incident_debrief_suggestions" table.
	IncidentDebriefSuggestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "incident_debrief_suggestions", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentDebriefSuggestionsTable holds the schema information for the "incident_debrief_suggestions" table.
	IncidentDebriefSuggestionsTable = &schema.Table{
		Name:       "incident_debrief_suggestions",
		Columns:    IncidentDebriefSuggestionsColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefSuggestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_suggestions_incident_debriefs_suggestions",
				Columns:    []*schema.Column{IncidentDebriefSuggestionsColumns[2]},
				RefColumns: []*schema.Column{IncidentDebriefsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_debrief_suggestions_tenants_tenant",
				Columns:    []*schema.Column{IncidentDebriefSuggestionsColumns[3]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentdebriefsuggestion_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentDebriefSuggestionsColumns[3]},
			},
		},
	}
	// IncidentEventsColumns holds the columns for the "incident_events" table.
	IncidentEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "kind", Type: field.TypeEnum, Enums: []string{"observation", "action", "decision", "context"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "is_key", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "sequence", Type: field.TypeInt, Default: 0},
		{Name: "is_draft", Type: field.TypeBool, Default: false},
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "event_id", Type: field.TypeUUID, Nullable: true},
	}
	// IncidentEventsTable holds the schema information for the "incident_events" table.
	IncidentEventsTable = &schema.Table{
		Name:       "incident_events",
		Columns:    IncidentEventsColumns,
		PrimaryKey: []*schema.Column{IncidentEventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_events_incidents_events",
				Columns:    []*schema.Column{IncidentEventsColumns[11]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_events_tenants_tenant",
				Columns:    []*schema.Column{IncidentEventsColumns[12]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_events_events_event",
				Columns:    []*schema.Column{IncidentEventsColumns[13]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentevent_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentEventsColumns[12]},
			},
			{
				Name:    "incidentevent_incident_id_timestamp",
				Unique:  false,
				Columns: []*schema.Column{IncidentEventsColumns[11], IncidentEventsColumns[1]},
			},
			{
				Name:    "incidentevent_incident_id_timestamp_sequence",
				Unique:  true,
				Columns: []*schema.Column{IncidentEventsColumns[11], IncidentEventsColumns[1], IncidentEventsColumns[9]},
			},
		},
	}
	// IncidentEventContextsColumns holds the columns for the "incident_event_contexts" table.
	IncidentEventContextsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "system_state", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "decision_options", Type: field.TypeJSON, Nullable: true},
		{Name: "decision_rationale", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "involved_personnel", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "incident_event_context", Type: field.TypeUUID, Unique: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentEventContextsTable holds the schema information for the "incident_event_contexts" table.
	IncidentEventContextsTable = &schema.Table{
		Name:       "incident_event_contexts",
		Columns:    IncidentEventContextsColumns,
		PrimaryKey: []*schema.Column{IncidentEventContextsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_event_contexts_incident_events_context",
				Columns:    []*schema.Column{IncidentEventContextsColumns[6]},
				RefColumns: []*schema.Column{IncidentEventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_event_contexts_tenants_tenant",
				Columns:    []*schema.Column{IncidentEventContextsColumns[7]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidenteventcontext_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentEventContextsColumns[7]},
			},
		},
	}
	// IncidentEventContributingFactorsColumns holds the columns for the "incident_event_contributing_factors" table.
	IncidentEventContributingFactorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "factor_type", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "incident_event_factors", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentEventContributingFactorsTable holds the schema information for the "incident_event_contributing_factors" table.
	IncidentEventContributingFactorsTable = &schema.Table{
		Name:       "incident_event_contributing_factors",
		Columns:    IncidentEventContributingFactorsColumns,
		PrimaryKey: []*schema.Column{IncidentEventContributingFactorsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_event_contributing_factors_incident_events_factors",
				Columns:    []*schema.Column{IncidentEventContributingFactorsColumns[4]},
				RefColumns: []*schema.Column{IncidentEventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_event_contributing_factors_tenants_tenant",
				Columns:    []*schema.Column{IncidentEventContributingFactorsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidenteventcontributingfactor_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentEventContributingFactorsColumns[5]},
			},
		},
	}
	// IncidentEventEvidencesColumns holds the columns for the "incident_event_evidences" table.
	IncidentEventEvidencesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "evidence_type", Type: field.TypeEnum, Enums: []string{"log", "metric", "chat", "ticket", "other"}},
		{Name: "url", Type: field.TypeString},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "incident_event_evidence", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentEventEvidencesTable holds the schema information for the "incident_event_evidences" table.
	IncidentEventEvidencesTable = &schema.Table{
		Name:       "incident_event_evidences",
		Columns:    IncidentEventEvidencesColumns,
		PrimaryKey: []*schema.Column{IncidentEventEvidencesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_event_evidences_incident_events_evidence",
				Columns:    []*schema.Column{IncidentEventEvidencesColumns[6]},
				RefColumns: []*schema.Column{IncidentEventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_event_evidences_tenants_tenant",
				Columns:    []*schema.Column{IncidentEventEvidencesColumns[7]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidenteventevidence_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentEventEvidencesColumns[7]},
			},
		},
	}
	// IncidentEventSystemComponentsColumns holds the columns for the "incident_event_system_components" table.
	IncidentEventSystemComponentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "relationship", Type: field.TypeEnum, Enums: []string{"primary", "affected", "contributing"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "incident_event_id", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "system_component_id", Type: field.TypeUUID},
	}
	// IncidentEventSystemComponentsTable holds the schema information for the "incident_event_system_components" table.
	IncidentEventSystemComponentsTable = &schema.Table{
		Name:       "incident_event_system_components",
		Columns:    IncidentEventSystemComponentsColumns,
		PrimaryKey: []*schema.Column{IncidentEventSystemComponentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_event_system_components_tenants_tenant",
				Columns:    []*schema.Column{IncidentEventSystemComponentsColumns[3]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_event_system_components_incident_event_system_components_event",
				Columns:    []*schema.Column{IncidentEventSystemComponentsColumns[4]},
				RefColumns: []*schema.Column{IncidentEventSystemComponentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "incident_event_system_components_system_components_system_component",
				Columns:    []*schema.Column{IncidentEventSystemComponentsColumns[5]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidenteventsystemcomponent_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentEventSystemComponentsColumns[3]},
			},
			{
				Name:    "incidenteventsystemcomponent_incident_event_id_system_component_id",
				Unique:  true,
				Columns: []*schema.Column{IncidentEventSystemComponentsColumns[4], IncidentEventSystemComponentsColumns[5]},
			},
		},
	}
	// IncidentFieldsColumns holds the columns for the "incident_fields" table.
	IncidentFieldsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentFieldsTable holds the schema information for the "incident_fields" table.
	IncidentFieldsTable = &schema.Table{
		Name:       "incident_fields",
		Columns:    IncidentFieldsColumns,
		PrimaryKey: []*schema.Column{IncidentFieldsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_fields_tenants_tenant",
				Columns:    []*schema.Column{IncidentFieldsColumns[3]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentfield_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentFieldsColumns[3]},
			},
		},
	}
	// IncidentFieldOptionsColumns holds the columns for the "incident_field_options" table.
	IncidentFieldOptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"custom", "derived"}},
		{Name: "value", Type: field.TypeString},
		{Name: "incident_field_id", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentFieldOptionsTable holds the schema information for the "incident_field_options" table.
	IncidentFieldOptionsTable = &schema.Table{
		Name:       "incident_field_options",
		Columns:    IncidentFieldOptionsColumns,
		PrimaryKey: []*schema.Column{IncidentFieldOptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_field_options_incident_fields_options",
				Columns:    []*schema.Column{IncidentFieldOptionsColumns[4]},
				RefColumns: []*schema.Column{IncidentFieldsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_field_options_tenants_tenant",
				Columns:    []*schema.Column{IncidentFieldOptionsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentfieldoption_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentFieldOptionsColumns[5]},
			},
		},
	}
	// IncidentLinksColumns holds the columns for the "incident_links" table.
	IncidentLinksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "link_type", Type: field.TypeEnum, Enums: []string{"parent", "child", "similar"}},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "linked_incident_id", Type: field.TypeUUID},
	}
	// IncidentLinksTable holds the schema information for the "incident_links" table.
	IncidentLinksTable = &schema.Table{
		Name:       "incident_links",
		Columns:    IncidentLinksColumns,
		PrimaryKey: []*schema.Column{IncidentLinksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_links_tenants_tenant",
				Columns:    []*schema.Column{IncidentLinksColumns[3]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_links_incidents_incident",
				Columns:    []*schema.Column{IncidentLinksColumns[4]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_links_incidents_linked_incident",
				Columns:    []*schema.Column{IncidentLinksColumns[5]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentlink_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentLinksColumns[3]},
			},
			{
				Name:    "incidentlink_incident_id_linked_incident_id",
				Unique:  true,
				Columns: []*schema.Column{IncidentLinksColumns[4], IncidentLinksColumns[5]},
			},
		},
	}
	// IncidentMilestonesColumns holds the columns for the "incident_milestones" table.
	IncidentMilestonesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "kind", Type: field.TypeEnum, Enums: []string{"impact", "detection", "investigation", "mitigation", "resolution"}},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "time", Type: field.TypeTime},
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentMilestonesTable holds the schema information for the "incident_milestones" table.
	IncidentMilestonesTable = &schema.Table{
		Name:       "incident_milestones",
		Columns:    IncidentMilestonesColumns,
		PrimaryKey: []*schema.Column{IncidentMilestonesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_milestones_incidents_milestones",
				Columns:    []*schema.Column{IncidentMilestonesColumns[4]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_milestones_tenants_tenant",
				Columns:    []*schema.Column{IncidentMilestonesColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentmilestone_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentMilestonesColumns[5]},
			},
		},
	}
	// IncidentRolesColumns holds the columns for the "incident_roles" table.
	IncidentRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "required", Type: field.TypeBool, Default: false},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentRolesTable holds the schema information for the "incident_roles" table.
	IncidentRolesTable = &schema.Table{
		Name:       "incident_roles",
		Columns:    IncidentRolesColumns,
		PrimaryKey: []*schema.Column{IncidentRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_roles_tenants_tenant",
				Columns:    []*schema.Column{IncidentRolesColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentrole_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentRolesColumns[5]},
			},
		},
	}
	// IncidentRoleAssignmentsColumns holds the columns for the "incident_role_assignments" table.
	IncidentRoleAssignmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "role_id", Type: field.TypeUUID},
	}
	// IncidentRoleAssignmentsTable holds the schema information for the "incident_role_assignments" table.
	IncidentRoleAssignmentsTable = &schema.Table{
		Name:       "incident_role_assignments",
		Columns:    IncidentRoleAssignmentsColumns,
		PrimaryKey: []*schema.Column{IncidentRoleAssignmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_role_assignments_tenants_tenant",
				Columns:    []*schema.Column{IncidentRoleAssignmentsColumns[1]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_role_assignments_incidents_incident",
				Columns:    []*schema.Column{IncidentRoleAssignmentsColumns[2]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_role_assignments_users_user",
				Columns:    []*schema.Column{IncidentRoleAssignmentsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_role_assignments_incident_roles_role",
				Columns:    []*schema.Column{IncidentRoleAssignmentsColumns[4]},
				RefColumns: []*schema.Column{IncidentRolesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentroleassignment_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentRoleAssignmentsColumns[1]},
			},
			{
				Name:    "incidentroleassignment_user_id_incident_id",
				Unique:  true,
				Columns: []*schema.Column{IncidentRoleAssignmentsColumns[3], IncidentRoleAssignmentsColumns[2]},
			},
		},
	}
	// IncidentSeveritiesColumns holds the columns for the "incident_severities" table.
	IncidentSeveritiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "provider_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "rank", Type: field.TypeInt},
		{Name: "color", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentSeveritiesTable holds the schema information for the "incident_severities" table.
	IncidentSeveritiesTable = &schema.Table{
		Name:       "incident_severities",
		Columns:    IncidentSeveritiesColumns,
		PrimaryKey: []*schema.Column{IncidentSeveritiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_severities_tenants_tenant",
				Columns:    []*schema.Column{IncidentSeveritiesColumns[7]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentseverity_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentSeveritiesColumns[7]},
			},
		},
	}
	// IncidentTagsColumns holds the columns for the "incident_tags" table.
	IncidentTagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "key", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentTagsTable holds the schema information for the "incident_tags" table.
	IncidentTagsTable = &schema.Table{
		Name:       "incident_tags",
		Columns:    IncidentTagsColumns,
		PrimaryKey: []*schema.Column{IncidentTagsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_tags_tenants_tenant",
				Columns:    []*schema.Column{IncidentTagsColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidenttag_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentTagsColumns[4]},
			},
		},
	}
	// IncidentTypesColumns holds the columns for the "incident_types" table.
	IncidentTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// IncidentTypesTable holds the schema information for the "incident_types" table.
	IncidentTypesTable = &schema.Table{
		Name:       "incident_types",
		Columns:    IncidentTypesColumns,
		PrimaryKey: []*schema.Column{IncidentTypesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_types_tenants_tenant",
				Columns:    []*schema.Column{IncidentTypesColumns[3]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidenttype_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{IncidentTypesColumns[3]},
			},
		},
	}
	// MeetingSchedulesColumns holds the columns for the "meeting_schedules" table.
	MeetingSchedulesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "begin_minute", Type: field.TypeInt},
		{Name: "duration_minutes", Type: field.TypeInt},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "repeats", Type: field.TypeEnum, Enums: []string{"daily", "weekly", "monthly"}},
		{Name: "repetition_step", Type: field.TypeInt, Default: 1},
		{Name: "week_days", Type: field.TypeJSON, Nullable: true},
		{Name: "monthly_on", Type: field.TypeEnum, Nullable: true, Enums: []string{"same_day", "same_weekday"}},
		{Name: "until_date", Type: field.TypeTime, Nullable: true},
		{Name: "num_repetitions", Type: field.TypeInt, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// MeetingSchedulesTable holds the schema information for the "meeting_schedules" table.
	MeetingSchedulesTable = &schema.Table{
		Name:       "meeting_schedules",
		Columns:    MeetingSchedulesColumns,
		PrimaryKey: []*schema.Column{MeetingSchedulesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "meeting_schedules_tenants_tenant",
				Columns:    []*schema.Column{MeetingSchedulesColumns[13]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "meetingschedule_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{MeetingSchedulesColumns[13]},
			},
		},
	}
	// MeetingSessionsColumns holds the columns for the "meeting_sessions" table.
	MeetingSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "title", Type: field.TypeString},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "ended_at", Type: field.TypeTime, Nullable: true},
		{Name: "document_name", Type: field.TypeString},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "meeting_session_schedule", Type: field.TypeUUID, Nullable: true},
	}
	// MeetingSessionsTable holds the schema information for the "meeting_sessions" table.
	MeetingSessionsTable = &schema.Table{
		Name:       "meeting_sessions",
		Columns:    MeetingSessionsColumns,
		PrimaryKey: []*schema.Column{MeetingSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "meeting_sessions_tenants_tenant",
				Columns:    []*schema.Column{MeetingSessionsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "meeting_sessions_meeting_schedules_schedule",
				Columns:    []*schema.Column{MeetingSessionsColumns[6]},
				RefColumns: []*schema.Column{MeetingSchedulesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "meetingsession_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{MeetingSessionsColumns[5]},
			},
		},
	}
	// OncallHandoverTemplatesColumns holds the columns for the "oncall_handover_templates" table.
	OncallHandoverTemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "contents", Type: field.TypeBytes},
		{Name: "is_default", Type: field.TypeBool, Default: false},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// OncallHandoverTemplatesTable holds the schema information for the "oncall_handover_templates" table.
	OncallHandoverTemplatesTable = &schema.Table{
		Name:       "oncall_handover_templates",
		Columns:    OncallHandoverTemplatesColumns,
		PrimaryKey: []*schema.Column{OncallHandoverTemplatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_handover_templates_tenants_tenant",
				Columns:    []*schema.Column{OncallHandoverTemplatesColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oncallhandovertemplate_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{OncallHandoverTemplatesColumns[5]},
			},
		},
	}
	// OncallRostersColumns holds the columns for the "oncall_rosters" table.
	OncallRostersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "provider_id", Type: field.TypeString, Unique: true},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
		{Name: "chat_handle", Type: field.TypeString, Nullable: true},
		{Name: "chat_channel_id", Type: field.TypeString, Nullable: true},
		{Name: "handover_template_id", Type: field.TypeUUID, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// OncallRostersTable holds the schema information for the "oncall_rosters" table.
	OncallRostersTable = &schema.Table{
		Name:       "oncall_rosters",
		Columns:    OncallRostersColumns,
		PrimaryKey: []*schema.Column{OncallRostersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_rosters_oncall_handover_templates_roster",
				Columns:    []*schema.Column{OncallRostersColumns[8]},
				RefColumns: []*schema.Column{OncallHandoverTemplatesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "oncall_rosters_tenants_tenant",
				Columns:    []*schema.Column{OncallRostersColumns[9]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oncallroster_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{OncallRostersColumns[9]},
			},
		},
	}
	// OncallRosterMetricsColumns holds the columns for the "oncall_roster_metrics" table.
	OncallRosterMetricsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "roster_id", Type: field.TypeUUID},
	}
	// OncallRosterMetricsTable holds the schema information for the "oncall_roster_metrics" table.
	OncallRosterMetricsTable = &schema.Table{
		Name:       "oncall_roster_metrics",
		Columns:    OncallRosterMetricsColumns,
		PrimaryKey: []*schema.Column{OncallRosterMetricsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_roster_metrics_tenants_tenant",
				Columns:    []*schema.Column{OncallRosterMetricsColumns[1]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_roster_metrics_oncall_rosters_roster",
				Columns:    []*schema.Column{OncallRosterMetricsColumns[2]},
				RefColumns: []*schema.Column{OncallRostersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oncallrostermetrics_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{OncallRosterMetricsColumns[1]},
			},
		},
	}
	// OncallSchedulesColumns holds the columns for the "oncall_schedules" table.
	OncallSchedulesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
		{Name: "provider_id", Type: field.TypeString, Unique: true},
		{Name: "roster_id", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// OncallSchedulesTable holds the schema information for the "oncall_schedules" table.
	OncallSchedulesTable = &schema.Table{
		Name:       "oncall_schedules",
		Columns:    OncallSchedulesColumns,
		PrimaryKey: []*schema.Column{OncallSchedulesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_schedules_oncall_rosters_schedules",
				Columns:    []*schema.Column{OncallSchedulesColumns[5]},
				RefColumns: []*schema.Column{OncallRostersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_schedules_tenants_tenant",
				Columns:    []*schema.Column{OncallSchedulesColumns[6]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oncallschedule_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{OncallSchedulesColumns[6]},
			},
		},
	}
	// OncallScheduleParticipantsColumns holds the columns for the "oncall_schedule_participants" table.
	OncallScheduleParticipantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "index", Type: field.TypeInt},
		{Name: "schedule_id", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// OncallScheduleParticipantsTable holds the schema information for the "oncall_schedule_participants" table.
	OncallScheduleParticipantsTable = &schema.Table{
		Name:       "oncall_schedule_participants",
		Columns:    OncallScheduleParticipantsColumns,
		PrimaryKey: []*schema.Column{OncallScheduleParticipantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_schedule_participants_oncall_schedules_participants",
				Columns:    []*schema.Column{OncallScheduleParticipantsColumns[2]},
				RefColumns: []*schema.Column{OncallSchedulesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_schedule_participants_tenants_tenant",
				Columns:    []*schema.Column{OncallScheduleParticipantsColumns[3]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_schedule_participants_users_user",
				Columns:    []*schema.Column{OncallScheduleParticipantsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oncallscheduleparticipant_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{OncallScheduleParticipantsColumns[3]},
			},
		},
	}
	// OncallShiftsColumns holds the columns for the "oncall_shifts" table.
	OncallShiftsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Nullable: true, Enums: []string{"primary", "secondary", "shadow", "covering"}, Default: "primary"},
		{Name: "start_at", Type: field.TypeTime},
		{Name: "end_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "roster_id", Type: field.TypeUUID},
		{Name: "primary_shift_id", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// OncallShiftsTable holds the schema information for the "oncall_shifts" table.
	OncallShiftsTable = &schema.Table{
		Name:       "oncall_shifts",
		Columns:    OncallShiftsColumns,
		PrimaryKey: []*schema.Column{OncallShiftsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_shifts_tenants_tenant",
				Columns:    []*schema.Column{OncallShiftsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_shifts_users_user",
				Columns:    []*schema.Column{OncallShiftsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_shifts_oncall_rosters_roster",
				Columns:    []*schema.Column{OncallShiftsColumns[7]},
				RefColumns: []*schema.Column{OncallRostersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_shifts_oncall_shifts_primary_shift",
				Columns:    []*schema.Column{OncallShiftsColumns[8]},
				RefColumns: []*schema.Column{OncallShiftsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oncallshift_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{OncallShiftsColumns[5]},
			},
		},
	}
	// OncallShiftHandoversColumns holds the columns for the "oncall_shift_handovers" table.
	OncallShiftHandoversColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "reminder_sent", Type: field.TypeBool, Default: false},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "sent_at", Type: field.TypeTime, Nullable: true},
		{Name: "contents", Type: field.TypeBytes},
		{Name: "shift_id", Type: field.TypeUUID, Unique: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// OncallShiftHandoversTable holds the schema information for the "oncall_shift_handovers" table.
	OncallShiftHandoversTable = &schema.Table{
		Name:       "oncall_shift_handovers",
		Columns:    OncallShiftHandoversColumns,
		PrimaryKey: []*schema.Column{OncallShiftHandoversColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_shift_handovers_oncall_shifts_handover",
				Columns:    []*schema.Column{OncallShiftHandoversColumns[6]},
				RefColumns: []*schema.Column{OncallShiftsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_shift_handovers_tenants_tenant",
				Columns:    []*schema.Column{OncallShiftHandoversColumns[7]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oncallshifthandover_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{OncallShiftHandoversColumns[7]},
			},
		},
	}
	// OncallShiftMetricsColumns holds the columns for the "oncall_shift_metrics" table.
	OncallShiftMetricsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "burden_score", Type: field.TypeFloat32},
		{Name: "event_frequency", Type: field.TypeFloat32},
		{Name: "life_impact", Type: field.TypeFloat32},
		{Name: "time_impact", Type: field.TypeFloat32},
		{Name: "response_requirements", Type: field.TypeFloat32},
		{Name: "isolation", Type: field.TypeFloat32},
		{Name: "incidents_total", Type: field.TypeFloat32},
		{Name: "incident_response_time", Type: field.TypeFloat32},
		{Name: "events_total", Type: field.TypeFloat32},
		{Name: "alerts_total", Type: field.TypeFloat32},
		{Name: "interrupts_total", Type: field.TypeFloat32},
		{Name: "interrupts_night", Type: field.TypeFloat32},
		{Name: "interrupts_business_hours", Type: field.TypeFloat32},
		{Name: "shift_id", Type: field.TypeUUID, Unique: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// OncallShiftMetricsTable holds the schema information for the "oncall_shift_metrics" table.
	OncallShiftMetricsTable = &schema.Table{
		Name:       "oncall_shift_metrics",
		Columns:    OncallShiftMetricsColumns,
		PrimaryKey: []*schema.Column{OncallShiftMetricsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_shift_metrics_oncall_shifts_metrics",
				Columns:    []*schema.Column{OncallShiftMetricsColumns[15]},
				RefColumns: []*schema.Column{OncallShiftsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_shift_metrics_tenants_tenant",
				Columns:    []*schema.Column{OncallShiftMetricsColumns[16]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oncallshiftmetrics_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{OncallShiftMetricsColumns[16]},
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "initial_setup_at", Type: field.TypeTime, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organizations_tenants_tenant",
				Columns:    []*schema.Column{OrganizationsColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "organization_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[4]},
			},
		},
	}
	// PlaybooksColumns holds the columns for the "playbooks" table.
	PlaybooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "title", Type: field.TypeString},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "content", Type: field.TypeBytes},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// PlaybooksTable holds the schema information for the "playbooks" table.
	PlaybooksTable = &schema.Table{
		Name:       "playbooks",
		Columns:    PlaybooksColumns,
		PrimaryKey: []*schema.Column{PlaybooksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "playbooks_tenants_tenant",
				Columns:    []*schema.Column{PlaybooksColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "playbook_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{PlaybooksColumns[4]},
			},
		},
	}
	// ProviderConfigsColumns holds the columns for the "provider_configs" table.
	ProviderConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_type", Type: field.TypeEnum, Enums: []string{"users", "teams", "incidents", "oncall", "alerts", "system_components", "tickets", "playbooks"}},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "config", Type: field.TypeBytes},
		{Name: "enabled", Type: field.TypeBool, Default: true},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// ProviderConfigsTable holds the schema information for the "provider_configs" table.
	ProviderConfigsTable = &schema.Table{
		Name:       "provider_configs",
		Columns:    ProviderConfigsColumns,
		PrimaryKey: []*schema.Column{ProviderConfigsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "provider_configs_tenants_tenant",
				Columns:    []*schema.Column{ProviderConfigsColumns[6]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "providerconfig_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{ProviderConfigsColumns[6]},
			},
			{
				Name:    "providerconfig_provider_id_provider_type",
				Unique:  true,
				Columns: []*schema.Column{ProviderConfigsColumns[2], ProviderConfigsColumns[1]},
			},
		},
	}
	// ProviderSyncHistoriesColumns holds the columns for the "provider_sync_histories" table.
	ProviderSyncHistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "data_type", Type: field.TypeString},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "finished_at", Type: field.TypeTime},
		{Name: "num_mutations", Type: field.TypeInt},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// ProviderSyncHistoriesTable holds the schema information for the "provider_sync_histories" table.
	ProviderSyncHistoriesTable = &schema.Table{
		Name:       "provider_sync_histories",
		Columns:    ProviderSyncHistoriesColumns,
		PrimaryKey: []*schema.Column{ProviderSyncHistoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "provider_sync_histories_tenants_tenant",
				Columns:    []*schema.Column{ProviderSyncHistoriesColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "providersynchistory_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{ProviderSyncHistoriesColumns[5]},
			},
		},
	}
	// RetrospectivesColumns holds the columns for the "retrospectives" table.
	RetrospectivesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"simple", "full"}},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"draft", "in_review", "meeting", "closed"}},
		{Name: "document_id", Type: field.TypeUUID, Unique: true},
		{Name: "incident_id", Type: field.TypeUUID, Unique: true},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "system_analysis_id", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// RetrospectivesTable holds the schema information for the "retrospectives" table.
	RetrospectivesTable = &schema.Table{
		Name:       "retrospectives",
		Columns:    RetrospectivesColumns,
		PrimaryKey: []*schema.Column{RetrospectivesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "retrospectives_documents_retrospective",
				Columns:    []*schema.Column{RetrospectivesColumns[3]},
				RefColumns: []*schema.Column{DocumentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospectives_incidents_retrospective",
				Columns:    []*schema.Column{RetrospectivesColumns[4]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospectives_tenants_tenant",
				Columns:    []*schema.Column{RetrospectivesColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospectives_system_analyses_retrospective",
				Columns:    []*schema.Column{RetrospectivesColumns[6]},
				RefColumns: []*schema.Column{SystemAnalysesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "retrospective_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{RetrospectivesColumns[5]},
			},
		},
	}
	// RetrospectiveCommentsColumns holds the columns for the "retrospective_comments" table.
	RetrospectiveCommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "content", Type: field.TypeBytes},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "retrospective_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "retrospective_review_id", Type: field.TypeUUID, Nullable: true},
		{Name: "parent_reply_id", Type: field.TypeUUID, Nullable: true},
	}
	// RetrospectiveCommentsTable holds the schema information for the "retrospective_comments" table.
	RetrospectiveCommentsTable = &schema.Table{
		Name:       "retrospective_comments",
		Columns:    RetrospectiveCommentsColumns,
		PrimaryKey: []*schema.Column{RetrospectiveCommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "retrospective_comments_tenants_tenant",
				Columns:    []*schema.Column{RetrospectiveCommentsColumns[2]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_comments_retrospectives_retrospective",
				Columns:    []*schema.Column{RetrospectiveCommentsColumns[3]},
				RefColumns: []*schema.Column{RetrospectivesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_comments_users_user",
				Columns:    []*schema.Column{RetrospectiveCommentsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_comments_retrospective_reviews_review",
				Columns:    []*schema.Column{RetrospectiveCommentsColumns[5]},
				RefColumns: []*schema.Column{RetrospectiveReviewsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "retrospective_comments_retrospective_comments_replies",
				Columns:    []*schema.Column{RetrospectiveCommentsColumns[6]},
				RefColumns: []*schema.Column{RetrospectiveCommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "retrospectivecomment_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{RetrospectiveCommentsColumns[2]},
			},
		},
	}
	// RetrospectiveReviewsColumns holds the columns for the "retrospective_reviews" table.
	RetrospectiveReviewsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"waiting", "request_changes", "approved"}},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "retrospective_id", Type: field.TypeUUID},
		{Name: "requester_id", Type: field.TypeUUID},
		{Name: "reviewer_id", Type: field.TypeUUID},
		{Name: "comment_id", Type: field.TypeUUID},
	}
	// RetrospectiveReviewsTable holds the schema information for the "retrospective_reviews" table.
	RetrospectiveReviewsTable = &schema.Table{
		Name:       "retrospective_reviews",
		Columns:    RetrospectiveReviewsColumns,
		PrimaryKey: []*schema.Column{RetrospectiveReviewsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "retrospective_reviews_tenants_tenant",
				Columns:    []*schema.Column{RetrospectiveReviewsColumns[2]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_reviews_retrospectives_retrospective",
				Columns:    []*schema.Column{RetrospectiveReviewsColumns[3]},
				RefColumns: []*schema.Column{RetrospectivesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_reviews_users_requester",
				Columns:    []*schema.Column{RetrospectiveReviewsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_reviews_users_reviewer",
				Columns:    []*schema.Column{RetrospectiveReviewsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_reviews_retrospective_comments_comment",
				Columns:    []*schema.Column{RetrospectiveReviewsColumns[6]},
				RefColumns: []*schema.Column{RetrospectiveCommentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "retrospectivereview_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{RetrospectiveReviewsColumns[2]},
			},
		},
	}
	// SystemAnalysesColumns holds the columns for the "system_analyses" table.
	SystemAnalysesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// SystemAnalysesTable holds the schema information for the "system_analyses" table.
	SystemAnalysesTable = &schema.Table{
		Name:       "system_analyses",
		Columns:    SystemAnalysesColumns,
		PrimaryKey: []*schema.Column{SystemAnalysesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_analyses_tenants_tenant",
				Columns:    []*schema.Column{SystemAnalysesColumns[3]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemanalysis_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemAnalysesColumns[3]},
			},
		},
	}
	// SystemAnalysisComponentsColumns holds the columns for the "system_analysis_components" table.
	SystemAnalysisComponentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "pos_x", Type: field.TypeFloat64, Default: 0},
		{Name: "pos_y", Type: field.TypeFloat64, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "analysis_id", Type: field.TypeUUID},
		{Name: "component_id", Type: field.TypeUUID},
	}
	// SystemAnalysisComponentsTable holds the schema information for the "system_analysis_components" table.
	SystemAnalysisComponentsTable = &schema.Table{
		Name:       "system_analysis_components",
		Columns:    SystemAnalysisComponentsColumns,
		PrimaryKey: []*schema.Column{SystemAnalysisComponentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_analysis_components_tenants_tenant",
				Columns:    []*schema.Column{SystemAnalysisComponentsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_analysis_components_system_analyses_analysis",
				Columns:    []*schema.Column{SystemAnalysisComponentsColumns[6]},
				RefColumns: []*schema.Column{SystemAnalysesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_analysis_components_system_components_component",
				Columns:    []*schema.Column{SystemAnalysisComponentsColumns[7]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemanalysiscomponent_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemAnalysisComponentsColumns[5]},
			},
			{
				Name:    "systemanalysiscomponent_component_id_analysis_id",
				Unique:  true,
				Columns: []*schema.Column{SystemAnalysisComponentsColumns[7], SystemAnalysisComponentsColumns[6]},
			},
		},
	}
	// SystemAnalysisRelationshipsColumns holds the columns for the "system_analysis_relationships" table.
	SystemAnalysisRelationshipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "analysis_id", Type: field.TypeUUID},
		{Name: "component_relationship_id", Type: field.TypeUUID},
	}
	// SystemAnalysisRelationshipsTable holds the schema information for the "system_analysis_relationships" table.
	SystemAnalysisRelationshipsTable = &schema.Table{
		Name:       "system_analysis_relationships",
		Columns:    SystemAnalysisRelationshipsColumns,
		PrimaryKey: []*schema.Column{SystemAnalysisRelationshipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_analysis_relationships_tenants_tenant",
				Columns:    []*schema.Column{SystemAnalysisRelationshipsColumns[3]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_analysis_relationships_system_analyses_system_analysis",
				Columns:    []*schema.Column{SystemAnalysisRelationshipsColumns[4]},
				RefColumns: []*schema.Column{SystemAnalysesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_analysis_relationships_system_component_relationships_component_relationship",
				Columns:    []*schema.Column{SystemAnalysisRelationshipsColumns[5]},
				RefColumns: []*schema.Column{SystemComponentRelationshipsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemanalysisrelationship_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemAnalysisRelationshipsColumns[3]},
			},
		},
	}
	// SystemComponentsColumns holds the columns for the "system_components" table.
	SystemComponentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "provider_id", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "properties", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "kind_id", Type: field.TypeUUID, Nullable: true},
	}
	// SystemComponentsTable holds the schema information for the "system_components" table.
	SystemComponentsTable = &schema.Table{
		Name:       "system_components",
		Columns:    SystemComponentsColumns,
		PrimaryKey: []*schema.Column{SystemComponentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_components_tenants_tenant",
				Columns:    []*schema.Column{SystemComponentsColumns[7]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_components_system_component_kinds_kind",
				Columns:    []*schema.Column{SystemComponentsColumns[8]},
				RefColumns: []*schema.Column{SystemComponentKindsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemcomponent_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemComponentsColumns[7]},
			},
		},
	}
	// SystemComponentConstraintsColumns holds the columns for the "system_component_constraints" table.
	SystemComponentConstraintsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "label", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "component_id", Type: field.TypeUUID},
	}
	// SystemComponentConstraintsTable holds the schema information for the "system_component_constraints" table.
	SystemComponentConstraintsTable = &schema.Table{
		Name:       "system_component_constraints",
		Columns:    SystemComponentConstraintsColumns,
		PrimaryKey: []*schema.Column{SystemComponentConstraintsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_component_constraints_tenants_tenant",
				Columns:    []*schema.Column{SystemComponentConstraintsColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_component_constraints_system_components_component",
				Columns:    []*schema.Column{SystemComponentConstraintsColumns[5]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemcomponentconstraint_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemComponentConstraintsColumns[4]},
			},
		},
	}
	// SystemComponentControlsColumns holds the columns for the "system_component_controls" table.
	SystemComponentControlsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "label", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "component_id", Type: field.TypeUUID},
	}
	// SystemComponentControlsTable holds the schema information for the "system_component_controls" table.
	SystemComponentControlsTable = &schema.Table{
		Name:       "system_component_controls",
		Columns:    SystemComponentControlsColumns,
		PrimaryKey: []*schema.Column{SystemComponentControlsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_component_controls_tenants_tenant",
				Columns:    []*schema.Column{SystemComponentControlsColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_component_controls_system_components_component",
				Columns:    []*schema.Column{SystemComponentControlsColumns[5]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemcomponentcontrol_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemComponentControlsColumns[4]},
			},
		},
	}
	// SystemComponentKindsColumns holds the columns for the "system_component_kinds" table.
	SystemComponentKindsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_id", Type: field.TypeString, Nullable: true},
		{Name: "label", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// SystemComponentKindsTable holds the schema information for the "system_component_kinds" table.
	SystemComponentKindsTable = &schema.Table{
		Name:       "system_component_kinds",
		Columns:    SystemComponentKindsColumns,
		PrimaryKey: []*schema.Column{SystemComponentKindsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_component_kinds_tenants_tenant",
				Columns:    []*schema.Column{SystemComponentKindsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemcomponentkind_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemComponentKindsColumns[5]},
			},
		},
	}
	// SystemComponentRelationshipsColumns holds the columns for the "system_component_relationships" table.
	SystemComponentRelationshipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_id", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "source_id", Type: field.TypeUUID},
		{Name: "target_id", Type: field.TypeUUID},
	}
	// SystemComponentRelationshipsTable holds the schema information for the "system_component_relationships" table.
	SystemComponentRelationshipsTable = &schema.Table{
		Name:       "system_component_relationships",
		Columns:    SystemComponentRelationshipsColumns,
		PrimaryKey: []*schema.Column{SystemComponentRelationshipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_component_relationships_tenants_tenant",
				Columns:    []*schema.Column{SystemComponentRelationshipsColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_component_relationships_system_components_source",
				Columns:    []*schema.Column{SystemComponentRelationshipsColumns[5]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_component_relationships_system_components_target",
				Columns:    []*schema.Column{SystemComponentRelationshipsColumns[6]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemcomponentrelationship_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemComponentRelationshipsColumns[4]},
			},
			{
				Name:    "systemcomponentrelationship_source_id_target_id",
				Unique:  true,
				Columns: []*schema.Column{SystemComponentRelationshipsColumns[5], SystemComponentRelationshipsColumns[6]},
			},
		},
	}
	// SystemComponentSignalsColumns holds the columns for the "system_component_signals" table.
	SystemComponentSignalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "label", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "component_id", Type: field.TypeUUID},
	}
	// SystemComponentSignalsTable holds the schema information for the "system_component_signals" table.
	SystemComponentSignalsTable = &schema.Table{
		Name:       "system_component_signals",
		Columns:    SystemComponentSignalsColumns,
		PrimaryKey: []*schema.Column{SystemComponentSignalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_component_signals_tenants_tenant",
				Columns:    []*schema.Column{SystemComponentSignalsColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_component_signals_system_components_component",
				Columns:    []*schema.Column{SystemComponentSignalsColumns[5]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemcomponentsignal_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemComponentSignalsColumns[4]},
			},
		},
	}
	// SystemHazardsColumns holds the columns for the "system_hazards" table.
	SystemHazardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// SystemHazardsTable holds the schema information for the "system_hazards" table.
	SystemHazardsTable = &schema.Table{
		Name:       "system_hazards",
		Columns:    SystemHazardsColumns,
		PrimaryKey: []*schema.Column{SystemHazardsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_hazards_tenants_tenant",
				Columns:    []*schema.Column{SystemHazardsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemhazard_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemHazardsColumns[5]},
			},
		},
	}
	// SystemRelationshipControlActionsColumns holds the columns for the "system_relationship_control_actions" table.
	SystemRelationshipControlActionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "relationship_id", Type: field.TypeUUID},
		{Name: "control_id", Type: field.TypeUUID},
	}
	// SystemRelationshipControlActionsTable holds the schema information for the "system_relationship_control_actions" table.
	SystemRelationshipControlActionsTable = &schema.Table{
		Name:       "system_relationship_control_actions",
		Columns:    SystemRelationshipControlActionsColumns,
		PrimaryKey: []*schema.Column{SystemRelationshipControlActionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_relationship_control_actions_tenants_tenant",
				Columns:    []*schema.Column{SystemRelationshipControlActionsColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_relationship_control_actions_system_analysis_relationships_relationship",
				Columns:    []*schema.Column{SystemRelationshipControlActionsColumns[5]},
				RefColumns: []*schema.Column{SystemAnalysisRelationshipsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_relationship_control_actions_system_component_controls_control",
				Columns:    []*schema.Column{SystemRelationshipControlActionsColumns[6]},
				RefColumns: []*schema.Column{SystemComponentControlsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemrelationshipcontrolaction_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemRelationshipControlActionsColumns[4]},
			},
			{
				Name:    "systemrelationshipcontrolaction_relationship_id_control_id",
				Unique:  true,
				Columns: []*schema.Column{SystemRelationshipControlActionsColumns[5], SystemRelationshipControlActionsColumns[6]},
			},
		},
	}
	// SystemRelationshipFeedbackSignalsColumns holds the columns for the "system_relationship_feedback_signals" table.
	SystemRelationshipFeedbackSignalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "relationship_id", Type: field.TypeUUID},
		{Name: "signal_id", Type: field.TypeUUID},
	}
	// SystemRelationshipFeedbackSignalsTable holds the schema information for the "system_relationship_feedback_signals" table.
	SystemRelationshipFeedbackSignalsTable = &schema.Table{
		Name:       "system_relationship_feedback_signals",
		Columns:    SystemRelationshipFeedbackSignalsColumns,
		PrimaryKey: []*schema.Column{SystemRelationshipFeedbackSignalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_relationship_feedback_signals_tenants_tenant",
				Columns:    []*schema.Column{SystemRelationshipFeedbackSignalsColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_relationship_feedback_signals_system_analysis_relationships_relationship",
				Columns:    []*schema.Column{SystemRelationshipFeedbackSignalsColumns[5]},
				RefColumns: []*schema.Column{SystemAnalysisRelationshipsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_relationship_feedback_signals_system_component_signals_signal",
				Columns:    []*schema.Column{SystemRelationshipFeedbackSignalsColumns[6]},
				RefColumns: []*schema.Column{SystemComponentSignalsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemrelationshipfeedbacksignal_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{SystemRelationshipFeedbackSignalsColumns[4]},
			},
			{
				Name:    "systemrelationshipfeedbacksignal_relationship_id_signal_id",
				Unique:  true,
				Columns: []*schema.Column{SystemRelationshipFeedbackSignalsColumns[5], SystemRelationshipFeedbackSignalsColumns[6]},
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"cleanup", "detect", "mitigate", "prevent"}},
		{Name: "title", Type: field.TypeString},
		{Name: "incident_id", Type: field.TypeUUID, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "assignee_id", Type: field.TypeUUID, Nullable: true},
		{Name: "creator_id", Type: field.TypeUUID, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_incidents_tasks",
				Columns:    []*schema.Column{TasksColumns[3]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tasks_tenants_tenant",
				Columns:    []*schema.Column{TasksColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tasks_users_assigned_tasks",
				Columns:    []*schema.Column{TasksColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tasks_users_created_tasks",
				Columns:    []*schema.Column{TasksColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "task_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[4]},
			},
		},
	}
	// TeamsColumns holds the columns for the "teams" table.
	TeamsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "provider_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "chat_channel_id", Type: field.TypeString, Nullable: true},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// TeamsTable holds the schema information for the "teams" table.
	TeamsTable = &schema.Table{
		Name:       "teams",
		Columns:    TeamsColumns,
		PrimaryKey: []*schema.Column{TeamsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "teams_tenants_tenant",
				Columns:    []*schema.Column{TeamsColumns[6]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "team_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{TeamsColumns[6]},
			},
		},
	}
	// TenantsColumns holds the columns for the "tenants" table.
	TenantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// TenantsTable holds the schema information for the "tenants" table.
	TenantsTable = &schema.Table{
		Name:       "tenants",
		Columns:    TenantsColumns,
		PrimaryKey: []*schema.Column{TenantsColumns[0]},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "title", Type: field.TypeString},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_tenants_tenant",
				Columns:    []*schema.Column{TicketsColumns[3]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "ticket_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[3]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_id", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString},
		{Name: "name", Type: field.TypeString, Nullable: true, Default: ""},
		{Name: "chat_id", Type: field.TypeString, Nullable: true},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
		{Name: "confirmed", Type: field.TypeBool, Default: false},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_tenants_tenant",
				Columns:    []*schema.Column{UsersColumns[7]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[7]},
			},
		},
	}
	// IncidentFieldSelectionsColumns holds the columns for the "incident_field_selections" table.
	IncidentFieldSelectionsColumns = []*schema.Column{
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "incident_field_option_id", Type: field.TypeUUID},
	}
	// IncidentFieldSelectionsTable holds the schema information for the "incident_field_selections" table.
	IncidentFieldSelectionsTable = &schema.Table{
		Name:       "incident_field_selections",
		Columns:    IncidentFieldSelectionsColumns,
		PrimaryKey: []*schema.Column{IncidentFieldSelectionsColumns[0], IncidentFieldSelectionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_field_selections_incident_id",
				Columns:    []*schema.Column{IncidentFieldSelectionsColumns[0]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_field_selections_incident_field_option_id",
				Columns:    []*schema.Column{IncidentFieldSelectionsColumns[1]},
				RefColumns: []*schema.Column{IncidentFieldOptionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentTagAssignmentsColumns holds the columns for the "incident_tag_assignments" table.
	IncidentTagAssignmentsColumns = []*schema.Column{
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "incident_tag_id", Type: field.TypeUUID},
	}
	// IncidentTagAssignmentsTable holds the schema information for the "incident_tag_assignments" table.
	IncidentTagAssignmentsTable = &schema.Table{
		Name:       "incident_tag_assignments",
		Columns:    IncidentTagAssignmentsColumns,
		PrimaryKey: []*schema.Column{IncidentTagAssignmentsColumns[0], IncidentTagAssignmentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_tag_assignments_incident_id",
				Columns:    []*schema.Column{IncidentTagAssignmentsColumns[0]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_tag_assignments_incident_tag_id",
				Columns:    []*schema.Column{IncidentTagAssignmentsColumns[1]},
				RefColumns: []*schema.Column{IncidentTagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentReviewSessionsColumns holds the columns for the "incident_review_sessions" table.
	IncidentReviewSessionsColumns = []*schema.Column{
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "meeting_session_id", Type: field.TypeUUID},
	}
	// IncidentReviewSessionsTable holds the schema information for the "incident_review_sessions" table.
	IncidentReviewSessionsTable = &schema.Table{
		Name:       "incident_review_sessions",
		Columns:    IncidentReviewSessionsColumns,
		PrimaryKey: []*schema.Column{IncidentReviewSessionsColumns[0], IncidentReviewSessionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_review_sessions_incident_id",
				Columns:    []*schema.Column{IncidentReviewSessionsColumns[0]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_review_sessions_meeting_session_id",
				Columns:    []*schema.Column{IncidentReviewSessionsColumns[1]},
				RefColumns: []*schema.Column{MeetingSessionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentDebriefQuestionIncidentFieldsColumns holds the columns for the "incident_debrief_question_incident_fields" table.
	IncidentDebriefQuestionIncidentFieldsColumns = []*schema.Column{
		{Name: "incident_debrief_question_id", Type: field.TypeUUID},
		{Name: "incident_field_id", Type: field.TypeUUID},
	}
	// IncidentDebriefQuestionIncidentFieldsTable holds the schema information for the "incident_debrief_question_incident_fields" table.
	IncidentDebriefQuestionIncidentFieldsTable = &schema.Table{
		Name:       "incident_debrief_question_incident_fields",
		Columns:    IncidentDebriefQuestionIncidentFieldsColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionIncidentFieldsColumns[0], IncidentDebriefQuestionIncidentFieldsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_question_incident_fields_incident_debrief_question_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentFieldsColumns[0]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_debrief_question_incident_fields_incident_field_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentFieldsColumns[1]},
				RefColumns: []*schema.Column{IncidentFieldsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentDebriefQuestionIncidentRolesColumns holds the columns for the "incident_debrief_question_incident_roles" table.
	IncidentDebriefQuestionIncidentRolesColumns = []*schema.Column{
		{Name: "incident_debrief_question_id", Type: field.TypeUUID},
		{Name: "incident_role_id", Type: field.TypeUUID},
	}
	// IncidentDebriefQuestionIncidentRolesTable holds the schema information for the "incident_debrief_question_incident_roles" table.
	IncidentDebriefQuestionIncidentRolesTable = &schema.Table{
		Name:       "incident_debrief_question_incident_roles",
		Columns:    IncidentDebriefQuestionIncidentRolesColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionIncidentRolesColumns[0], IncidentDebriefQuestionIncidentRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_question_incident_roles_incident_debrief_question_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentRolesColumns[0]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_debrief_question_incident_roles_incident_role_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentRolesColumns[1]},
				RefColumns: []*schema.Column{IncidentRolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentDebriefQuestionIncidentSeveritiesColumns holds the columns for the "incident_debrief_question_incident_severities" table.
	IncidentDebriefQuestionIncidentSeveritiesColumns = []*schema.Column{
		{Name: "incident_debrief_question_id", Type: field.TypeUUID},
		{Name: "incident_severity_id", Type: field.TypeUUID},
	}
	// IncidentDebriefQuestionIncidentSeveritiesTable holds the schema information for the "incident_debrief_question_incident_severities" table.
	IncidentDebriefQuestionIncidentSeveritiesTable = &schema.Table{
		Name:       "incident_debrief_question_incident_severities",
		Columns:    IncidentDebriefQuestionIncidentSeveritiesColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionIncidentSeveritiesColumns[0], IncidentDebriefQuestionIncidentSeveritiesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_question_incident_severities_incident_debrief_question_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentSeveritiesColumns[0]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_debrief_question_incident_severities_incident_severity_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentSeveritiesColumns[1]},
				RefColumns: []*schema.Column{IncidentSeveritiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentDebriefQuestionIncidentTagsColumns holds the columns for the "incident_debrief_question_incident_tags" table.
	IncidentDebriefQuestionIncidentTagsColumns = []*schema.Column{
		{Name: "incident_debrief_question_id", Type: field.TypeUUID},
		{Name: "incident_tag_id", Type: field.TypeUUID},
	}
	// IncidentDebriefQuestionIncidentTagsTable holds the schema information for the "incident_debrief_question_incident_tags" table.
	IncidentDebriefQuestionIncidentTagsTable = &schema.Table{
		Name:       "incident_debrief_question_incident_tags",
		Columns:    IncidentDebriefQuestionIncidentTagsColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionIncidentTagsColumns[0], IncidentDebriefQuestionIncidentTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_question_incident_tags_incident_debrief_question_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentTagsColumns[0]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_debrief_question_incident_tags_incident_tag_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentTagsColumns[1]},
				RefColumns: []*schema.Column{IncidentTagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentDebriefQuestionIncidentTypesColumns holds the columns for the "incident_debrief_question_incident_types" table.
	IncidentDebriefQuestionIncidentTypesColumns = []*schema.Column{
		{Name: "incident_debrief_question_id", Type: field.TypeUUID},
		{Name: "incident_type_id", Type: field.TypeUUID},
	}
	// IncidentDebriefQuestionIncidentTypesTable holds the schema information for the "incident_debrief_question_incident_types" table.
	IncidentDebriefQuestionIncidentTypesTable = &schema.Table{
		Name:       "incident_debrief_question_incident_types",
		Columns:    IncidentDebriefQuestionIncidentTypesColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionIncidentTypesColumns[0], IncidentDebriefQuestionIncidentTypesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_question_incident_types_incident_debrief_question_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentTypesColumns[0]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_debrief_question_incident_types_incident_type_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentTypesColumns[1]},
				RefColumns: []*schema.Column{IncidentTypesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MeetingScheduleOwningTeamColumns holds the columns for the "meeting_schedule_owning_team" table.
	MeetingScheduleOwningTeamColumns = []*schema.Column{
		{Name: "meeting_schedule_id", Type: field.TypeUUID},
		{Name: "team_id", Type: field.TypeUUID},
	}
	// MeetingScheduleOwningTeamTable holds the schema information for the "meeting_schedule_owning_team" table.
	MeetingScheduleOwningTeamTable = &schema.Table{
		Name:       "meeting_schedule_owning_team",
		Columns:    MeetingScheduleOwningTeamColumns,
		PrimaryKey: []*schema.Column{MeetingScheduleOwningTeamColumns[0], MeetingScheduleOwningTeamColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "meeting_schedule_owning_team_meeting_schedule_id",
				Columns:    []*schema.Column{MeetingScheduleOwningTeamColumns[0]},
				RefColumns: []*schema.Column{MeetingSchedulesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "meeting_schedule_owning_team_team_id",
				Columns:    []*schema.Column{MeetingScheduleOwningTeamColumns[1]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OncallShiftHandoverPinnedAnnotationsColumns holds the columns for the "oncall_shift_handover_pinned_annotations" table.
	OncallShiftHandoverPinnedAnnotationsColumns = []*schema.Column{
		{Name: "oncall_shift_handover_id", Type: field.TypeUUID},
		{Name: "event_annotation_id", Type: field.TypeUUID},
	}
	// OncallShiftHandoverPinnedAnnotationsTable holds the schema information for the "oncall_shift_handover_pinned_annotations" table.
	OncallShiftHandoverPinnedAnnotationsTable = &schema.Table{
		Name:       "oncall_shift_handover_pinned_annotations",
		Columns:    OncallShiftHandoverPinnedAnnotationsColumns,
		PrimaryKey: []*schema.Column{OncallShiftHandoverPinnedAnnotationsColumns[0], OncallShiftHandoverPinnedAnnotationsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_shift_handover_pinned_annotations_oncall_shift_handover_id",
				Columns:    []*schema.Column{OncallShiftHandoverPinnedAnnotationsColumns[0]},
				RefColumns: []*schema.Column{OncallShiftHandoversColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "oncall_shift_handover_pinned_annotations_event_annotation_id",
				Columns:    []*schema.Column{OncallShiftHandoverPinnedAnnotationsColumns[1]},
				RefColumns: []*schema.Column{EventAnnotationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaybookAlertsColumns holds the columns for the "playbook_alerts" table.
	PlaybookAlertsColumns = []*schema.Column{
		{Name: "playbook_id", Type: field.TypeUUID},
		{Name: "alert_id", Type: field.TypeUUID},
	}
	// PlaybookAlertsTable holds the schema information for the "playbook_alerts" table.
	PlaybookAlertsTable = &schema.Table{
		Name:       "playbook_alerts",
		Columns:    PlaybookAlertsColumns,
		PrimaryKey: []*schema.Column{PlaybookAlertsColumns[0], PlaybookAlertsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "playbook_alerts_playbook_id",
				Columns:    []*schema.Column{PlaybookAlertsColumns[0]},
				RefColumns: []*schema.Column{PlaybooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "playbook_alerts_alert_id",
				Columns:    []*schema.Column{PlaybookAlertsColumns[1]},
				RefColumns: []*schema.Column{AlertsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SystemHazardComponentsColumns holds the columns for the "system_hazard_components" table.
	SystemHazardComponentsColumns = []*schema.Column{
		{Name: "system_hazard_id", Type: field.TypeUUID},
		{Name: "system_component_id", Type: field.TypeUUID},
	}
	// SystemHazardComponentsTable holds the schema information for the "system_hazard_components" table.
	SystemHazardComponentsTable = &schema.Table{
		Name:       "system_hazard_components",
		Columns:    SystemHazardComponentsColumns,
		PrimaryKey: []*schema.Column{SystemHazardComponentsColumns[0], SystemHazardComponentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_hazard_components_system_hazard_id",
				Columns:    []*schema.Column{SystemHazardComponentsColumns[0]},
				RefColumns: []*schema.Column{SystemHazardsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "system_hazard_components_system_component_id",
				Columns:    []*schema.Column{SystemHazardComponentsColumns[1]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SystemHazardConstraintsColumns holds the columns for the "system_hazard_constraints" table.
	SystemHazardConstraintsColumns = []*schema.Column{
		{Name: "system_hazard_id", Type: field.TypeUUID},
		{Name: "system_component_constraint_id", Type: field.TypeUUID},
	}
	// SystemHazardConstraintsTable holds the schema information for the "system_hazard_constraints" table.
	SystemHazardConstraintsTable = &schema.Table{
		Name:       "system_hazard_constraints",
		Columns:    SystemHazardConstraintsColumns,
		PrimaryKey: []*schema.Column{SystemHazardConstraintsColumns[0], SystemHazardConstraintsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_hazard_constraints_system_hazard_id",
				Columns:    []*schema.Column{SystemHazardConstraintsColumns[0]},
				RefColumns: []*schema.Column{SystemHazardsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "system_hazard_constraints_system_component_constraint_id",
				Columns:    []*schema.Column{SystemHazardConstraintsColumns[1]},
				RefColumns: []*schema.Column{SystemComponentConstraintsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SystemHazardRelationshipsColumns holds the columns for the "system_hazard_relationships" table.
	SystemHazardRelationshipsColumns = []*schema.Column{
		{Name: "system_hazard_id", Type: field.TypeUUID},
		{Name: "system_component_relationship_id", Type: field.TypeUUID},
	}
	// SystemHazardRelationshipsTable holds the schema information for the "system_hazard_relationships" table.
	SystemHazardRelationshipsTable = &schema.Table{
		Name:       "system_hazard_relationships",
		Columns:    SystemHazardRelationshipsColumns,
		PrimaryKey: []*schema.Column{SystemHazardRelationshipsColumns[0], SystemHazardRelationshipsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_hazard_relationships_system_hazard_id",
				Columns:    []*schema.Column{SystemHazardRelationshipsColumns[0]},
				RefColumns: []*schema.Column{SystemHazardsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "system_hazard_relationships_system_component_relationship_id",
				Columns:    []*schema.Column{SystemHazardRelationshipsColumns[1]},
				RefColumns: []*schema.Column{SystemComponentRelationshipsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TaskTicketsColumns holds the columns for the "task_tickets" table.
	TaskTicketsColumns = []*schema.Column{
		{Name: "task_id", Type: field.TypeUUID},
		{Name: "ticket_id", Type: field.TypeUUID},
	}
	// TaskTicketsTable holds the schema information for the "task_tickets" table.
	TaskTicketsTable = &schema.Table{
		Name:       "task_tickets",
		Columns:    TaskTicketsColumns,
		PrimaryKey: []*schema.Column{TaskTicketsColumns[0], TaskTicketsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "task_tickets_task_id",
				Columns:    []*schema.Column{TaskTicketsColumns[0]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "task_tickets_ticket_id",
				Columns:    []*schema.Column{TaskTicketsColumns[1]},
				RefColumns: []*schema.Column{TicketsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TeamUsersColumns holds the columns for the "team_users" table.
	TeamUsersColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// TeamUsersTable holds the schema information for the "team_users" table.
	TeamUsersTable = &schema.Table{
		Name:       "team_users",
		Columns:    TeamUsersColumns,
		PrimaryKey: []*schema.Column{TeamUsersColumns[0], TeamUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_users_team_id",
				Columns:    []*schema.Column{TeamUsersColumns[0]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "team_users_user_id",
				Columns:    []*schema.Column{TeamUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TeamOncallRostersColumns holds the columns for the "team_oncall_rosters" table.
	TeamOncallRostersColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeUUID},
		{Name: "oncall_roster_id", Type: field.TypeUUID},
	}
	// TeamOncallRostersTable holds the schema information for the "team_oncall_rosters" table.
	TeamOncallRostersTable = &schema.Table{
		Name:       "team_oncall_rosters",
		Columns:    TeamOncallRostersColumns,
		PrimaryKey: []*schema.Column{TeamOncallRostersColumns[0], TeamOncallRostersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_oncall_rosters_team_id",
				Columns:    []*schema.Column{TeamOncallRostersColumns[0]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "team_oncall_rosters_oncall_roster_id",
				Columns:    []*schema.Column{TeamOncallRostersColumns[1]},
				RefColumns: []*schema.Column{OncallRostersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserWatchedOncallRostersColumns holds the columns for the "user_watched_oncall_rosters" table.
	UserWatchedOncallRostersColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "oncall_roster_id", Type: field.TypeUUID},
	}
	// UserWatchedOncallRostersTable holds the schema information for the "user_watched_oncall_rosters" table.
	UserWatchedOncallRostersTable = &schema.Table{
		Name:       "user_watched_oncall_rosters",
		Columns:    UserWatchedOncallRostersColumns,
		PrimaryKey: []*schema.Column{UserWatchedOncallRostersColumns[0], UserWatchedOncallRostersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_watched_oncall_rosters_user_id",
				Columns:    []*schema.Column{UserWatchedOncallRostersColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_watched_oncall_rosters_oncall_roster_id",
				Columns:    []*schema.Column{UserWatchedOncallRostersColumns[1]},
				RefColumns: []*schema.Column{OncallRostersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AlertsTable,
		AlertFeedbacksTable,
		AlertInstancesTable,
		DocumentsTable,
		EventsTable,
		EventAnnotationsTable,
		IncidentsTable,
		IncidentDebriefsTable,
		IncidentDebriefMessagesTable,
		IncidentDebriefQuestionsTable,
		IncidentDebriefSuggestionsTable,
		IncidentEventsTable,
		IncidentEventContextsTable,
		IncidentEventContributingFactorsTable,
		IncidentEventEvidencesTable,
		IncidentEventSystemComponentsTable,
		IncidentFieldsTable,
		IncidentFieldOptionsTable,
		IncidentLinksTable,
		IncidentMilestonesTable,
		IncidentRolesTable,
		IncidentRoleAssignmentsTable,
		IncidentSeveritiesTable,
		IncidentTagsTable,
		IncidentTypesTable,
		MeetingSchedulesTable,
		MeetingSessionsTable,
		OncallHandoverTemplatesTable,
		OncallRostersTable,
		OncallRosterMetricsTable,
		OncallSchedulesTable,
		OncallScheduleParticipantsTable,
		OncallShiftsTable,
		OncallShiftHandoversTable,
		OncallShiftMetricsTable,
		OrganizationsTable,
		PlaybooksTable,
		ProviderConfigsTable,
		ProviderSyncHistoriesTable,
		RetrospectivesTable,
		RetrospectiveCommentsTable,
		RetrospectiveReviewsTable,
		SystemAnalysesTable,
		SystemAnalysisComponentsTable,
		SystemAnalysisRelationshipsTable,
		SystemComponentsTable,
		SystemComponentConstraintsTable,
		SystemComponentControlsTable,
		SystemComponentKindsTable,
		SystemComponentRelationshipsTable,
		SystemComponentSignalsTable,
		SystemHazardsTable,
		SystemRelationshipControlActionsTable,
		SystemRelationshipFeedbackSignalsTable,
		TasksTable,
		TeamsTable,
		TenantsTable,
		TicketsTable,
		UsersTable,
		IncidentFieldSelectionsTable,
		IncidentTagAssignmentsTable,
		IncidentReviewSessionsTable,
		IncidentDebriefQuestionIncidentFieldsTable,
		IncidentDebriefQuestionIncidentRolesTable,
		IncidentDebriefQuestionIncidentSeveritiesTable,
		IncidentDebriefQuestionIncidentTagsTable,
		IncidentDebriefQuestionIncidentTypesTable,
		MeetingScheduleOwningTeamTable,
		OncallShiftHandoverPinnedAnnotationsTable,
		PlaybookAlertsTable,
		SystemHazardComponentsTable,
		SystemHazardConstraintsTable,
		SystemHazardRelationshipsTable,
		TaskTicketsTable,
		TeamUsersTable,
		TeamOncallRostersTable,
		UserWatchedOncallRostersTable,
	}
)

func init() {
	AlertsTable.ForeignKeys[0].RefTable = TenantsTable
	AlertsTable.ForeignKeys[1].RefTable = OncallRostersTable
	AlertFeedbacksTable.ForeignKeys[0].RefTable = TenantsTable
	AlertFeedbacksTable.ForeignKeys[1].RefTable = AlertInstancesTable
	AlertInstancesTable.ForeignKeys[0].RefTable = AlertsTable
	AlertInstancesTable.ForeignKeys[1].RefTable = TenantsTable
	AlertInstancesTable.ForeignKeys[2].RefTable = AlertsTable
	AlertInstancesTable.ForeignKeys[3].RefTable = EventsTable
	AlertInstancesTable.ForeignKeys[4].RefTable = AlertFeedbacksTable
	DocumentsTable.ForeignKeys[0].RefTable = TenantsTable
	EventsTable.ForeignKeys[0].RefTable = TenantsTable
	EventAnnotationsTable.ForeignKeys[0].RefTable = TenantsTable
	EventAnnotationsTable.ForeignKeys[1].RefTable = EventsTable
	EventAnnotationsTable.ForeignKeys[2].RefTable = UsersTable
	IncidentsTable.ForeignKeys[0].RefTable = TenantsTable
	IncidentsTable.ForeignKeys[1].RefTable = IncidentSeveritiesTable
	IncidentsTable.ForeignKeys[2].RefTable = IncidentTypesTable
	IncidentDebriefsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentDebriefsTable.ForeignKeys[1].RefTable = TenantsTable
	IncidentDebriefsTable.ForeignKeys[2].RefTable = UsersTable
	IncidentDebriefMessagesTable.ForeignKeys[0].RefTable = IncidentDebriefsTable
	IncidentDebriefMessagesTable.ForeignKeys[1].RefTable = TenantsTable
	IncidentDebriefMessagesTable.ForeignKeys[2].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionsTable.ForeignKeys[0].RefTable = TenantsTable
	IncidentDebriefSuggestionsTable.ForeignKeys[0].RefTable = IncidentDebriefsTable
	IncidentDebriefSuggestionsTable.ForeignKeys[1].RefTable = TenantsTable
	IncidentEventsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentEventsTable.ForeignKeys[1].RefTable = TenantsTable
	IncidentEventsTable.ForeignKeys[2].RefTable = EventsTable
	IncidentEventContextsTable.ForeignKeys[0].RefTable = IncidentEventsTable
	IncidentEventContextsTable.ForeignKeys[1].RefTable = TenantsTable
	IncidentEventContributingFactorsTable.ForeignKeys[0].RefTable = IncidentEventsTable
	IncidentEventContributingFactorsTable.ForeignKeys[1].RefTable = TenantsTable
	IncidentEventEvidencesTable.ForeignKeys[0].RefTable = IncidentEventsTable
	IncidentEventEvidencesTable.ForeignKeys[1].RefTable = TenantsTable
	IncidentEventSystemComponentsTable.ForeignKeys[0].RefTable = TenantsTable
	IncidentEventSystemComponentsTable.ForeignKeys[1].RefTable = IncidentEventSystemComponentsTable
	IncidentEventSystemComponentsTable.ForeignKeys[2].RefTable = SystemComponentsTable
	IncidentFieldsTable.ForeignKeys[0].RefTable = TenantsTable
	IncidentFieldOptionsTable.ForeignKeys[0].RefTable = IncidentFieldsTable
	IncidentFieldOptionsTable.ForeignKeys[1].RefTable = TenantsTable
	IncidentLinksTable.ForeignKeys[0].RefTable = TenantsTable
	IncidentLinksTable.ForeignKeys[1].RefTable = IncidentsTable
	IncidentLinksTable.ForeignKeys[2].RefTable = IncidentsTable
	IncidentMilestonesTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentMilestonesTable.ForeignKeys[1].RefTable = TenantsTable
	IncidentRolesTable.ForeignKeys[0].RefTable = TenantsTable
	IncidentRoleAssignmentsTable.ForeignKeys[0].RefTable = TenantsTable
	IncidentRoleAssignmentsTable.ForeignKeys[1].RefTable = IncidentsTable
	IncidentRoleAssignmentsTable.ForeignKeys[2].RefTable = UsersTable
	IncidentRoleAssignmentsTable.ForeignKeys[3].RefTable = IncidentRolesTable
	IncidentSeveritiesTable.ForeignKeys[0].RefTable = TenantsTable
	IncidentTagsTable.ForeignKeys[0].RefTable = TenantsTable
	IncidentTypesTable.ForeignKeys[0].RefTable = TenantsTable
	MeetingSchedulesTable.ForeignKeys[0].RefTable = TenantsTable
	MeetingSessionsTable.ForeignKeys[0].RefTable = TenantsTable
	MeetingSessionsTable.ForeignKeys[1].RefTable = MeetingSchedulesTable
	OncallHandoverTemplatesTable.ForeignKeys[0].RefTable = TenantsTable
	OncallRostersTable.ForeignKeys[0].RefTable = OncallHandoverTemplatesTable
	OncallRostersTable.ForeignKeys[1].RefTable = TenantsTable
	OncallRosterMetricsTable.ForeignKeys[0].RefTable = TenantsTable
	OncallRosterMetricsTable.ForeignKeys[1].RefTable = OncallRostersTable
	OncallSchedulesTable.ForeignKeys[0].RefTable = OncallRostersTable
	OncallSchedulesTable.ForeignKeys[1].RefTable = TenantsTable
	OncallScheduleParticipantsTable.ForeignKeys[0].RefTable = OncallSchedulesTable
	OncallScheduleParticipantsTable.ForeignKeys[1].RefTable = TenantsTable
	OncallScheduleParticipantsTable.ForeignKeys[2].RefTable = UsersTable
	OncallShiftsTable.ForeignKeys[0].RefTable = TenantsTable
	OncallShiftsTable.ForeignKeys[1].RefTable = UsersTable
	OncallShiftsTable.ForeignKeys[2].RefTable = OncallRostersTable
	OncallShiftsTable.ForeignKeys[3].RefTable = OncallShiftsTable
	OncallShiftHandoversTable.ForeignKeys[0].RefTable = OncallShiftsTable
	OncallShiftHandoversTable.ForeignKeys[1].RefTable = TenantsTable
	OncallShiftMetricsTable.ForeignKeys[0].RefTable = OncallShiftsTable
	OncallShiftMetricsTable.ForeignKeys[1].RefTable = TenantsTable
	OrganizationsTable.ForeignKeys[0].RefTable = TenantsTable
	PlaybooksTable.ForeignKeys[0].RefTable = TenantsTable
	ProviderConfigsTable.ForeignKeys[0].RefTable = TenantsTable
	ProviderSyncHistoriesTable.ForeignKeys[0].RefTable = TenantsTable
	RetrospectivesTable.ForeignKeys[0].RefTable = DocumentsTable
	RetrospectivesTable.ForeignKeys[1].RefTable = IncidentsTable
	RetrospectivesTable.ForeignKeys[2].RefTable = TenantsTable
	RetrospectivesTable.ForeignKeys[3].RefTable = SystemAnalysesTable
	RetrospectiveCommentsTable.ForeignKeys[0].RefTable = TenantsTable
	RetrospectiveCommentsTable.ForeignKeys[1].RefTable = RetrospectivesTable
	RetrospectiveCommentsTable.ForeignKeys[2].RefTable = UsersTable
	RetrospectiveCommentsTable.ForeignKeys[3].RefTable = RetrospectiveReviewsTable
	RetrospectiveCommentsTable.ForeignKeys[4].RefTable = RetrospectiveCommentsTable
	RetrospectiveReviewsTable.ForeignKeys[0].RefTable = TenantsTable
	RetrospectiveReviewsTable.ForeignKeys[1].RefTable = RetrospectivesTable
	RetrospectiveReviewsTable.ForeignKeys[2].RefTable = UsersTable
	RetrospectiveReviewsTable.ForeignKeys[3].RefTable = UsersTable
	RetrospectiveReviewsTable.ForeignKeys[4].RefTable = RetrospectiveCommentsTable
	SystemAnalysesTable.ForeignKeys[0].RefTable = TenantsTable
	SystemAnalysisComponentsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemAnalysisComponentsTable.ForeignKeys[1].RefTable = SystemAnalysesTable
	SystemAnalysisComponentsTable.ForeignKeys[2].RefTable = SystemComponentsTable
	SystemAnalysisRelationshipsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemAnalysisRelationshipsTable.ForeignKeys[1].RefTable = SystemAnalysesTable
	SystemAnalysisRelationshipsTable.ForeignKeys[2].RefTable = SystemComponentRelationshipsTable
	SystemComponentsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemComponentsTable.ForeignKeys[1].RefTable = SystemComponentKindsTable
	SystemComponentConstraintsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemComponentConstraintsTable.ForeignKeys[1].RefTable = SystemComponentsTable
	SystemComponentControlsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemComponentControlsTable.ForeignKeys[1].RefTable = SystemComponentsTable
	SystemComponentKindsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemComponentRelationshipsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemComponentRelationshipsTable.ForeignKeys[1].RefTable = SystemComponentsTable
	SystemComponentRelationshipsTable.ForeignKeys[2].RefTable = SystemComponentsTable
	SystemComponentSignalsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemComponentSignalsTable.ForeignKeys[1].RefTable = SystemComponentsTable
	SystemHazardsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemRelationshipControlActionsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemRelationshipControlActionsTable.ForeignKeys[1].RefTable = SystemAnalysisRelationshipsTable
	SystemRelationshipControlActionsTable.ForeignKeys[2].RefTable = SystemComponentControlsTable
	SystemRelationshipFeedbackSignalsTable.ForeignKeys[0].RefTable = TenantsTable
	SystemRelationshipFeedbackSignalsTable.ForeignKeys[1].RefTable = SystemAnalysisRelationshipsTable
	SystemRelationshipFeedbackSignalsTable.ForeignKeys[2].RefTable = SystemComponentSignalsTable
	TasksTable.ForeignKeys[0].RefTable = IncidentsTable
	TasksTable.ForeignKeys[1].RefTable = TenantsTable
	TasksTable.ForeignKeys[2].RefTable = UsersTable
	TasksTable.ForeignKeys[3].RefTable = UsersTable
	TeamsTable.ForeignKeys[0].RefTable = TenantsTable
	TicketsTable.ForeignKeys[0].RefTable = TenantsTable
	UsersTable.ForeignKeys[0].RefTable = TenantsTable
	IncidentFieldSelectionsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentFieldSelectionsTable.ForeignKeys[1].RefTable = IncidentFieldOptionsTable
	IncidentTagAssignmentsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentTagAssignmentsTable.ForeignKeys[1].RefTable = IncidentTagsTable
	IncidentReviewSessionsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentReviewSessionsTable.ForeignKeys[1].RefTable = MeetingSessionsTable
	IncidentDebriefQuestionIncidentFieldsTable.ForeignKeys[0].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionIncidentFieldsTable.ForeignKeys[1].RefTable = IncidentFieldsTable
	IncidentDebriefQuestionIncidentRolesTable.ForeignKeys[0].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionIncidentRolesTable.ForeignKeys[1].RefTable = IncidentRolesTable
	IncidentDebriefQuestionIncidentSeveritiesTable.ForeignKeys[0].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionIncidentSeveritiesTable.ForeignKeys[1].RefTable = IncidentSeveritiesTable
	IncidentDebriefQuestionIncidentTagsTable.ForeignKeys[0].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionIncidentTagsTable.ForeignKeys[1].RefTable = IncidentTagsTable
	IncidentDebriefQuestionIncidentTypesTable.ForeignKeys[0].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionIncidentTypesTable.ForeignKeys[1].RefTable = IncidentTypesTable
	MeetingScheduleOwningTeamTable.ForeignKeys[0].RefTable = MeetingSchedulesTable
	MeetingScheduleOwningTeamTable.ForeignKeys[1].RefTable = TeamsTable
	OncallShiftHandoverPinnedAnnotationsTable.ForeignKeys[0].RefTable = OncallShiftHandoversTable
	OncallShiftHandoverPinnedAnnotationsTable.ForeignKeys[1].RefTable = EventAnnotationsTable
	PlaybookAlertsTable.ForeignKeys[0].RefTable = PlaybooksTable
	PlaybookAlertsTable.ForeignKeys[1].RefTable = AlertsTable
	SystemHazardComponentsTable.ForeignKeys[0].RefTable = SystemHazardsTable
	SystemHazardComponentsTable.ForeignKeys[1].RefTable = SystemComponentsTable
	SystemHazardConstraintsTable.ForeignKeys[0].RefTable = SystemHazardsTable
	SystemHazardConstraintsTable.ForeignKeys[1].RefTable = SystemComponentConstraintsTable
	SystemHazardRelationshipsTable.ForeignKeys[0].RefTable = SystemHazardsTable
	SystemHazardRelationshipsTable.ForeignKeys[1].RefTable = SystemComponentRelationshipsTable
	TaskTicketsTable.ForeignKeys[0].RefTable = TasksTable
	TaskTicketsTable.ForeignKeys[1].RefTable = TicketsTable
	TeamUsersTable.ForeignKeys[0].RefTable = TeamsTable
	TeamUsersTable.ForeignKeys[1].RefTable = UsersTable
	TeamOncallRostersTable.ForeignKeys[0].RefTable = TeamsTable
	TeamOncallRostersTable.ForeignKeys[1].RefTable = OncallRostersTable
	UserWatchedOncallRostersTable.ForeignKeys[0].RefTable = UsersTable
	UserWatchedOncallRostersTable.ForeignKeys[1].RefTable = OncallRostersTable
}
