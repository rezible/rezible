// Code generated by ent, DO NOT EDIT.

package event

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeAlertInstance holds the string denoting the alert_instance edge name in mutations.
	EdgeAlertInstance = "alert_instance"
	// EdgeIncidentEvent holds the string denoting the incident_event edge name in mutations.
	EdgeIncidentEvent = "incident_event"
	// EdgeAnnotations holds the string denoting the annotations edge name in mutations.
	EdgeAnnotations = "annotations"
	// Table holds the table name of the event in the database.
	Table = "events"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "events"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// AlertInstanceTable is the table that holds the alert_instance relation/edge.
	AlertInstanceTable = "alert_instances"
	// AlertInstanceInverseTable is the table name for the AlertInstance entity.
	// It exists in this package in order to avoid circular dependency with the "alertinstance" package.
	AlertInstanceInverseTable = "alert_instances"
	// AlertInstanceColumn is the table column denoting the alert_instance relation/edge.
	AlertInstanceColumn = "event_id"
	// IncidentEventTable is the table that holds the incident_event relation/edge.
	IncidentEventTable = "incident_events"
	// IncidentEventInverseTable is the table name for the IncidentEvent entity.
	// It exists in this package in order to avoid circular dependency with the "incidentevent" package.
	IncidentEventInverseTable = "incident_events"
	// IncidentEventColumn is the table column denoting the incident_event relation/edge.
	IncidentEventColumn = "event_id"
	// AnnotationsTable is the table that holds the annotations relation/edge.
	AnnotationsTable = "event_annotations"
	// AnnotationsInverseTable is the table name for the EventAnnotation entity.
	// It exists in this package in order to avoid circular dependency with the "eventannotation" package.
	AnnotationsInverseTable = "event_annotations"
	// AnnotationsColumn is the table column denoting the annotations relation/edge.
	AnnotationsColumn = "event_id"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldProviderID,
	FieldTimestamp,
	FieldKind,
	FieldTitle,
	FieldDescription,
	FieldSource,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindAlert     Kind = "alert"
	KindInterrupt Kind = "interrupt"
	KindMessage   Kind = "message"
	KindOther     Kind = "other"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindAlert, KindInterrupt, KindMessage, KindOther:
		return nil
	default:
		return fmt.Errorf("event: invalid enum value for kind field: %q", k)
	}
}

// OrderOption defines the ordering options for the Event queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByAlertInstanceCount orders the results by alert_instance count.
func ByAlertInstanceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAlertInstanceStep(), opts...)
	}
}

// ByAlertInstance orders the results by alert_instance terms.
func ByAlertInstance(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlertInstanceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncidentEventCount orders the results by incident_event count.
func ByIncidentEventCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentEventStep(), opts...)
	}
}

// ByIncidentEvent orders the results by incident_event terms.
func ByIncidentEvent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentEventStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAnnotationsCount orders the results by annotations count.
func ByAnnotationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnnotationsStep(), opts...)
	}
}

// ByAnnotations orders the results by annotations terms.
func ByAnnotations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnnotationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newAlertInstanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlertInstanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AlertInstanceTable, AlertInstanceColumn),
	)
}
func newIncidentEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentEventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, IncidentEventTable, IncidentEventColumn),
	)
}
func newAnnotationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnnotationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AnnotationsTable, AnnotationsColumn),
	)
}
