// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/eventannotation"
	"github.com/rezible/rezible/ent/oncallshifthandover"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// EventAnnotationCreate is the builder for creating a EventAnnotation entity.
type EventAnnotationCreate struct {
	config
	mutation *EventAnnotationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (eac *EventAnnotationCreate) SetTenantID(i int) *EventAnnotationCreate {
	eac.mutation.SetTenantID(i)
	return eac
}

// SetEventID sets the "event_id" field.
func (eac *EventAnnotationCreate) SetEventID(u uuid.UUID) *EventAnnotationCreate {
	eac.mutation.SetEventID(u)
	return eac
}

// SetCreatorID sets the "creator_id" field.
func (eac *EventAnnotationCreate) SetCreatorID(u uuid.UUID) *EventAnnotationCreate {
	eac.mutation.SetCreatorID(u)
	return eac
}

// SetCreatedAt sets the "created_at" field.
func (eac *EventAnnotationCreate) SetCreatedAt(t time.Time) *EventAnnotationCreate {
	eac.mutation.SetCreatedAt(t)
	return eac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eac *EventAnnotationCreate) SetNillableCreatedAt(t *time.Time) *EventAnnotationCreate {
	if t != nil {
		eac.SetCreatedAt(*t)
	}
	return eac
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (eac *EventAnnotationCreate) SetMinutesOccupied(i int) *EventAnnotationCreate {
	eac.mutation.SetMinutesOccupied(i)
	return eac
}

// SetNotes sets the "notes" field.
func (eac *EventAnnotationCreate) SetNotes(s string) *EventAnnotationCreate {
	eac.mutation.SetNotes(s)
	return eac
}

// SetTags sets the "tags" field.
func (eac *EventAnnotationCreate) SetTags(s []string) *EventAnnotationCreate {
	eac.mutation.SetTags(s)
	return eac
}

// SetID sets the "id" field.
func (eac *EventAnnotationCreate) SetID(u uuid.UUID) *EventAnnotationCreate {
	eac.mutation.SetID(u)
	return eac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (eac *EventAnnotationCreate) SetNillableID(u *uuid.UUID) *EventAnnotationCreate {
	if u != nil {
		eac.SetID(*u)
	}
	return eac
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (eac *EventAnnotationCreate) SetTenant(t *Tenant) *EventAnnotationCreate {
	return eac.SetTenantID(t.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (eac *EventAnnotationCreate) SetEvent(e *Event) *EventAnnotationCreate {
	return eac.SetEventID(e.ID)
}

// SetCreator sets the "creator" edge to the User entity.
func (eac *EventAnnotationCreate) SetCreator(u *User) *EventAnnotationCreate {
	return eac.SetCreatorID(u.ID)
}

// AddHandoverIDs adds the "handovers" edge to the OncallShiftHandover entity by IDs.
func (eac *EventAnnotationCreate) AddHandoverIDs(ids ...uuid.UUID) *EventAnnotationCreate {
	eac.mutation.AddHandoverIDs(ids...)
	return eac
}

// AddHandovers adds the "handovers" edges to the OncallShiftHandover entity.
func (eac *EventAnnotationCreate) AddHandovers(o ...*OncallShiftHandover) *EventAnnotationCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eac.AddHandoverIDs(ids...)
}

// Mutation returns the EventAnnotationMutation object of the builder.
func (eac *EventAnnotationCreate) Mutation() *EventAnnotationMutation {
	return eac.mutation
}

// Save creates the EventAnnotation in the database.
func (eac *EventAnnotationCreate) Save(ctx context.Context) (*EventAnnotation, error) {
	if err := eac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, eac.sqlSave, eac.mutation, eac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eac *EventAnnotationCreate) SaveX(ctx context.Context) *EventAnnotation {
	v, err := eac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eac *EventAnnotationCreate) Exec(ctx context.Context) error {
	_, err := eac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eac *EventAnnotationCreate) ExecX(ctx context.Context) {
	if err := eac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eac *EventAnnotationCreate) defaults() error {
	if _, ok := eac.mutation.CreatedAt(); !ok {
		if eventannotation.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized eventannotation.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := eventannotation.DefaultCreatedAt()
		eac.mutation.SetCreatedAt(v)
	}
	if _, ok := eac.mutation.ID(); !ok {
		if eventannotation.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized eventannotation.DefaultID (forgotten import ent/runtime?)")
		}
		v := eventannotation.DefaultID()
		eac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eac *EventAnnotationCreate) check() error {
	if _, ok := eac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "EventAnnotation.tenant_id"`)}
	}
	if _, ok := eac.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "EventAnnotation.event_id"`)}
	}
	if _, ok := eac.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "EventAnnotation.creator_id"`)}
	}
	if _, ok := eac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EventAnnotation.created_at"`)}
	}
	if _, ok := eac.mutation.MinutesOccupied(); !ok {
		return &ValidationError{Name: "minutes_occupied", err: errors.New(`ent: missing required field "EventAnnotation.minutes_occupied"`)}
	}
	if _, ok := eac.mutation.Notes(); !ok {
		return &ValidationError{Name: "notes", err: errors.New(`ent: missing required field "EventAnnotation.notes"`)}
	}
	if _, ok := eac.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "EventAnnotation.tags"`)}
	}
	if len(eac.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "EventAnnotation.tenant"`)}
	}
	if len(eac.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "EventAnnotation.event"`)}
	}
	if len(eac.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "EventAnnotation.creator"`)}
	}
	return nil
}

func (eac *EventAnnotationCreate) sqlSave(ctx context.Context) (*EventAnnotation, error) {
	if err := eac.check(); err != nil {
		return nil, err
	}
	_node, _spec := eac.createSpec()
	if err := sqlgraph.CreateNode(ctx, eac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	eac.mutation.id = &_node.ID
	eac.mutation.done = true
	return _node, nil
}

func (eac *EventAnnotationCreate) createSpec() (*EventAnnotation, *sqlgraph.CreateSpec) {
	var (
		_node = &EventAnnotation{config: eac.config}
		_spec = sqlgraph.NewCreateSpec(eventannotation.Table, sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = eac.conflict
	if id, ok := eac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := eac.mutation.CreatedAt(); ok {
		_spec.SetField(eventannotation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := eac.mutation.MinutesOccupied(); ok {
		_spec.SetField(eventannotation.FieldMinutesOccupied, field.TypeInt, value)
		_node.MinutesOccupied = value
	}
	if value, ok := eac.mutation.Notes(); ok {
		_spec.SetField(eventannotation.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := eac.mutation.Tags(); ok {
		_spec.SetField(eventannotation.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if nodes := eac.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.TenantTable,
			Columns: []string{eventannotation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.EventTable,
			Columns: []string{eventannotation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.CreatorTable,
			Columns: []string{eventannotation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.HandoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventannotation.HandoversTable,
			Columns: eventannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventAnnotation.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventAnnotationUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (eac *EventAnnotationCreate) OnConflict(opts ...sql.ConflictOption) *EventAnnotationUpsertOne {
	eac.conflict = opts
	return &EventAnnotationUpsertOne{
		create: eac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventAnnotation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eac *EventAnnotationCreate) OnConflictColumns(columns ...string) *EventAnnotationUpsertOne {
	eac.conflict = append(eac.conflict, sql.ConflictColumns(columns...))
	return &EventAnnotationUpsertOne{
		create: eac,
	}
}

type (
	// EventAnnotationUpsertOne is the builder for "upsert"-ing
	//  one EventAnnotation node.
	EventAnnotationUpsertOne struct {
		create *EventAnnotationCreate
	}

	// EventAnnotationUpsert is the "OnConflict" setter.
	EventAnnotationUpsert struct {
		*sql.UpdateSet
	}
)

// SetEventID sets the "event_id" field.
func (u *EventAnnotationUpsert) SetEventID(v uuid.UUID) *EventAnnotationUpsert {
	u.Set(eventannotation.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventAnnotationUpsert) UpdateEventID() *EventAnnotationUpsert {
	u.SetExcluded(eventannotation.FieldEventID)
	return u
}

// SetCreatorID sets the "creator_id" field.
func (u *EventAnnotationUpsert) SetCreatorID(v uuid.UUID) *EventAnnotationUpsert {
	u.Set(eventannotation.FieldCreatorID, v)
	return u
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *EventAnnotationUpsert) UpdateCreatorID() *EventAnnotationUpsert {
	u.SetExcluded(eventannotation.FieldCreatorID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EventAnnotationUpsert) SetCreatedAt(v time.Time) *EventAnnotationUpsert {
	u.Set(eventannotation.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventAnnotationUpsert) UpdateCreatedAt() *EventAnnotationUpsert {
	u.SetExcluded(eventannotation.FieldCreatedAt)
	return u
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (u *EventAnnotationUpsert) SetMinutesOccupied(v int) *EventAnnotationUpsert {
	u.Set(eventannotation.FieldMinutesOccupied, v)
	return u
}

// UpdateMinutesOccupied sets the "minutes_occupied" field to the value that was provided on create.
func (u *EventAnnotationUpsert) UpdateMinutesOccupied() *EventAnnotationUpsert {
	u.SetExcluded(eventannotation.FieldMinutesOccupied)
	return u
}

// AddMinutesOccupied adds v to the "minutes_occupied" field.
func (u *EventAnnotationUpsert) AddMinutesOccupied(v int) *EventAnnotationUpsert {
	u.Add(eventannotation.FieldMinutesOccupied, v)
	return u
}

// SetNotes sets the "notes" field.
func (u *EventAnnotationUpsert) SetNotes(v string) *EventAnnotationUpsert {
	u.Set(eventannotation.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *EventAnnotationUpsert) UpdateNotes() *EventAnnotationUpsert {
	u.SetExcluded(eventannotation.FieldNotes)
	return u
}

// SetTags sets the "tags" field.
func (u *EventAnnotationUpsert) SetTags(v []string) *EventAnnotationUpsert {
	u.Set(eventannotation.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *EventAnnotationUpsert) UpdateTags() *EventAnnotationUpsert {
	u.SetExcluded(eventannotation.FieldTags)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EventAnnotation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(eventannotation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EventAnnotationUpsertOne) UpdateNewValues() *EventAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(eventannotation.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(eventannotation.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventAnnotation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventAnnotationUpsertOne) Ignore() *EventAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventAnnotationUpsertOne) DoNothing() *EventAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventAnnotationCreate.OnConflict
// documentation for more info.
func (u *EventAnnotationUpsertOne) Update(set func(*EventAnnotationUpsert)) *EventAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventAnnotationUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *EventAnnotationUpsertOne) SetEventID(v uuid.UUID) *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventAnnotationUpsertOne) UpdateEventID() *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateEventID()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *EventAnnotationUpsertOne) SetCreatorID(v uuid.UUID) *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *EventAnnotationUpsertOne) UpdateCreatorID() *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateCreatorID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *EventAnnotationUpsertOne) SetCreatedAt(v time.Time) *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventAnnotationUpsertOne) UpdateCreatedAt() *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (u *EventAnnotationUpsertOne) SetMinutesOccupied(v int) *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetMinutesOccupied(v)
	})
}

// AddMinutesOccupied adds v to the "minutes_occupied" field.
func (u *EventAnnotationUpsertOne) AddMinutesOccupied(v int) *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.AddMinutesOccupied(v)
	})
}

// UpdateMinutesOccupied sets the "minutes_occupied" field to the value that was provided on create.
func (u *EventAnnotationUpsertOne) UpdateMinutesOccupied() *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateMinutesOccupied()
	})
}

// SetNotes sets the "notes" field.
func (u *EventAnnotationUpsertOne) SetNotes(v string) *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *EventAnnotationUpsertOne) UpdateNotes() *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateNotes()
	})
}

// SetTags sets the "tags" field.
func (u *EventAnnotationUpsertOne) SetTags(v []string) *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *EventAnnotationUpsertOne) UpdateTags() *EventAnnotationUpsertOne {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateTags()
	})
}

// Exec executes the query.
func (u *EventAnnotationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventAnnotationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventAnnotationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventAnnotationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EventAnnotationUpsertOne.ID is not supported by MySQL driver. Use EventAnnotationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventAnnotationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventAnnotationCreateBulk is the builder for creating many EventAnnotation entities in bulk.
type EventAnnotationCreateBulk struct {
	config
	err      error
	builders []*EventAnnotationCreate
	conflict []sql.ConflictOption
}

// Save creates the EventAnnotation entities in the database.
func (eacb *EventAnnotationCreateBulk) Save(ctx context.Context) ([]*EventAnnotation, error) {
	if eacb.err != nil {
		return nil, eacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eacb.builders))
	nodes := make([]*EventAnnotation, len(eacb.builders))
	mutators := make([]Mutator, len(eacb.builders))
	for i := range eacb.builders {
		func(i int, root context.Context) {
			builder := eacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventAnnotationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = eacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eacb *EventAnnotationCreateBulk) SaveX(ctx context.Context) []*EventAnnotation {
	v, err := eacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eacb *EventAnnotationCreateBulk) Exec(ctx context.Context) error {
	_, err := eacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eacb *EventAnnotationCreateBulk) ExecX(ctx context.Context) {
	if err := eacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventAnnotation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventAnnotationUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (eacb *EventAnnotationCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventAnnotationUpsertBulk {
	eacb.conflict = opts
	return &EventAnnotationUpsertBulk{
		create: eacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventAnnotation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eacb *EventAnnotationCreateBulk) OnConflictColumns(columns ...string) *EventAnnotationUpsertBulk {
	eacb.conflict = append(eacb.conflict, sql.ConflictColumns(columns...))
	return &EventAnnotationUpsertBulk{
		create: eacb,
	}
}

// EventAnnotationUpsertBulk is the builder for "upsert"-ing
// a bulk of EventAnnotation nodes.
type EventAnnotationUpsertBulk struct {
	create *EventAnnotationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EventAnnotation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(eventannotation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EventAnnotationUpsertBulk) UpdateNewValues() *EventAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(eventannotation.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(eventannotation.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventAnnotation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventAnnotationUpsertBulk) Ignore() *EventAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventAnnotationUpsertBulk) DoNothing() *EventAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventAnnotationCreateBulk.OnConflict
// documentation for more info.
func (u *EventAnnotationUpsertBulk) Update(set func(*EventAnnotationUpsert)) *EventAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventAnnotationUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *EventAnnotationUpsertBulk) SetEventID(v uuid.UUID) *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventAnnotationUpsertBulk) UpdateEventID() *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateEventID()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *EventAnnotationUpsertBulk) SetCreatorID(v uuid.UUID) *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *EventAnnotationUpsertBulk) UpdateCreatorID() *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateCreatorID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *EventAnnotationUpsertBulk) SetCreatedAt(v time.Time) *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventAnnotationUpsertBulk) UpdateCreatedAt() *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (u *EventAnnotationUpsertBulk) SetMinutesOccupied(v int) *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetMinutesOccupied(v)
	})
}

// AddMinutesOccupied adds v to the "minutes_occupied" field.
func (u *EventAnnotationUpsertBulk) AddMinutesOccupied(v int) *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.AddMinutesOccupied(v)
	})
}

// UpdateMinutesOccupied sets the "minutes_occupied" field to the value that was provided on create.
func (u *EventAnnotationUpsertBulk) UpdateMinutesOccupied() *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateMinutesOccupied()
	})
}

// SetNotes sets the "notes" field.
func (u *EventAnnotationUpsertBulk) SetNotes(v string) *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *EventAnnotationUpsertBulk) UpdateNotes() *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateNotes()
	})
}

// SetTags sets the "tags" field.
func (u *EventAnnotationUpsertBulk) SetTags(v []string) *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *EventAnnotationUpsertBulk) UpdateTags() *EventAnnotationUpsertBulk {
	return u.Update(func(s *EventAnnotationUpsert) {
		s.UpdateTags()
	})
}

// Exec executes the query.
func (u *EventAnnotationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventAnnotationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventAnnotationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventAnnotationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
