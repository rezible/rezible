// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/eventannotation"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// EventAnnotation is the model entity for the EventAnnotation schema.
type EventAnnotation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID uuid.UUID `json:"event_id,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID uuid.UUID `json:"creator_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// MinutesOccupied holds the value of the "minutes_occupied" field.
	MinutesOccupied int `json:"minutes_occupied,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventAnnotationQuery when eager-loading is set.
	Edges        EventAnnotationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventAnnotationEdges holds the relations/edges for other nodes in the graph.
type EventAnnotationEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Handovers holds the value of the handovers edge.
	Handovers []*OncallShiftHandover `json:"handovers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventAnnotationEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventAnnotationEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventAnnotationEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// HandoversOrErr returns the Handovers value or an error if the edge
// was not loaded in eager-loading.
func (e EventAnnotationEdges) HandoversOrErr() ([]*OncallShiftHandover, error) {
	if e.loadedTypes[3] {
		return e.Handovers, nil
	}
	return nil, &NotLoadedError{edge: "handovers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventAnnotation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventannotation.FieldTags:
			values[i] = new([]byte)
		case eventannotation.FieldTenantID, eventannotation.FieldMinutesOccupied:
			values[i] = new(sql.NullInt64)
		case eventannotation.FieldNotes:
			values[i] = new(sql.NullString)
		case eventannotation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case eventannotation.FieldID, eventannotation.FieldEventID, eventannotation.FieldCreatorID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventAnnotation fields.
func (ea *EventAnnotation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventannotation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ea.ID = *value
			}
		case eventannotation.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ea.TenantID = int(value.Int64)
			}
		case eventannotation.FieldEventID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value != nil {
				ea.EventID = *value
			}
		case eventannotation.FieldCreatorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value != nil {
				ea.CreatorID = *value
			}
		case eventannotation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ea.CreatedAt = value.Time
			}
		case eventannotation.FieldMinutesOccupied:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minutes_occupied", values[i])
			} else if value.Valid {
				ea.MinutesOccupied = int(value.Int64)
			}
		case eventannotation.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				ea.Notes = value.String
			}
		case eventannotation.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ea.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		default:
			ea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventAnnotation.
// This includes values selected through modifiers, order, etc.
func (ea *EventAnnotation) Value(name string) (ent.Value, error) {
	return ea.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the EventAnnotation entity.
func (ea *EventAnnotation) QueryTenant() *TenantQuery {
	return NewEventAnnotationClient(ea.config).QueryTenant(ea)
}

// QueryEvent queries the "event" edge of the EventAnnotation entity.
func (ea *EventAnnotation) QueryEvent() *EventQuery {
	return NewEventAnnotationClient(ea.config).QueryEvent(ea)
}

// QueryCreator queries the "creator" edge of the EventAnnotation entity.
func (ea *EventAnnotation) QueryCreator() *UserQuery {
	return NewEventAnnotationClient(ea.config).QueryCreator(ea)
}

// QueryHandovers queries the "handovers" edge of the EventAnnotation entity.
func (ea *EventAnnotation) QueryHandovers() *OncallShiftHandoverQuery {
	return NewEventAnnotationClient(ea.config).QueryHandovers(ea)
}

// Update returns a builder for updating this EventAnnotation.
// Note that you need to call EventAnnotation.Unwrap() before calling this method if this EventAnnotation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EventAnnotation) Update() *EventAnnotationUpdateOne {
	return NewEventAnnotationClient(ea.config).UpdateOne(ea)
}

// Unwrap unwraps the EventAnnotation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EventAnnotation) Unwrap() *EventAnnotation {
	_tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventAnnotation is not a transactional entity")
	}
	ea.config.driver = _tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EventAnnotation) String() string {
	var builder strings.Builder
	builder.WriteString("EventAnnotation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ea.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ea.TenantID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", ea.EventID))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", ea.CreatorID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ea.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("minutes_occupied=")
	builder.WriteString(fmt.Sprintf("%v", ea.MinutesOccupied))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(ea.Notes)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ea.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// EventAnnotations is a parsable slice of EventAnnotation.
type EventAnnotations []*EventAnnotation
