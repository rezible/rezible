// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID string `json:"chat_id,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// Confirmed holds the value of the "confirmed" field.
	Confirmed bool `json:"confirmed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Teams holds the value of the teams edge.
	Teams []*Team `json:"teams,omitempty"`
	// WatchedOncallRosters holds the value of the watched_oncall_rosters edge.
	WatchedOncallRosters []*OncallRoster `json:"watched_oncall_rosters,omitempty"`
	// OncallSchedules holds the value of the oncall_schedules edge.
	OncallSchedules []*OncallScheduleParticipant `json:"oncall_schedules,omitempty"`
	// OncallShifts holds the value of the oncall_shifts edge.
	OncallShifts []*OncallShift `json:"oncall_shifts,omitempty"`
	// EventAnnotations holds the value of the event_annotations edge.
	EventAnnotations []*EventAnnotation `json:"event_annotations,omitempty"`
	// Incidents holds the value of the incidents edge.
	Incidents []*Incident `json:"incidents,omitempty"`
	// IncidentDebriefs holds the value of the incident_debriefs edge.
	IncidentDebriefs []*IncidentDebrief `json:"incident_debriefs,omitempty"`
	// AssignedTasks holds the value of the assigned_tasks edge.
	AssignedTasks []*Task `json:"assigned_tasks,omitempty"`
	// CreatedTasks holds the value of the created_tasks edge.
	CreatedTasks []*Task `json:"created_tasks,omitempty"`
	// RetrospectiveReviewRequests holds the value of the retrospective_review_requests edge.
	RetrospectiveReviewRequests []*RetrospectiveReview `json:"retrospective_review_requests,omitempty"`
	// RetrospectiveReviewResponses holds the value of the retrospective_review_responses edge.
	RetrospectiveReviewResponses []*RetrospectiveReview `json:"retrospective_review_responses,omitempty"`
	// RetrospectiveComments holds the value of the retrospective_comments edge.
	RetrospectiveComments []*RetrospectiveComment `json:"retrospective_comments,omitempty"`
	// RoleAssignments holds the value of the role_assignments edge.
	RoleAssignments []*IncidentRoleAssignment `json:"role_assignments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [14]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TeamsOrErr() ([]*Team, error) {
	if e.loadedTypes[1] {
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "teams"}
}

// WatchedOncallRostersOrErr returns the WatchedOncallRosters value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) WatchedOncallRostersOrErr() ([]*OncallRoster, error) {
	if e.loadedTypes[2] {
		return e.WatchedOncallRosters, nil
	}
	return nil, &NotLoadedError{edge: "watched_oncall_rosters"}
}

// OncallSchedulesOrErr returns the OncallSchedules value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OncallSchedulesOrErr() ([]*OncallScheduleParticipant, error) {
	if e.loadedTypes[3] {
		return e.OncallSchedules, nil
	}
	return nil, &NotLoadedError{edge: "oncall_schedules"}
}

// OncallShiftsOrErr returns the OncallShifts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OncallShiftsOrErr() ([]*OncallShift, error) {
	if e.loadedTypes[4] {
		return e.OncallShifts, nil
	}
	return nil, &NotLoadedError{edge: "oncall_shifts"}
}

// EventAnnotationsOrErr returns the EventAnnotations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EventAnnotationsOrErr() ([]*EventAnnotation, error) {
	if e.loadedTypes[5] {
		return e.EventAnnotations, nil
	}
	return nil, &NotLoadedError{edge: "event_annotations"}
}

// IncidentsOrErr returns the Incidents value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) IncidentsOrErr() ([]*Incident, error) {
	if e.loadedTypes[6] {
		return e.Incidents, nil
	}
	return nil, &NotLoadedError{edge: "incidents"}
}

// IncidentDebriefsOrErr returns the IncidentDebriefs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) IncidentDebriefsOrErr() ([]*IncidentDebrief, error) {
	if e.loadedTypes[7] {
		return e.IncidentDebriefs, nil
	}
	return nil, &NotLoadedError{edge: "incident_debriefs"}
}

// AssignedTasksOrErr returns the AssignedTasks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AssignedTasksOrErr() ([]*Task, error) {
	if e.loadedTypes[8] {
		return e.AssignedTasks, nil
	}
	return nil, &NotLoadedError{edge: "assigned_tasks"}
}

// CreatedTasksOrErr returns the CreatedTasks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedTasksOrErr() ([]*Task, error) {
	if e.loadedTypes[9] {
		return e.CreatedTasks, nil
	}
	return nil, &NotLoadedError{edge: "created_tasks"}
}

// RetrospectiveReviewRequestsOrErr returns the RetrospectiveReviewRequests value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RetrospectiveReviewRequestsOrErr() ([]*RetrospectiveReview, error) {
	if e.loadedTypes[10] {
		return e.RetrospectiveReviewRequests, nil
	}
	return nil, &NotLoadedError{edge: "retrospective_review_requests"}
}

// RetrospectiveReviewResponsesOrErr returns the RetrospectiveReviewResponses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RetrospectiveReviewResponsesOrErr() ([]*RetrospectiveReview, error) {
	if e.loadedTypes[11] {
		return e.RetrospectiveReviewResponses, nil
	}
	return nil, &NotLoadedError{edge: "retrospective_review_responses"}
}

// RetrospectiveCommentsOrErr returns the RetrospectiveComments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RetrospectiveCommentsOrErr() ([]*RetrospectiveComment, error) {
	if e.loadedTypes[12] {
		return e.RetrospectiveComments, nil
	}
	return nil, &NotLoadedError{edge: "retrospective_comments"}
}

// RoleAssignmentsOrErr returns the RoleAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RoleAssignmentsOrErr() ([]*IncidentRoleAssignment, error) {
	if e.loadedTypes[13] {
		return e.RoleAssignments, nil
	}
	return nil, &NotLoadedError{edge: "role_assignments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldConfirmed:
			values[i] = new(sql.NullBool)
		case user.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case user.FieldProviderID, user.FieldEmail, user.FieldName, user.FieldChatID, user.FieldTimezone:
			values[i] = new(sql.NullString)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				u.TenantID = int(value.Int64)
			}
		case user.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				u.ProviderID = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldChatID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				u.ChatID = value.String
			}
		case user.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				u.Timezone = value.String
			}
		case user.FieldConfirmed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field confirmed", values[i])
			} else if value.Valid {
				u.Confirmed = value.Bool
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the User entity.
func (u *User) QueryTenant() *TenantQuery {
	return NewUserClient(u.config).QueryTenant(u)
}

// QueryTeams queries the "teams" edge of the User entity.
func (u *User) QueryTeams() *TeamQuery {
	return NewUserClient(u.config).QueryTeams(u)
}

// QueryWatchedOncallRosters queries the "watched_oncall_rosters" edge of the User entity.
func (u *User) QueryWatchedOncallRosters() *OncallRosterQuery {
	return NewUserClient(u.config).QueryWatchedOncallRosters(u)
}

// QueryOncallSchedules queries the "oncall_schedules" edge of the User entity.
func (u *User) QueryOncallSchedules() *OncallScheduleParticipantQuery {
	return NewUserClient(u.config).QueryOncallSchedules(u)
}

// QueryOncallShifts queries the "oncall_shifts" edge of the User entity.
func (u *User) QueryOncallShifts() *OncallShiftQuery {
	return NewUserClient(u.config).QueryOncallShifts(u)
}

// QueryEventAnnotations queries the "event_annotations" edge of the User entity.
func (u *User) QueryEventAnnotations() *EventAnnotationQuery {
	return NewUserClient(u.config).QueryEventAnnotations(u)
}

// QueryIncidents queries the "incidents" edge of the User entity.
func (u *User) QueryIncidents() *IncidentQuery {
	return NewUserClient(u.config).QueryIncidents(u)
}

// QueryIncidentDebriefs queries the "incident_debriefs" edge of the User entity.
func (u *User) QueryIncidentDebriefs() *IncidentDebriefQuery {
	return NewUserClient(u.config).QueryIncidentDebriefs(u)
}

// QueryAssignedTasks queries the "assigned_tasks" edge of the User entity.
func (u *User) QueryAssignedTasks() *TaskQuery {
	return NewUserClient(u.config).QueryAssignedTasks(u)
}

// QueryCreatedTasks queries the "created_tasks" edge of the User entity.
func (u *User) QueryCreatedTasks() *TaskQuery {
	return NewUserClient(u.config).QueryCreatedTasks(u)
}

// QueryRetrospectiveReviewRequests queries the "retrospective_review_requests" edge of the User entity.
func (u *User) QueryRetrospectiveReviewRequests() *RetrospectiveReviewQuery {
	return NewUserClient(u.config).QueryRetrospectiveReviewRequests(u)
}

// QueryRetrospectiveReviewResponses queries the "retrospective_review_responses" edge of the User entity.
func (u *User) QueryRetrospectiveReviewResponses() *RetrospectiveReviewQuery {
	return NewUserClient(u.config).QueryRetrospectiveReviewResponses(u)
}

// QueryRetrospectiveComments queries the "retrospective_comments" edge of the User entity.
func (u *User) QueryRetrospectiveComments() *RetrospectiveCommentQuery {
	return NewUserClient(u.config).QueryRetrospectiveComments(u)
}

// QueryRoleAssignments queries the "role_assignments" edge of the User entity.
func (u *User) QueryRoleAssignments() *IncidentRoleAssignmentQuery {
	return NewUserClient(u.config).QueryRoleAssignments(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", u.TenantID))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(u.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("chat_id=")
	builder.WriteString(u.ChatID)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(u.Timezone)
	builder.WriteString(", ")
	builder.WriteString("confirmed=")
	builder.WriteString(fmt.Sprintf("%v", u.Confirmed))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
