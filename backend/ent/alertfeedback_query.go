// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alertfeedback"
	"github.com/rezible/rezible/ent/alertinstance"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/tenant"
)

// AlertFeedbackQuery is the builder for querying AlertFeedback entities.
type AlertFeedbackQuery struct {
	config
	ctx               *QueryContext
	order             []alertfeedback.OrderOption
	inters            []Interceptor
	predicates        []predicate.AlertFeedback
	withTenant        *TenantQuery
	withAlertInstance *AlertInstanceQuery
	modifiers         []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AlertFeedbackQuery builder.
func (afq *AlertFeedbackQuery) Where(ps ...predicate.AlertFeedback) *AlertFeedbackQuery {
	afq.predicates = append(afq.predicates, ps...)
	return afq
}

// Limit the number of records to be returned by this query.
func (afq *AlertFeedbackQuery) Limit(limit int) *AlertFeedbackQuery {
	afq.ctx.Limit = &limit
	return afq
}

// Offset to start from.
func (afq *AlertFeedbackQuery) Offset(offset int) *AlertFeedbackQuery {
	afq.ctx.Offset = &offset
	return afq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (afq *AlertFeedbackQuery) Unique(unique bool) *AlertFeedbackQuery {
	afq.ctx.Unique = &unique
	return afq
}

// Order specifies how the records should be ordered.
func (afq *AlertFeedbackQuery) Order(o ...alertfeedback.OrderOption) *AlertFeedbackQuery {
	afq.order = append(afq.order, o...)
	return afq
}

// QueryTenant chains the current query on the "tenant" edge.
func (afq *AlertFeedbackQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: afq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := afq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := afq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(alertfeedback.Table, alertfeedback.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, alertfeedback.TenantTable, alertfeedback.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(afq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAlertInstance chains the current query on the "alert_instance" edge.
func (afq *AlertFeedbackQuery) QueryAlertInstance() *AlertInstanceQuery {
	query := (&AlertInstanceClient{config: afq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := afq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := afq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(alertfeedback.Table, alertfeedback.FieldID, selector),
			sqlgraph.To(alertinstance.Table, alertinstance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, alertfeedback.AlertInstanceTable, alertfeedback.AlertInstanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(afq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AlertFeedback entity from the query.
// Returns a *NotFoundError when no AlertFeedback was found.
func (afq *AlertFeedbackQuery) First(ctx context.Context) (*AlertFeedback, error) {
	nodes, err := afq.Limit(1).All(setContextOp(ctx, afq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{alertfeedback.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (afq *AlertFeedbackQuery) FirstX(ctx context.Context) *AlertFeedback {
	node, err := afq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AlertFeedback ID from the query.
// Returns a *NotFoundError when no AlertFeedback ID was found.
func (afq *AlertFeedbackQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = afq.Limit(1).IDs(setContextOp(ctx, afq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{alertfeedback.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (afq *AlertFeedbackQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := afq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AlertFeedback entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AlertFeedback entity is found.
// Returns a *NotFoundError when no AlertFeedback entities are found.
func (afq *AlertFeedbackQuery) Only(ctx context.Context) (*AlertFeedback, error) {
	nodes, err := afq.Limit(2).All(setContextOp(ctx, afq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{alertfeedback.Label}
	default:
		return nil, &NotSingularError{alertfeedback.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (afq *AlertFeedbackQuery) OnlyX(ctx context.Context) *AlertFeedback {
	node, err := afq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AlertFeedback ID in the query.
// Returns a *NotSingularError when more than one AlertFeedback ID is found.
// Returns a *NotFoundError when no entities are found.
func (afq *AlertFeedbackQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = afq.Limit(2).IDs(setContextOp(ctx, afq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{alertfeedback.Label}
	default:
		err = &NotSingularError{alertfeedback.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (afq *AlertFeedbackQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := afq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AlertFeedbacks.
func (afq *AlertFeedbackQuery) All(ctx context.Context) ([]*AlertFeedback, error) {
	ctx = setContextOp(ctx, afq.ctx, ent.OpQueryAll)
	if err := afq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AlertFeedback, *AlertFeedbackQuery]()
	return withInterceptors[[]*AlertFeedback](ctx, afq, qr, afq.inters)
}

// AllX is like All, but panics if an error occurs.
func (afq *AlertFeedbackQuery) AllX(ctx context.Context) []*AlertFeedback {
	nodes, err := afq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AlertFeedback IDs.
func (afq *AlertFeedbackQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if afq.ctx.Unique == nil && afq.path != nil {
		afq.Unique(true)
	}
	ctx = setContextOp(ctx, afq.ctx, ent.OpQueryIDs)
	if err = afq.Select(alertfeedback.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (afq *AlertFeedbackQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := afq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (afq *AlertFeedbackQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, afq.ctx, ent.OpQueryCount)
	if err := afq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, afq, querierCount[*AlertFeedbackQuery](), afq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (afq *AlertFeedbackQuery) CountX(ctx context.Context) int {
	count, err := afq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (afq *AlertFeedbackQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, afq.ctx, ent.OpQueryExist)
	switch _, err := afq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (afq *AlertFeedbackQuery) ExistX(ctx context.Context) bool {
	exist, err := afq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AlertFeedbackQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (afq *AlertFeedbackQuery) Clone() *AlertFeedbackQuery {
	if afq == nil {
		return nil
	}
	return &AlertFeedbackQuery{
		config:            afq.config,
		ctx:               afq.ctx.Clone(),
		order:             append([]alertfeedback.OrderOption{}, afq.order...),
		inters:            append([]Interceptor{}, afq.inters...),
		predicates:        append([]predicate.AlertFeedback{}, afq.predicates...),
		withTenant:        afq.withTenant.Clone(),
		withAlertInstance: afq.withAlertInstance.Clone(),
		// clone intermediate query.
		sql:       afq.sql.Clone(),
		path:      afq.path,
		modifiers: append([]func(*sql.Selector){}, afq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (afq *AlertFeedbackQuery) WithTenant(opts ...func(*TenantQuery)) *AlertFeedbackQuery {
	query := (&TenantClient{config: afq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	afq.withTenant = query
	return afq
}

// WithAlertInstance tells the query-builder to eager-load the nodes that are connected to
// the "alert_instance" edge. The optional arguments are used to configure the query builder of the edge.
func (afq *AlertFeedbackQuery) WithAlertInstance(opts ...func(*AlertInstanceQuery)) *AlertFeedbackQuery {
	query := (&AlertInstanceClient{config: afq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	afq.withAlertInstance = query
	return afq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AlertFeedback.Query().
//		GroupBy(alertfeedback.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (afq *AlertFeedbackQuery) GroupBy(field string, fields ...string) *AlertFeedbackGroupBy {
	afq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AlertFeedbackGroupBy{build: afq}
	grbuild.flds = &afq.ctx.Fields
	grbuild.label = alertfeedback.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.AlertFeedback.Query().
//		Select(alertfeedback.FieldTenantID).
//		Scan(ctx, &v)
func (afq *AlertFeedbackQuery) Select(fields ...string) *AlertFeedbackSelect {
	afq.ctx.Fields = append(afq.ctx.Fields, fields...)
	sbuild := &AlertFeedbackSelect{AlertFeedbackQuery: afq}
	sbuild.label = alertfeedback.Label
	sbuild.flds, sbuild.scan = &afq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AlertFeedbackSelect configured with the given aggregations.
func (afq *AlertFeedbackQuery) Aggregate(fns ...AggregateFunc) *AlertFeedbackSelect {
	return afq.Select().Aggregate(fns...)
}

func (afq *AlertFeedbackQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range afq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, afq); err != nil {
				return err
			}
		}
	}
	for _, f := range afq.ctx.Fields {
		if !alertfeedback.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if afq.path != nil {
		prev, err := afq.path(ctx)
		if err != nil {
			return err
		}
		afq.sql = prev
	}
	if alertfeedback.Policy == nil {
		return errors.New("ent: uninitialized alertfeedback.Policy (forgotten import ent/runtime?)")
	}
	if err := alertfeedback.Policy.EvalQuery(ctx, afq); err != nil {
		return err
	}
	return nil
}

func (afq *AlertFeedbackQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AlertFeedback, error) {
	var (
		nodes       = []*AlertFeedback{}
		_spec       = afq.querySpec()
		loadedTypes = [2]bool{
			afq.withTenant != nil,
			afq.withAlertInstance != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AlertFeedback).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AlertFeedback{config: afq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(afq.modifiers) > 0 {
		_spec.Modifiers = afq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, afq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := afq.withTenant; query != nil {
		if err := afq.loadTenant(ctx, query, nodes, nil,
			func(n *AlertFeedback, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := afq.withAlertInstance; query != nil {
		if err := afq.loadAlertInstance(ctx, query, nodes, nil,
			func(n *AlertFeedback, e *AlertInstance) { n.Edges.AlertInstance = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (afq *AlertFeedbackQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*AlertFeedback, init func(*AlertFeedback), assign func(*AlertFeedback, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AlertFeedback)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (afq *AlertFeedbackQuery) loadAlertInstance(ctx context.Context, query *AlertInstanceQuery, nodes []*AlertFeedback, init func(*AlertFeedback), assign func(*AlertFeedback, *AlertInstance)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AlertFeedback)
	for i := range nodes {
		fk := nodes[i].AlertInstanceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(alertinstance.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "alert_instance_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (afq *AlertFeedbackQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := afq.querySpec()
	if len(afq.modifiers) > 0 {
		_spec.Modifiers = afq.modifiers
	}
	_spec.Node.Columns = afq.ctx.Fields
	if len(afq.ctx.Fields) > 0 {
		_spec.Unique = afq.ctx.Unique != nil && *afq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, afq.driver, _spec)
}

func (afq *AlertFeedbackQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(alertfeedback.Table, alertfeedback.Columns, sqlgraph.NewFieldSpec(alertfeedback.FieldID, field.TypeUUID))
	_spec.From = afq.sql
	if unique := afq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if afq.path != nil {
		_spec.Unique = true
	}
	if fields := afq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alertfeedback.FieldID)
		for i := range fields {
			if fields[i] != alertfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if afq.withTenant != nil {
			_spec.Node.AddColumnOnce(alertfeedback.FieldTenantID)
		}
		if afq.withAlertInstance != nil {
			_spec.Node.AddColumnOnce(alertfeedback.FieldAlertInstanceID)
		}
	}
	if ps := afq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := afq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := afq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := afq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (afq *AlertFeedbackQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(afq.driver.Dialect())
	t1 := builder.Table(alertfeedback.Table)
	columns := afq.ctx.Fields
	if len(columns) == 0 {
		columns = alertfeedback.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if afq.sql != nil {
		selector = afq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if afq.ctx.Unique != nil && *afq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range afq.modifiers {
		m(selector)
	}
	for _, p := range afq.predicates {
		p(selector)
	}
	for _, p := range afq.order {
		p(selector)
	}
	if offset := afq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := afq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (afq *AlertFeedbackQuery) Modify(modifiers ...func(s *sql.Selector)) *AlertFeedbackSelect {
	afq.modifiers = append(afq.modifiers, modifiers...)
	return afq.Select()
}

// AlertFeedbackGroupBy is the group-by builder for AlertFeedback entities.
type AlertFeedbackGroupBy struct {
	selector
	build *AlertFeedbackQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (afgb *AlertFeedbackGroupBy) Aggregate(fns ...AggregateFunc) *AlertFeedbackGroupBy {
	afgb.fns = append(afgb.fns, fns...)
	return afgb
}

// Scan applies the selector query and scans the result into the given value.
func (afgb *AlertFeedbackGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, afgb.build.ctx, ent.OpQueryGroupBy)
	if err := afgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AlertFeedbackQuery, *AlertFeedbackGroupBy](ctx, afgb.build, afgb, afgb.build.inters, v)
}

func (afgb *AlertFeedbackGroupBy) sqlScan(ctx context.Context, root *AlertFeedbackQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(afgb.fns))
	for _, fn := range afgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*afgb.flds)+len(afgb.fns))
		for _, f := range *afgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*afgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := afgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AlertFeedbackSelect is the builder for selecting fields of AlertFeedback entities.
type AlertFeedbackSelect struct {
	*AlertFeedbackQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (afs *AlertFeedbackSelect) Aggregate(fns ...AggregateFunc) *AlertFeedbackSelect {
	afs.fns = append(afs.fns, fns...)
	return afs
}

// Scan applies the selector query and scans the result into the given value.
func (afs *AlertFeedbackSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, afs.ctx, ent.OpQuerySelect)
	if err := afs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AlertFeedbackQuery, *AlertFeedbackSelect](ctx, afs.AlertFeedbackQuery, afs, afs.inters, v)
}

func (afs *AlertFeedbackSelect) sqlScan(ctx context.Context, root *AlertFeedbackQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(afs.fns))
	for _, fn := range afs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*afs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := afs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (afs *AlertFeedbackSelect) Modify(modifiers ...func(s *sql.Selector)) *AlertFeedbackSelect {
	afs.modifiers = append(afs.modifiers, modifiers...)
	return afs
}
