// Code generated by ent, DO NOT EDIT.

package alertinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldTenantID, v))
}

// AlertID applies equality check predicate on the "alert_id" field. It's identical to AlertIDEQ.
func AlertID(v uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldAlertID, v))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldEventID, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldProviderID, v))
}

// AcknowledgedAt applies equality check predicate on the "acknowledged_at" field. It's identical to AcknowledgedAtEQ.
func AcknowledgedAt(v time.Time) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldAcknowledgedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNotIn(FieldTenantID, vs...))
}

// AlertIDEQ applies the EQ predicate on the "alert_id" field.
func AlertIDEQ(v uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldAlertID, v))
}

// AlertIDNEQ applies the NEQ predicate on the "alert_id" field.
func AlertIDNEQ(v uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNEQ(FieldAlertID, v))
}

// AlertIDIn applies the In predicate on the "alert_id" field.
func AlertIDIn(vs ...uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldIn(FieldAlertID, vs...))
}

// AlertIDNotIn applies the NotIn predicate on the "alert_id" field.
func AlertIDNotIn(vs ...uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNotIn(FieldAlertID, vs...))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...uuid.UUID) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNotIn(FieldEventID, vs...))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderIDGT applies the GT predicate on the "provider_id" field.
func ProviderIDGT(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldGT(FieldProviderID, v))
}

// ProviderIDGTE applies the GTE predicate on the "provider_id" field.
func ProviderIDGTE(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldGTE(FieldProviderID, v))
}

// ProviderIDLT applies the LT predicate on the "provider_id" field.
func ProviderIDLT(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldLT(FieldProviderID, v))
}

// ProviderIDLTE applies the LTE predicate on the "provider_id" field.
func ProviderIDLTE(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldLTE(FieldProviderID, v))
}

// ProviderIDContains applies the Contains predicate on the "provider_id" field.
func ProviderIDContains(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldContains(FieldProviderID, v))
}

// ProviderIDHasPrefix applies the HasPrefix predicate on the "provider_id" field.
func ProviderIDHasPrefix(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldHasPrefix(FieldProviderID, v))
}

// ProviderIDHasSuffix applies the HasSuffix predicate on the "provider_id" field.
func ProviderIDHasSuffix(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldHasSuffix(FieldProviderID, v))
}

// ProviderIDEqualFold applies the EqualFold predicate on the "provider_id" field.
func ProviderIDEqualFold(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEqualFold(FieldProviderID, v))
}

// ProviderIDContainsFold applies the ContainsFold predicate on the "provider_id" field.
func ProviderIDContainsFold(v string) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldContainsFold(FieldProviderID, v))
}

// AcknowledgedAtEQ applies the EQ predicate on the "acknowledged_at" field.
func AcknowledgedAtEQ(v time.Time) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldEQ(FieldAcknowledgedAt, v))
}

// AcknowledgedAtNEQ applies the NEQ predicate on the "acknowledged_at" field.
func AcknowledgedAtNEQ(v time.Time) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNEQ(FieldAcknowledgedAt, v))
}

// AcknowledgedAtIn applies the In predicate on the "acknowledged_at" field.
func AcknowledgedAtIn(vs ...time.Time) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldIn(FieldAcknowledgedAt, vs...))
}

// AcknowledgedAtNotIn applies the NotIn predicate on the "acknowledged_at" field.
func AcknowledgedAtNotIn(vs ...time.Time) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNotIn(FieldAcknowledgedAt, vs...))
}

// AcknowledgedAtGT applies the GT predicate on the "acknowledged_at" field.
func AcknowledgedAtGT(v time.Time) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldGT(FieldAcknowledgedAt, v))
}

// AcknowledgedAtGTE applies the GTE predicate on the "acknowledged_at" field.
func AcknowledgedAtGTE(v time.Time) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldGTE(FieldAcknowledgedAt, v))
}

// AcknowledgedAtLT applies the LT predicate on the "acknowledged_at" field.
func AcknowledgedAtLT(v time.Time) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldLT(FieldAcknowledgedAt, v))
}

// AcknowledgedAtLTE applies the LTE predicate on the "acknowledged_at" field.
func AcknowledgedAtLTE(v time.Time) predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldLTE(FieldAcknowledgedAt, v))
}

// AcknowledgedAtIsNil applies the IsNil predicate on the "acknowledged_at" field.
func AcknowledgedAtIsNil() predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldIsNull(FieldAcknowledgedAt))
}

// AcknowledgedAtNotNil applies the NotNil predicate on the "acknowledged_at" field.
func AcknowledgedAtNotNil() predicate.AlertInstance {
	return predicate.AlertInstance(sql.FieldNotNull(FieldAcknowledgedAt))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.AlertInstance {
	return predicate.AlertInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.AlertInstance {
	return predicate.AlertInstance(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAlert applies the HasEdge predicate on the "alert" edge.
func HasAlert() predicate.AlertInstance {
	return predicate.AlertInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AlertTable, AlertColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAlertWith applies the HasEdge predicate on the "alert" edge with a given conditions (other predicates).
func HasAlertWith(preds ...predicate.Alert) predicate.AlertInstance {
	return predicate.AlertInstance(func(s *sql.Selector) {
		step := newAlertStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.AlertInstance {
	return predicate.AlertInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.AlertInstance {
	return predicate.AlertInstance(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeedback applies the HasEdge predicate on the "feedback" edge.
func HasFeedback() predicate.AlertInstance {
	return predicate.AlertInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FeedbackTable, FeedbackColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeedbackWith applies the HasEdge predicate on the "feedback" edge with a given conditions (other predicates).
func HasFeedbackWith(preds ...predicate.AlertFeedback) predicate.AlertInstance {
	return predicate.AlertInstance(func(s *sql.Selector) {
		step := newFeedbackStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AlertInstance) predicate.AlertInstance {
	return predicate.AlertInstance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AlertInstance) predicate.AlertInstance {
	return predicate.AlertInstance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AlertInstance) predicate.AlertInstance {
	return predicate.AlertInstance(sql.NotPredicates(p))
}
