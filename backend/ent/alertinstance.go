// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/alertinstance"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/tenant"
)

// AlertInstance is the model entity for the AlertInstance schema.
type AlertInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// AlertID holds the value of the "alert_id" field.
	AlertID uuid.UUID `json:"alert_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID uuid.UUID `json:"event_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlertInstanceQuery when eager-loading is set.
	Edges           AlertInstanceEdges `json:"edges"`
	alert_instances *uuid.UUID
	selectValues    sql.SelectValues
}

// AlertInstanceEdges holds the relations/edges for other nodes in the graph.
type AlertInstanceEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Alert holds the value of the alert edge.
	Alert *Alert `json:"alert,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// Feedback holds the value of the feedback edge.
	Feedback []*AlertFeedback `json:"feedback,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlertInstanceEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// AlertOrErr returns the Alert value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlertInstanceEdges) AlertOrErr() (*Alert, error) {
	if e.Alert != nil {
		return e.Alert, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: alert.Label}
	}
	return nil, &NotLoadedError{edge: "alert"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlertInstanceEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// FeedbackOrErr returns the Feedback value or an error if the edge
// was not loaded in eager-loading.
func (e AlertInstanceEdges) FeedbackOrErr() ([]*AlertFeedback, error) {
	if e.loadedTypes[3] {
		return e.Feedback, nil
	}
	return nil, &NotLoadedError{edge: "feedback"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlertInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alertinstance.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case alertinstance.FieldID, alertinstance.FieldAlertID, alertinstance.FieldEventID:
			values[i] = new(uuid.UUID)
		case alertinstance.ForeignKeys[0]: // alert_instances
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlertInstance fields.
func (ai *AlertInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alertinstance.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ai.ID = *value
			}
		case alertinstance.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ai.TenantID = int(value.Int64)
			}
		case alertinstance.FieldAlertID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field alert_id", values[i])
			} else if value != nil {
				ai.AlertID = *value
			}
		case alertinstance.FieldEventID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value != nil {
				ai.EventID = *value
			}
		case alertinstance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field alert_instances", values[i])
			} else if value.Valid {
				ai.alert_instances = new(uuid.UUID)
				*ai.alert_instances = *value.S.(*uuid.UUID)
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AlertInstance.
// This includes values selected through modifiers, order, etc.
func (ai *AlertInstance) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the AlertInstance entity.
func (ai *AlertInstance) QueryTenant() *TenantQuery {
	return NewAlertInstanceClient(ai.config).QueryTenant(ai)
}

// QueryAlert queries the "alert" edge of the AlertInstance entity.
func (ai *AlertInstance) QueryAlert() *AlertQuery {
	return NewAlertInstanceClient(ai.config).QueryAlert(ai)
}

// QueryEvent queries the "event" edge of the AlertInstance entity.
func (ai *AlertInstance) QueryEvent() *EventQuery {
	return NewAlertInstanceClient(ai.config).QueryEvent(ai)
}

// QueryFeedback queries the "feedback" edge of the AlertInstance entity.
func (ai *AlertInstance) QueryFeedback() *AlertFeedbackQuery {
	return NewAlertInstanceClient(ai.config).QueryFeedback(ai)
}

// Update returns a builder for updating this AlertInstance.
// Note that you need to call AlertInstance.Unwrap() before calling this method if this AlertInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AlertInstance) Update() *AlertInstanceUpdateOne {
	return NewAlertInstanceClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the AlertInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AlertInstance) Unwrap() *AlertInstance {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlertInstance is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AlertInstance) String() string {
	var builder strings.Builder
	builder.WriteString("AlertInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ai.TenantID))
	builder.WriteString(", ")
	builder.WriteString("alert_id=")
	builder.WriteString(fmt.Sprintf("%v", ai.AlertID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", ai.EventID))
	builder.WriteByte(')')
	return builder.String()
}

// AlertInstances is a parsable slice of AlertInstance.
type AlertInstances []*AlertInstance
