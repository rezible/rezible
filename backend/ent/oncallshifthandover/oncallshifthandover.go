// Code generated by ent, DO NOT EDIT.

package oncallshifthandover

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oncallshifthandover type in the database.
	Label = "oncall_shift_handover"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldShiftID holds the string denoting the shift_id field in the database.
	FieldShiftID = "shift_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldReminderSent holds the string denoting the reminder_sent field in the database.
	FieldReminderSent = "reminder_sent"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSentAt holds the string denoting the sent_at field in the database.
	FieldSentAt = "sent_at"
	// FieldContents holds the string denoting the contents field in the database.
	FieldContents = "contents"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeShift holds the string denoting the shift edge name in mutations.
	EdgeShift = "shift"
	// EdgePinnedAnnotations holds the string denoting the pinned_annotations edge name in mutations.
	EdgePinnedAnnotations = "pinned_annotations"
	// Table holds the table name of the oncallshifthandover in the database.
	Table = "oncall_shift_handovers"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "oncall_shift_handovers"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ShiftTable is the table that holds the shift relation/edge.
	ShiftTable = "oncall_shift_handovers"
	// ShiftInverseTable is the table name for the OncallShift entity.
	// It exists in this package in order to avoid circular dependency with the "oncallshift" package.
	ShiftInverseTable = "oncall_shifts"
	// ShiftColumn is the table column denoting the shift relation/edge.
	ShiftColumn = "shift_id"
	// PinnedAnnotationsTable is the table that holds the pinned_annotations relation/edge. The primary key declared below.
	PinnedAnnotationsTable = "oncall_shift_handover_pinned_annotations"
	// PinnedAnnotationsInverseTable is the table name for the EventAnnotation entity.
	// It exists in this package in order to avoid circular dependency with the "eventannotation" package.
	PinnedAnnotationsInverseTable = "event_annotations"
)

// Columns holds all SQL columns for oncallshifthandover fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldShiftID,
	FieldCreatedAt,
	FieldReminderSent,
	FieldUpdatedAt,
	FieldSentAt,
	FieldContents,
}

var (
	// PinnedAnnotationsPrimaryKey and PinnedAnnotationsColumn2 are the table columns denoting the
	// primary key for the pinned_annotations relation (M2M).
	PinnedAnnotationsPrimaryKey = []string{"oncall_shift_handover_id", "event_annotation_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultReminderSent holds the default value on creation for the "reminder_sent" field.
	DefaultReminderSent bool
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OncallShiftHandover queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByShiftID orders the results by the shift_id field.
func ByShiftID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShiftID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByReminderSent orders the results by the reminder_sent field.
func ByReminderSent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReminderSent, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySentAt orders the results by the sent_at field.
func BySentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByShiftField orders the results by shift field.
func ByShiftField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShiftStep(), sql.OrderByField(field, opts...))
	}
}

// ByPinnedAnnotationsCount orders the results by pinned_annotations count.
func ByPinnedAnnotationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPinnedAnnotationsStep(), opts...)
	}
}

// ByPinnedAnnotations orders the results by pinned_annotations terms.
func ByPinnedAnnotations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPinnedAnnotationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newShiftStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShiftInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ShiftTable, ShiftColumn),
	)
}
func newPinnedAnnotationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PinnedAnnotationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PinnedAnnotationsTable, PinnedAnnotationsPrimaryKey...),
	)
}
