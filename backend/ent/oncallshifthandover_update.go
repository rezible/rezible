// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/eventannotation"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/oncallshifthandover"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallShiftHandoverUpdate is the builder for updating OncallShiftHandover entities.
type OncallShiftHandoverUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallShiftHandoverMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallShiftHandoverUpdate builder.
func (oshu *OncallShiftHandoverUpdate) Where(ps ...predicate.OncallShiftHandover) *OncallShiftHandoverUpdate {
	oshu.mutation.Where(ps...)
	return oshu
}

// SetShiftID sets the "shift_id" field.
func (oshu *OncallShiftHandoverUpdate) SetShiftID(u uuid.UUID) *OncallShiftHandoverUpdate {
	oshu.mutation.SetShiftID(u)
	return oshu
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (oshu *OncallShiftHandoverUpdate) SetNillableShiftID(u *uuid.UUID) *OncallShiftHandoverUpdate {
	if u != nil {
		oshu.SetShiftID(*u)
	}
	return oshu
}

// SetCreatedAt sets the "created_at" field.
func (oshu *OncallShiftHandoverUpdate) SetCreatedAt(t time.Time) *OncallShiftHandoverUpdate {
	oshu.mutation.SetCreatedAt(t)
	return oshu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oshu *OncallShiftHandoverUpdate) SetNillableCreatedAt(t *time.Time) *OncallShiftHandoverUpdate {
	if t != nil {
		oshu.SetCreatedAt(*t)
	}
	return oshu
}

// SetReminderSent sets the "reminder_sent" field.
func (oshu *OncallShiftHandoverUpdate) SetReminderSent(b bool) *OncallShiftHandoverUpdate {
	oshu.mutation.SetReminderSent(b)
	return oshu
}

// SetNillableReminderSent sets the "reminder_sent" field if the given value is not nil.
func (oshu *OncallShiftHandoverUpdate) SetNillableReminderSent(b *bool) *OncallShiftHandoverUpdate {
	if b != nil {
		oshu.SetReminderSent(*b)
	}
	return oshu
}

// SetUpdatedAt sets the "updated_at" field.
func (oshu *OncallShiftHandoverUpdate) SetUpdatedAt(t time.Time) *OncallShiftHandoverUpdate {
	oshu.mutation.SetUpdatedAt(t)
	return oshu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oshu *OncallShiftHandoverUpdate) SetNillableUpdatedAt(t *time.Time) *OncallShiftHandoverUpdate {
	if t != nil {
		oshu.SetUpdatedAt(*t)
	}
	return oshu
}

// SetSentAt sets the "sent_at" field.
func (oshu *OncallShiftHandoverUpdate) SetSentAt(t time.Time) *OncallShiftHandoverUpdate {
	oshu.mutation.SetSentAt(t)
	return oshu
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (oshu *OncallShiftHandoverUpdate) SetNillableSentAt(t *time.Time) *OncallShiftHandoverUpdate {
	if t != nil {
		oshu.SetSentAt(*t)
	}
	return oshu
}

// ClearSentAt clears the value of the "sent_at" field.
func (oshu *OncallShiftHandoverUpdate) ClearSentAt() *OncallShiftHandoverUpdate {
	oshu.mutation.ClearSentAt()
	return oshu
}

// SetContents sets the "contents" field.
func (oshu *OncallShiftHandoverUpdate) SetContents(b []byte) *OncallShiftHandoverUpdate {
	oshu.mutation.SetContents(b)
	return oshu
}

// SetShift sets the "shift" edge to the OncallShift entity.
func (oshu *OncallShiftHandoverUpdate) SetShift(o *OncallShift) *OncallShiftHandoverUpdate {
	return oshu.SetShiftID(o.ID)
}

// AddPinnedAnnotationIDs adds the "pinned_annotations" edge to the EventAnnotation entity by IDs.
func (oshu *OncallShiftHandoverUpdate) AddPinnedAnnotationIDs(ids ...uuid.UUID) *OncallShiftHandoverUpdate {
	oshu.mutation.AddPinnedAnnotationIDs(ids...)
	return oshu
}

// AddPinnedAnnotations adds the "pinned_annotations" edges to the EventAnnotation entity.
func (oshu *OncallShiftHandoverUpdate) AddPinnedAnnotations(e ...*EventAnnotation) *OncallShiftHandoverUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oshu.AddPinnedAnnotationIDs(ids...)
}

// Mutation returns the OncallShiftHandoverMutation object of the builder.
func (oshu *OncallShiftHandoverUpdate) Mutation() *OncallShiftHandoverMutation {
	return oshu.mutation
}

// ClearShift clears the "shift" edge to the OncallShift entity.
func (oshu *OncallShiftHandoverUpdate) ClearShift() *OncallShiftHandoverUpdate {
	oshu.mutation.ClearShift()
	return oshu
}

// ClearPinnedAnnotations clears all "pinned_annotations" edges to the EventAnnotation entity.
func (oshu *OncallShiftHandoverUpdate) ClearPinnedAnnotations() *OncallShiftHandoverUpdate {
	oshu.mutation.ClearPinnedAnnotations()
	return oshu
}

// RemovePinnedAnnotationIDs removes the "pinned_annotations" edge to EventAnnotation entities by IDs.
func (oshu *OncallShiftHandoverUpdate) RemovePinnedAnnotationIDs(ids ...uuid.UUID) *OncallShiftHandoverUpdate {
	oshu.mutation.RemovePinnedAnnotationIDs(ids...)
	return oshu
}

// RemovePinnedAnnotations removes "pinned_annotations" edges to EventAnnotation entities.
func (oshu *OncallShiftHandoverUpdate) RemovePinnedAnnotations(e ...*EventAnnotation) *OncallShiftHandoverUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oshu.RemovePinnedAnnotationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oshu *OncallShiftHandoverUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oshu.sqlSave, oshu.mutation, oshu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oshu *OncallShiftHandoverUpdate) SaveX(ctx context.Context) int {
	affected, err := oshu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oshu *OncallShiftHandoverUpdate) Exec(ctx context.Context) error {
	_, err := oshu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oshu *OncallShiftHandoverUpdate) ExecX(ctx context.Context) {
	if err := oshu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oshu *OncallShiftHandoverUpdate) check() error {
	if oshu.mutation.TenantCleared() && len(oshu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShiftHandover.tenant"`)
	}
	if oshu.mutation.ShiftCleared() && len(oshu.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShiftHandover.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oshu *OncallShiftHandoverUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallShiftHandoverUpdate {
	oshu.modifiers = append(oshu.modifiers, modifiers...)
	return oshu
}

func (oshu *OncallShiftHandoverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oshu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallshifthandover.Table, oncallshifthandover.Columns, sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID))
	if ps := oshu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oshu.mutation.CreatedAt(); ok {
		_spec.SetField(oncallshifthandover.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oshu.mutation.ReminderSent(); ok {
		_spec.SetField(oncallshifthandover.FieldReminderSent, field.TypeBool, value)
	}
	if value, ok := oshu.mutation.UpdatedAt(); ok {
		_spec.SetField(oncallshifthandover.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oshu.mutation.SentAt(); ok {
		_spec.SetField(oncallshifthandover.FieldSentAt, field.TypeTime, value)
	}
	if oshu.mutation.SentAtCleared() {
		_spec.ClearField(oncallshifthandover.FieldSentAt, field.TypeTime)
	}
	if value, ok := oshu.mutation.Contents(); ok {
		_spec.SetField(oncallshifthandover.FieldContents, field.TypeBytes, value)
	}
	if oshu.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallshifthandover.ShiftTable,
			Columns: []string{oncallshifthandover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oshu.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallshifthandover.ShiftTable,
			Columns: []string{oncallshifthandover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oshu.mutation.PinnedAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallshifthandover.PinnedAnnotationsTable,
			Columns: oncallshifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oshu.mutation.RemovedPinnedAnnotationsIDs(); len(nodes) > 0 && !oshu.mutation.PinnedAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallshifthandover.PinnedAnnotationsTable,
			Columns: oncallshifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oshu.mutation.PinnedAnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallshifthandover.PinnedAnnotationsTable,
			Columns: oncallshifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oshu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oshu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallshifthandover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oshu.mutation.done = true
	return n, nil
}

// OncallShiftHandoverUpdateOne is the builder for updating a single OncallShiftHandover entity.
type OncallShiftHandoverUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallShiftHandoverMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetShiftID sets the "shift_id" field.
func (oshuo *OncallShiftHandoverUpdateOne) SetShiftID(u uuid.UUID) *OncallShiftHandoverUpdateOne {
	oshuo.mutation.SetShiftID(u)
	return oshuo
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (oshuo *OncallShiftHandoverUpdateOne) SetNillableShiftID(u *uuid.UUID) *OncallShiftHandoverUpdateOne {
	if u != nil {
		oshuo.SetShiftID(*u)
	}
	return oshuo
}

// SetCreatedAt sets the "created_at" field.
func (oshuo *OncallShiftHandoverUpdateOne) SetCreatedAt(t time.Time) *OncallShiftHandoverUpdateOne {
	oshuo.mutation.SetCreatedAt(t)
	return oshuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oshuo *OncallShiftHandoverUpdateOne) SetNillableCreatedAt(t *time.Time) *OncallShiftHandoverUpdateOne {
	if t != nil {
		oshuo.SetCreatedAt(*t)
	}
	return oshuo
}

// SetReminderSent sets the "reminder_sent" field.
func (oshuo *OncallShiftHandoverUpdateOne) SetReminderSent(b bool) *OncallShiftHandoverUpdateOne {
	oshuo.mutation.SetReminderSent(b)
	return oshuo
}

// SetNillableReminderSent sets the "reminder_sent" field if the given value is not nil.
func (oshuo *OncallShiftHandoverUpdateOne) SetNillableReminderSent(b *bool) *OncallShiftHandoverUpdateOne {
	if b != nil {
		oshuo.SetReminderSent(*b)
	}
	return oshuo
}

// SetUpdatedAt sets the "updated_at" field.
func (oshuo *OncallShiftHandoverUpdateOne) SetUpdatedAt(t time.Time) *OncallShiftHandoverUpdateOne {
	oshuo.mutation.SetUpdatedAt(t)
	return oshuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oshuo *OncallShiftHandoverUpdateOne) SetNillableUpdatedAt(t *time.Time) *OncallShiftHandoverUpdateOne {
	if t != nil {
		oshuo.SetUpdatedAt(*t)
	}
	return oshuo
}

// SetSentAt sets the "sent_at" field.
func (oshuo *OncallShiftHandoverUpdateOne) SetSentAt(t time.Time) *OncallShiftHandoverUpdateOne {
	oshuo.mutation.SetSentAt(t)
	return oshuo
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (oshuo *OncallShiftHandoverUpdateOne) SetNillableSentAt(t *time.Time) *OncallShiftHandoverUpdateOne {
	if t != nil {
		oshuo.SetSentAt(*t)
	}
	return oshuo
}

// ClearSentAt clears the value of the "sent_at" field.
func (oshuo *OncallShiftHandoverUpdateOne) ClearSentAt() *OncallShiftHandoverUpdateOne {
	oshuo.mutation.ClearSentAt()
	return oshuo
}

// SetContents sets the "contents" field.
func (oshuo *OncallShiftHandoverUpdateOne) SetContents(b []byte) *OncallShiftHandoverUpdateOne {
	oshuo.mutation.SetContents(b)
	return oshuo
}

// SetShift sets the "shift" edge to the OncallShift entity.
func (oshuo *OncallShiftHandoverUpdateOne) SetShift(o *OncallShift) *OncallShiftHandoverUpdateOne {
	return oshuo.SetShiftID(o.ID)
}

// AddPinnedAnnotationIDs adds the "pinned_annotations" edge to the EventAnnotation entity by IDs.
func (oshuo *OncallShiftHandoverUpdateOne) AddPinnedAnnotationIDs(ids ...uuid.UUID) *OncallShiftHandoverUpdateOne {
	oshuo.mutation.AddPinnedAnnotationIDs(ids...)
	return oshuo
}

// AddPinnedAnnotations adds the "pinned_annotations" edges to the EventAnnotation entity.
func (oshuo *OncallShiftHandoverUpdateOne) AddPinnedAnnotations(e ...*EventAnnotation) *OncallShiftHandoverUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oshuo.AddPinnedAnnotationIDs(ids...)
}

// Mutation returns the OncallShiftHandoverMutation object of the builder.
func (oshuo *OncallShiftHandoverUpdateOne) Mutation() *OncallShiftHandoverMutation {
	return oshuo.mutation
}

// ClearShift clears the "shift" edge to the OncallShift entity.
func (oshuo *OncallShiftHandoverUpdateOne) ClearShift() *OncallShiftHandoverUpdateOne {
	oshuo.mutation.ClearShift()
	return oshuo
}

// ClearPinnedAnnotations clears all "pinned_annotations" edges to the EventAnnotation entity.
func (oshuo *OncallShiftHandoverUpdateOne) ClearPinnedAnnotations() *OncallShiftHandoverUpdateOne {
	oshuo.mutation.ClearPinnedAnnotations()
	return oshuo
}

// RemovePinnedAnnotationIDs removes the "pinned_annotations" edge to EventAnnotation entities by IDs.
func (oshuo *OncallShiftHandoverUpdateOne) RemovePinnedAnnotationIDs(ids ...uuid.UUID) *OncallShiftHandoverUpdateOne {
	oshuo.mutation.RemovePinnedAnnotationIDs(ids...)
	return oshuo
}

// RemovePinnedAnnotations removes "pinned_annotations" edges to EventAnnotation entities.
func (oshuo *OncallShiftHandoverUpdateOne) RemovePinnedAnnotations(e ...*EventAnnotation) *OncallShiftHandoverUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oshuo.RemovePinnedAnnotationIDs(ids...)
}

// Where appends a list predicates to the OncallShiftHandoverUpdate builder.
func (oshuo *OncallShiftHandoverUpdateOne) Where(ps ...predicate.OncallShiftHandover) *OncallShiftHandoverUpdateOne {
	oshuo.mutation.Where(ps...)
	return oshuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oshuo *OncallShiftHandoverUpdateOne) Select(field string, fields ...string) *OncallShiftHandoverUpdateOne {
	oshuo.fields = append([]string{field}, fields...)
	return oshuo
}

// Save executes the query and returns the updated OncallShiftHandover entity.
func (oshuo *OncallShiftHandoverUpdateOne) Save(ctx context.Context) (*OncallShiftHandover, error) {
	return withHooks(ctx, oshuo.sqlSave, oshuo.mutation, oshuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oshuo *OncallShiftHandoverUpdateOne) SaveX(ctx context.Context) *OncallShiftHandover {
	node, err := oshuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oshuo *OncallShiftHandoverUpdateOne) Exec(ctx context.Context) error {
	_, err := oshuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oshuo *OncallShiftHandoverUpdateOne) ExecX(ctx context.Context) {
	if err := oshuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oshuo *OncallShiftHandoverUpdateOne) check() error {
	if oshuo.mutation.TenantCleared() && len(oshuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShiftHandover.tenant"`)
	}
	if oshuo.mutation.ShiftCleared() && len(oshuo.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShiftHandover.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oshuo *OncallShiftHandoverUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallShiftHandoverUpdateOne {
	oshuo.modifiers = append(oshuo.modifiers, modifiers...)
	return oshuo
}

func (oshuo *OncallShiftHandoverUpdateOne) sqlSave(ctx context.Context) (_node *OncallShiftHandover, err error) {
	if err := oshuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallshifthandover.Table, oncallshifthandover.Columns, sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID))
	id, ok := oshuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallShiftHandover.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oshuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallshifthandover.FieldID)
		for _, f := range fields {
			if !oncallshifthandover.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallshifthandover.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oshuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oshuo.mutation.CreatedAt(); ok {
		_spec.SetField(oncallshifthandover.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oshuo.mutation.ReminderSent(); ok {
		_spec.SetField(oncallshifthandover.FieldReminderSent, field.TypeBool, value)
	}
	if value, ok := oshuo.mutation.UpdatedAt(); ok {
		_spec.SetField(oncallshifthandover.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oshuo.mutation.SentAt(); ok {
		_spec.SetField(oncallshifthandover.FieldSentAt, field.TypeTime, value)
	}
	if oshuo.mutation.SentAtCleared() {
		_spec.ClearField(oncallshifthandover.FieldSentAt, field.TypeTime)
	}
	if value, ok := oshuo.mutation.Contents(); ok {
		_spec.SetField(oncallshifthandover.FieldContents, field.TypeBytes, value)
	}
	if oshuo.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallshifthandover.ShiftTable,
			Columns: []string{oncallshifthandover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oshuo.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallshifthandover.ShiftTable,
			Columns: []string{oncallshifthandover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oshuo.mutation.PinnedAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallshifthandover.PinnedAnnotationsTable,
			Columns: oncallshifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oshuo.mutation.RemovedPinnedAnnotationsIDs(); len(nodes) > 0 && !oshuo.mutation.PinnedAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallshifthandover.PinnedAnnotationsTable,
			Columns: oncallshifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oshuo.mutation.PinnedAnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallshifthandover.PinnedAnnotationsTable,
			Columns: oncallshifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oshuo.modifiers...)
	_node = &OncallShiftHandover{config: oshuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oshuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallshifthandover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oshuo.mutation.done = true
	return _node, nil
}
