// Code generated by ent, DO NOT EDIT.

package alertfeedback

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the alertfeedback type in the database.
	Label = "alert_feedback"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldAlertInstanceID holds the string denoting the alert_instance_id field in the database.
	FieldAlertInstanceID = "alert_instance_id"
	// FieldActionable holds the string denoting the actionable field in the database.
	FieldActionable = "actionable"
	// FieldAccurate holds the string denoting the accurate field in the database.
	FieldAccurate = "accurate"
	// FieldDocumentationAvailable holds the string denoting the documentation_available field in the database.
	FieldDocumentationAvailable = "documentation_available"
	// FieldDocumentationNeedsUpdate holds the string denoting the documentation_needs_update field in the database.
	FieldDocumentationNeedsUpdate = "documentation_needs_update"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeAlertInstance holds the string denoting the alert_instance edge name in mutations.
	EdgeAlertInstance = "alert_instance"
	// Table holds the table name of the alertfeedback in the database.
	Table = "alert_feedbacks"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "alert_feedbacks"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// AlertInstanceTable is the table that holds the alert_instance relation/edge.
	AlertInstanceTable = "alert_feedbacks"
	// AlertInstanceInverseTable is the table name for the AlertInstance entity.
	// It exists in this package in order to avoid circular dependency with the "alertinstance" package.
	AlertInstanceInverseTable = "alert_instances"
	// AlertInstanceColumn is the table column denoting the alert_instance relation/edge.
	AlertInstanceColumn = "alert_instance_id"
)

// Columns holds all SQL columns for alertfeedback fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldAlertInstanceID,
	FieldActionable,
	FieldAccurate,
	FieldDocumentationAvailable,
	FieldDocumentationNeedsUpdate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Accurate defines the type for the "accurate" enum field.
type Accurate string

// Accurate values.
const (
	AccurateYes     Accurate = "yes"
	AccurateNo      Accurate = "no"
	AccurateUnknown Accurate = "unknown"
)

func (a Accurate) String() string {
	return string(a)
}

// AccurateValidator is a validator for the "accurate" field enum values. It is called by the builders before save.
func AccurateValidator(a Accurate) error {
	switch a {
	case AccurateYes, AccurateNo, AccurateUnknown:
		return nil
	default:
		return fmt.Errorf("alertfeedback: invalid enum value for accurate field: %q", a)
	}
}

// OrderOption defines the ordering options for the AlertFeedback queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByAlertInstanceID orders the results by the alert_instance_id field.
func ByAlertInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlertInstanceID, opts...).ToFunc()
}

// ByActionable orders the results by the actionable field.
func ByActionable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionable, opts...).ToFunc()
}

// ByAccurate orders the results by the accurate field.
func ByAccurate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccurate, opts...).ToFunc()
}

// ByDocumentationAvailable orders the results by the documentation_available field.
func ByDocumentationAvailable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentationAvailable, opts...).ToFunc()
}

// ByDocumentationNeedsUpdate orders the results by the documentation_needs_update field.
func ByDocumentationNeedsUpdate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentationNeedsUpdate, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByAlertInstanceField orders the results by alert_instance field.
func ByAlertInstanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlertInstanceStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newAlertInstanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlertInstanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AlertInstanceTable, AlertInstanceColumn),
	)
}
