// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/eventannotation"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/retrospectivecomment"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/task"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetProviderID sets the "provider_id" field.
func (uu *UserUpdate) SetProviderID(s string) *UserUpdate {
	uu.mutation.SetProviderID(s)
	return uu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProviderID(s *string) *UserUpdate {
	if s != nil {
		uu.SetProviderID(*s)
	}
	return uu
}

// ClearProviderID clears the value of the "provider_id" field.
func (uu *UserUpdate) ClearProviderID() *UserUpdate {
	uu.mutation.ClearProviderID()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetChatID sets the "chat_id" field.
func (uu *UserUpdate) SetChatID(s string) *UserUpdate {
	uu.mutation.SetChatID(s)
	return uu
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableChatID(s *string) *UserUpdate {
	if s != nil {
		uu.SetChatID(*s)
	}
	return uu
}

// ClearChatID clears the value of the "chat_id" field.
func (uu *UserUpdate) ClearChatID() *UserUpdate {
	uu.mutation.ClearChatID()
	return uu
}

// SetTimezone sets the "timezone" field.
func (uu *UserUpdate) SetTimezone(s string) *UserUpdate {
	uu.mutation.SetTimezone(s)
	return uu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTimezone(s *string) *UserUpdate {
	if s != nil {
		uu.SetTimezone(*s)
	}
	return uu
}

// ClearTimezone clears the value of the "timezone" field.
func (uu *UserUpdate) ClearTimezone() *UserUpdate {
	uu.mutation.ClearTimezone()
	return uu
}

// SetConfirmed sets the "confirmed" field.
func (uu *UserUpdate) SetConfirmed(b bool) *UserUpdate {
	uu.mutation.SetConfirmed(b)
	return uu
}

// SetNillableConfirmed sets the "confirmed" field if the given value is not nil.
func (uu *UserUpdate) SetNillableConfirmed(b *bool) *UserUpdate {
	if b != nil {
		uu.SetConfirmed(*b)
	}
	return uu
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (uu *UserUpdate) AddTeamIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddTeamIDs(ids...)
	return uu
}

// AddTeams adds the "teams" edges to the Team entity.
func (uu *UserUpdate) AddTeams(t ...*Team) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTeamIDs(ids...)
}

// AddWatchedOncallRosterIDs adds the "watched_oncall_rosters" edge to the OncallRoster entity by IDs.
func (uu *UserUpdate) AddWatchedOncallRosterIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddWatchedOncallRosterIDs(ids...)
	return uu
}

// AddWatchedOncallRosters adds the "watched_oncall_rosters" edges to the OncallRoster entity.
func (uu *UserUpdate) AddWatchedOncallRosters(o ...*OncallRoster) *UserUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddWatchedOncallRosterIDs(ids...)
}

// AddOncallScheduleIDs adds the "oncall_schedules" edge to the OncallScheduleParticipant entity by IDs.
func (uu *UserUpdate) AddOncallScheduleIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddOncallScheduleIDs(ids...)
	return uu
}

// AddOncallSchedules adds the "oncall_schedules" edges to the OncallScheduleParticipant entity.
func (uu *UserUpdate) AddOncallSchedules(o ...*OncallScheduleParticipant) *UserUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOncallScheduleIDs(ids...)
}

// AddOncallShiftIDs adds the "oncall_shifts" edge to the OncallShift entity by IDs.
func (uu *UserUpdate) AddOncallShiftIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddOncallShiftIDs(ids...)
	return uu
}

// AddOncallShifts adds the "oncall_shifts" edges to the OncallShift entity.
func (uu *UserUpdate) AddOncallShifts(o ...*OncallShift) *UserUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOncallShiftIDs(ids...)
}

// AddEventAnnotationIDs adds the "event_annotations" edge to the EventAnnotation entity by IDs.
func (uu *UserUpdate) AddEventAnnotationIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddEventAnnotationIDs(ids...)
	return uu
}

// AddEventAnnotations adds the "event_annotations" edges to the EventAnnotation entity.
func (uu *UserUpdate) AddEventAnnotations(e ...*EventAnnotation) *UserUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddEventAnnotationIDs(ids...)
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (uu *UserUpdate) AddIncidentIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddIncidentIDs(ids...)
	return uu
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (uu *UserUpdate) AddIncidents(i ...*Incident) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddIncidentIDs(ids...)
}

// AddIncidentDebriefIDs adds the "incident_debriefs" edge to the IncidentDebrief entity by IDs.
func (uu *UserUpdate) AddIncidentDebriefIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddIncidentDebriefIDs(ids...)
	return uu
}

// AddIncidentDebriefs adds the "incident_debriefs" edges to the IncidentDebrief entity.
func (uu *UserUpdate) AddIncidentDebriefs(i ...*IncidentDebrief) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddIncidentDebriefIDs(ids...)
}

// AddAssignedTaskIDs adds the "assigned_tasks" edge to the Task entity by IDs.
func (uu *UserUpdate) AddAssignedTaskIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddAssignedTaskIDs(ids...)
	return uu
}

// AddAssignedTasks adds the "assigned_tasks" edges to the Task entity.
func (uu *UserUpdate) AddAssignedTasks(t ...*Task) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddAssignedTaskIDs(ids...)
}

// AddCreatedTaskIDs adds the "created_tasks" edge to the Task entity by IDs.
func (uu *UserUpdate) AddCreatedTaskIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddCreatedTaskIDs(ids...)
	return uu
}

// AddCreatedTasks adds the "created_tasks" edges to the Task entity.
func (uu *UserUpdate) AddCreatedTasks(t ...*Task) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddCreatedTaskIDs(ids...)
}

// AddRetrospectiveReviewRequestIDs adds the "retrospective_review_requests" edge to the RetrospectiveReview entity by IDs.
func (uu *UserUpdate) AddRetrospectiveReviewRequestIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddRetrospectiveReviewRequestIDs(ids...)
	return uu
}

// AddRetrospectiveReviewRequests adds the "retrospective_review_requests" edges to the RetrospectiveReview entity.
func (uu *UserUpdate) AddRetrospectiveReviewRequests(r ...*RetrospectiveReview) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRetrospectiveReviewRequestIDs(ids...)
}

// AddRetrospectiveReviewResponseIDs adds the "retrospective_review_responses" edge to the RetrospectiveReview entity by IDs.
func (uu *UserUpdate) AddRetrospectiveReviewResponseIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddRetrospectiveReviewResponseIDs(ids...)
	return uu
}

// AddRetrospectiveReviewResponses adds the "retrospective_review_responses" edges to the RetrospectiveReview entity.
func (uu *UserUpdate) AddRetrospectiveReviewResponses(r ...*RetrospectiveReview) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRetrospectiveReviewResponseIDs(ids...)
}

// AddRetrospectiveCommentIDs adds the "retrospective_comments" edge to the RetrospectiveComment entity by IDs.
func (uu *UserUpdate) AddRetrospectiveCommentIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddRetrospectiveCommentIDs(ids...)
	return uu
}

// AddRetrospectiveComments adds the "retrospective_comments" edges to the RetrospectiveComment entity.
func (uu *UserUpdate) AddRetrospectiveComments(r ...*RetrospectiveComment) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRetrospectiveCommentIDs(ids...)
}

// AddRoleAssignmentIDs adds the "role_assignments" edge to the IncidentRoleAssignment entity by IDs.
func (uu *UserUpdate) AddRoleAssignmentIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddRoleAssignmentIDs(ids...)
	return uu
}

// AddRoleAssignments adds the "role_assignments" edges to the IncidentRoleAssignment entity.
func (uu *UserUpdate) AddRoleAssignments(i ...*IncidentRoleAssignment) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddRoleAssignmentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (uu *UserUpdate) ClearTeams() *UserUpdate {
	uu.mutation.ClearTeams()
	return uu
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (uu *UserUpdate) RemoveTeamIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveTeamIDs(ids...)
	return uu
}

// RemoveTeams removes "teams" edges to Team entities.
func (uu *UserUpdate) RemoveTeams(t ...*Team) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTeamIDs(ids...)
}

// ClearWatchedOncallRosters clears all "watched_oncall_rosters" edges to the OncallRoster entity.
func (uu *UserUpdate) ClearWatchedOncallRosters() *UserUpdate {
	uu.mutation.ClearWatchedOncallRosters()
	return uu
}

// RemoveWatchedOncallRosterIDs removes the "watched_oncall_rosters" edge to OncallRoster entities by IDs.
func (uu *UserUpdate) RemoveWatchedOncallRosterIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveWatchedOncallRosterIDs(ids...)
	return uu
}

// RemoveWatchedOncallRosters removes "watched_oncall_rosters" edges to OncallRoster entities.
func (uu *UserUpdate) RemoveWatchedOncallRosters(o ...*OncallRoster) *UserUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveWatchedOncallRosterIDs(ids...)
}

// ClearOncallSchedules clears all "oncall_schedules" edges to the OncallScheduleParticipant entity.
func (uu *UserUpdate) ClearOncallSchedules() *UserUpdate {
	uu.mutation.ClearOncallSchedules()
	return uu
}

// RemoveOncallScheduleIDs removes the "oncall_schedules" edge to OncallScheduleParticipant entities by IDs.
func (uu *UserUpdate) RemoveOncallScheduleIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveOncallScheduleIDs(ids...)
	return uu
}

// RemoveOncallSchedules removes "oncall_schedules" edges to OncallScheduleParticipant entities.
func (uu *UserUpdate) RemoveOncallSchedules(o ...*OncallScheduleParticipant) *UserUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOncallScheduleIDs(ids...)
}

// ClearOncallShifts clears all "oncall_shifts" edges to the OncallShift entity.
func (uu *UserUpdate) ClearOncallShifts() *UserUpdate {
	uu.mutation.ClearOncallShifts()
	return uu
}

// RemoveOncallShiftIDs removes the "oncall_shifts" edge to OncallShift entities by IDs.
func (uu *UserUpdate) RemoveOncallShiftIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveOncallShiftIDs(ids...)
	return uu
}

// RemoveOncallShifts removes "oncall_shifts" edges to OncallShift entities.
func (uu *UserUpdate) RemoveOncallShifts(o ...*OncallShift) *UserUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOncallShiftIDs(ids...)
}

// ClearEventAnnotations clears all "event_annotations" edges to the EventAnnotation entity.
func (uu *UserUpdate) ClearEventAnnotations() *UserUpdate {
	uu.mutation.ClearEventAnnotations()
	return uu
}

// RemoveEventAnnotationIDs removes the "event_annotations" edge to EventAnnotation entities by IDs.
func (uu *UserUpdate) RemoveEventAnnotationIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveEventAnnotationIDs(ids...)
	return uu
}

// RemoveEventAnnotations removes "event_annotations" edges to EventAnnotation entities.
func (uu *UserUpdate) RemoveEventAnnotations(e ...*EventAnnotation) *UserUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveEventAnnotationIDs(ids...)
}

// ClearIncidents clears all "incidents" edges to the Incident entity.
func (uu *UserUpdate) ClearIncidents() *UserUpdate {
	uu.mutation.ClearIncidents()
	return uu
}

// RemoveIncidentIDs removes the "incidents" edge to Incident entities by IDs.
func (uu *UserUpdate) RemoveIncidentIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveIncidentIDs(ids...)
	return uu
}

// RemoveIncidents removes "incidents" edges to Incident entities.
func (uu *UserUpdate) RemoveIncidents(i ...*Incident) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveIncidentIDs(ids...)
}

// ClearIncidentDebriefs clears all "incident_debriefs" edges to the IncidentDebrief entity.
func (uu *UserUpdate) ClearIncidentDebriefs() *UserUpdate {
	uu.mutation.ClearIncidentDebriefs()
	return uu
}

// RemoveIncidentDebriefIDs removes the "incident_debriefs" edge to IncidentDebrief entities by IDs.
func (uu *UserUpdate) RemoveIncidentDebriefIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveIncidentDebriefIDs(ids...)
	return uu
}

// RemoveIncidentDebriefs removes "incident_debriefs" edges to IncidentDebrief entities.
func (uu *UserUpdate) RemoveIncidentDebriefs(i ...*IncidentDebrief) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveIncidentDebriefIDs(ids...)
}

// ClearAssignedTasks clears all "assigned_tasks" edges to the Task entity.
func (uu *UserUpdate) ClearAssignedTasks() *UserUpdate {
	uu.mutation.ClearAssignedTasks()
	return uu
}

// RemoveAssignedTaskIDs removes the "assigned_tasks" edge to Task entities by IDs.
func (uu *UserUpdate) RemoveAssignedTaskIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveAssignedTaskIDs(ids...)
	return uu
}

// RemoveAssignedTasks removes "assigned_tasks" edges to Task entities.
func (uu *UserUpdate) RemoveAssignedTasks(t ...*Task) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveAssignedTaskIDs(ids...)
}

// ClearCreatedTasks clears all "created_tasks" edges to the Task entity.
func (uu *UserUpdate) ClearCreatedTasks() *UserUpdate {
	uu.mutation.ClearCreatedTasks()
	return uu
}

// RemoveCreatedTaskIDs removes the "created_tasks" edge to Task entities by IDs.
func (uu *UserUpdate) RemoveCreatedTaskIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveCreatedTaskIDs(ids...)
	return uu
}

// RemoveCreatedTasks removes "created_tasks" edges to Task entities.
func (uu *UserUpdate) RemoveCreatedTasks(t ...*Task) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveCreatedTaskIDs(ids...)
}

// ClearRetrospectiveReviewRequests clears all "retrospective_review_requests" edges to the RetrospectiveReview entity.
func (uu *UserUpdate) ClearRetrospectiveReviewRequests() *UserUpdate {
	uu.mutation.ClearRetrospectiveReviewRequests()
	return uu
}

// RemoveRetrospectiveReviewRequestIDs removes the "retrospective_review_requests" edge to RetrospectiveReview entities by IDs.
func (uu *UserUpdate) RemoveRetrospectiveReviewRequestIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveRetrospectiveReviewRequestIDs(ids...)
	return uu
}

// RemoveRetrospectiveReviewRequests removes "retrospective_review_requests" edges to RetrospectiveReview entities.
func (uu *UserUpdate) RemoveRetrospectiveReviewRequests(r ...*RetrospectiveReview) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRetrospectiveReviewRequestIDs(ids...)
}

// ClearRetrospectiveReviewResponses clears all "retrospective_review_responses" edges to the RetrospectiveReview entity.
func (uu *UserUpdate) ClearRetrospectiveReviewResponses() *UserUpdate {
	uu.mutation.ClearRetrospectiveReviewResponses()
	return uu
}

// RemoveRetrospectiveReviewResponseIDs removes the "retrospective_review_responses" edge to RetrospectiveReview entities by IDs.
func (uu *UserUpdate) RemoveRetrospectiveReviewResponseIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveRetrospectiveReviewResponseIDs(ids...)
	return uu
}

// RemoveRetrospectiveReviewResponses removes "retrospective_review_responses" edges to RetrospectiveReview entities.
func (uu *UserUpdate) RemoveRetrospectiveReviewResponses(r ...*RetrospectiveReview) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRetrospectiveReviewResponseIDs(ids...)
}

// ClearRetrospectiveComments clears all "retrospective_comments" edges to the RetrospectiveComment entity.
func (uu *UserUpdate) ClearRetrospectiveComments() *UserUpdate {
	uu.mutation.ClearRetrospectiveComments()
	return uu
}

// RemoveRetrospectiveCommentIDs removes the "retrospective_comments" edge to RetrospectiveComment entities by IDs.
func (uu *UserUpdate) RemoveRetrospectiveCommentIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveRetrospectiveCommentIDs(ids...)
	return uu
}

// RemoveRetrospectiveComments removes "retrospective_comments" edges to RetrospectiveComment entities.
func (uu *UserUpdate) RemoveRetrospectiveComments(r ...*RetrospectiveComment) *UserUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRetrospectiveCommentIDs(ids...)
}

// ClearRoleAssignments clears all "role_assignments" edges to the IncidentRoleAssignment entity.
func (uu *UserUpdate) ClearRoleAssignments() *UserUpdate {
	uu.mutation.ClearRoleAssignments()
	return uu
}

// RemoveRoleAssignmentIDs removes the "role_assignments" edge to IncidentRoleAssignment entities by IDs.
func (uu *UserUpdate) RemoveRoleAssignmentIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveRoleAssignmentIDs(ids...)
	return uu
}

// RemoveRoleAssignments removes "role_assignments" edges to IncidentRoleAssignment entities.
func (uu *UserUpdate) RemoveRoleAssignments(i ...*IncidentRoleAssignment) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveRoleAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if uu.mutation.TenantCleared() && len(uu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.ProviderID(); ok {
		_spec.SetField(user.FieldProviderID, field.TypeString, value)
	}
	if uu.mutation.ProviderIDCleared() {
		_spec.ClearField(user.FieldProviderID, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.ChatID(); ok {
		_spec.SetField(user.FieldChatID, field.TypeString, value)
	}
	if uu.mutation.ChatIDCleared() {
		_spec.ClearField(user.FieldChatID, field.TypeString)
	}
	if value, ok := uu.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if uu.mutation.TimezoneCleared() {
		_spec.ClearField(user.FieldTimezone, field.TypeString)
	}
	if value, ok := uu.mutation.Confirmed(); ok {
		_spec.SetField(user.FieldConfirmed, field.TypeBool, value)
	}
	if uu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !uu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WatchedOncallRostersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.WatchedOncallRostersTable,
			Columns: user.WatchedOncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedWatchedOncallRostersIDs(); len(nodes) > 0 && !uu.mutation.WatchedOncallRostersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.WatchedOncallRostersTable,
			Columns: user.WatchedOncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WatchedOncallRostersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.WatchedOncallRostersTable,
			Columns: user.WatchedOncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OncallSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallSchedulesTable,
			Columns: []string{user.OncallSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOncallSchedulesIDs(); len(nodes) > 0 && !uu.mutation.OncallSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallSchedulesTable,
			Columns: []string{user.OncallSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OncallSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallSchedulesTable,
			Columns: []string{user.OncallSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OncallShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallShiftsTable,
			Columns: []string{user.OncallShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOncallShiftsIDs(); len(nodes) > 0 && !uu.mutation.OncallShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallShiftsTable,
			Columns: []string{user.OncallShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OncallShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallShiftsTable,
			Columns: []string{user.OncallShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.EventAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventAnnotationsTable,
			Columns: []string{user.EventAnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEventAnnotationsIDs(); len(nodes) > 0 && !uu.mutation.EventAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventAnnotationsTable,
			Columns: []string{user.EventAnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EventAnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventAnnotationsTable,
			Columns: []string{user.EventAnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.IncidentsTable,
			Columns: user.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		createE := &IncidentRoleAssignmentCreate{config: uu.config, mutation: newIncidentRoleAssignmentMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !uu.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.IncidentsTable,
			Columns: user.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentRoleAssignmentCreate{config: uu.config, mutation: newIncidentRoleAssignmentMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.IncidentsTable,
			Columns: user.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentRoleAssignmentCreate{config: uu.config, mutation: newIncidentRoleAssignmentMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.IncidentDebriefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IncidentDebriefsTable,
			Columns: []string{user.IncidentDebriefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedIncidentDebriefsIDs(); len(nodes) > 0 && !uu.mutation.IncidentDebriefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IncidentDebriefsTable,
			Columns: []string{user.IncidentDebriefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.IncidentDebriefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IncidentDebriefsTable,
			Columns: []string{user.IncidentDebriefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AssignedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTasksTable,
			Columns: []string{user.AssignedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAssignedTasksIDs(); len(nodes) > 0 && !uu.mutation.AssignedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTasksTable,
			Columns: []string{user.AssignedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AssignedTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTasksTable,
			Columns: []string{user.AssignedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTasksTable,
			Columns: []string{user.CreatedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedTasksIDs(); len(nodes) > 0 && !uu.mutation.CreatedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTasksTable,
			Columns: []string{user.CreatedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTasksTable,
			Columns: []string{user.CreatedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RetrospectiveReviewRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewRequestsTable,
			Columns: []string{user.RetrospectiveReviewRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRetrospectiveReviewRequestsIDs(); len(nodes) > 0 && !uu.mutation.RetrospectiveReviewRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewRequestsTable,
			Columns: []string{user.RetrospectiveReviewRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RetrospectiveReviewRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewRequestsTable,
			Columns: []string{user.RetrospectiveReviewRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RetrospectiveReviewResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewResponsesTable,
			Columns: []string{user.RetrospectiveReviewResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRetrospectiveReviewResponsesIDs(); len(nodes) > 0 && !uu.mutation.RetrospectiveReviewResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewResponsesTable,
			Columns: []string{user.RetrospectiveReviewResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RetrospectiveReviewResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewResponsesTable,
			Columns: []string{user.RetrospectiveReviewResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RetrospectiveCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveCommentsTable,
			Columns: []string{user.RetrospectiveCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRetrospectiveCommentsIDs(); len(nodes) > 0 && !uu.mutation.RetrospectiveCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveCommentsTable,
			Columns: []string{user.RetrospectiveCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RetrospectiveCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveCommentsTable,
			Columns: []string{user.RetrospectiveCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RoleAssignmentsTable,
			Columns: []string{user.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentroleassignment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRoleAssignmentsIDs(); len(nodes) > 0 && !uu.mutation.RoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RoleAssignmentsTable,
			Columns: []string{user.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentroleassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RoleAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RoleAssignmentsTable,
			Columns: []string{user.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentroleassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetProviderID sets the "provider_id" field.
func (uuo *UserUpdateOne) SetProviderID(s string) *UserUpdateOne {
	uuo.mutation.SetProviderID(s)
	return uuo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProviderID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetProviderID(*s)
	}
	return uuo
}

// ClearProviderID clears the value of the "provider_id" field.
func (uuo *UserUpdateOne) ClearProviderID() *UserUpdateOne {
	uuo.mutation.ClearProviderID()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetChatID sets the "chat_id" field.
func (uuo *UserUpdateOne) SetChatID(s string) *UserUpdateOne {
	uuo.mutation.SetChatID(s)
	return uuo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableChatID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetChatID(*s)
	}
	return uuo
}

// ClearChatID clears the value of the "chat_id" field.
func (uuo *UserUpdateOne) ClearChatID() *UserUpdateOne {
	uuo.mutation.ClearChatID()
	return uuo
}

// SetTimezone sets the "timezone" field.
func (uuo *UserUpdateOne) SetTimezone(s string) *UserUpdateOne {
	uuo.mutation.SetTimezone(s)
	return uuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTimezone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTimezone(*s)
	}
	return uuo
}

// ClearTimezone clears the value of the "timezone" field.
func (uuo *UserUpdateOne) ClearTimezone() *UserUpdateOne {
	uuo.mutation.ClearTimezone()
	return uuo
}

// SetConfirmed sets the "confirmed" field.
func (uuo *UserUpdateOne) SetConfirmed(b bool) *UserUpdateOne {
	uuo.mutation.SetConfirmed(b)
	return uuo
}

// SetNillableConfirmed sets the "confirmed" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableConfirmed(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetConfirmed(*b)
	}
	return uuo
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (uuo *UserUpdateOne) AddTeamIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddTeamIDs(ids...)
	return uuo
}

// AddTeams adds the "teams" edges to the Team entity.
func (uuo *UserUpdateOne) AddTeams(t ...*Team) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTeamIDs(ids...)
}

// AddWatchedOncallRosterIDs adds the "watched_oncall_rosters" edge to the OncallRoster entity by IDs.
func (uuo *UserUpdateOne) AddWatchedOncallRosterIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddWatchedOncallRosterIDs(ids...)
	return uuo
}

// AddWatchedOncallRosters adds the "watched_oncall_rosters" edges to the OncallRoster entity.
func (uuo *UserUpdateOne) AddWatchedOncallRosters(o ...*OncallRoster) *UserUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddWatchedOncallRosterIDs(ids...)
}

// AddOncallScheduleIDs adds the "oncall_schedules" edge to the OncallScheduleParticipant entity by IDs.
func (uuo *UserUpdateOne) AddOncallScheduleIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddOncallScheduleIDs(ids...)
	return uuo
}

// AddOncallSchedules adds the "oncall_schedules" edges to the OncallScheduleParticipant entity.
func (uuo *UserUpdateOne) AddOncallSchedules(o ...*OncallScheduleParticipant) *UserUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOncallScheduleIDs(ids...)
}

// AddOncallShiftIDs adds the "oncall_shifts" edge to the OncallShift entity by IDs.
func (uuo *UserUpdateOne) AddOncallShiftIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddOncallShiftIDs(ids...)
	return uuo
}

// AddOncallShifts adds the "oncall_shifts" edges to the OncallShift entity.
func (uuo *UserUpdateOne) AddOncallShifts(o ...*OncallShift) *UserUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOncallShiftIDs(ids...)
}

// AddEventAnnotationIDs adds the "event_annotations" edge to the EventAnnotation entity by IDs.
func (uuo *UserUpdateOne) AddEventAnnotationIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddEventAnnotationIDs(ids...)
	return uuo
}

// AddEventAnnotations adds the "event_annotations" edges to the EventAnnotation entity.
func (uuo *UserUpdateOne) AddEventAnnotations(e ...*EventAnnotation) *UserUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddEventAnnotationIDs(ids...)
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (uuo *UserUpdateOne) AddIncidentIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddIncidentIDs(ids...)
	return uuo
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (uuo *UserUpdateOne) AddIncidents(i ...*Incident) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddIncidentIDs(ids...)
}

// AddIncidentDebriefIDs adds the "incident_debriefs" edge to the IncidentDebrief entity by IDs.
func (uuo *UserUpdateOne) AddIncidentDebriefIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddIncidentDebriefIDs(ids...)
	return uuo
}

// AddIncidentDebriefs adds the "incident_debriefs" edges to the IncidentDebrief entity.
func (uuo *UserUpdateOne) AddIncidentDebriefs(i ...*IncidentDebrief) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddIncidentDebriefIDs(ids...)
}

// AddAssignedTaskIDs adds the "assigned_tasks" edge to the Task entity by IDs.
func (uuo *UserUpdateOne) AddAssignedTaskIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddAssignedTaskIDs(ids...)
	return uuo
}

// AddAssignedTasks adds the "assigned_tasks" edges to the Task entity.
func (uuo *UserUpdateOne) AddAssignedTasks(t ...*Task) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddAssignedTaskIDs(ids...)
}

// AddCreatedTaskIDs adds the "created_tasks" edge to the Task entity by IDs.
func (uuo *UserUpdateOne) AddCreatedTaskIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddCreatedTaskIDs(ids...)
	return uuo
}

// AddCreatedTasks adds the "created_tasks" edges to the Task entity.
func (uuo *UserUpdateOne) AddCreatedTasks(t ...*Task) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddCreatedTaskIDs(ids...)
}

// AddRetrospectiveReviewRequestIDs adds the "retrospective_review_requests" edge to the RetrospectiveReview entity by IDs.
func (uuo *UserUpdateOne) AddRetrospectiveReviewRequestIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddRetrospectiveReviewRequestIDs(ids...)
	return uuo
}

// AddRetrospectiveReviewRequests adds the "retrospective_review_requests" edges to the RetrospectiveReview entity.
func (uuo *UserUpdateOne) AddRetrospectiveReviewRequests(r ...*RetrospectiveReview) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRetrospectiveReviewRequestIDs(ids...)
}

// AddRetrospectiveReviewResponseIDs adds the "retrospective_review_responses" edge to the RetrospectiveReview entity by IDs.
func (uuo *UserUpdateOne) AddRetrospectiveReviewResponseIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddRetrospectiveReviewResponseIDs(ids...)
	return uuo
}

// AddRetrospectiveReviewResponses adds the "retrospective_review_responses" edges to the RetrospectiveReview entity.
func (uuo *UserUpdateOne) AddRetrospectiveReviewResponses(r ...*RetrospectiveReview) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRetrospectiveReviewResponseIDs(ids...)
}

// AddRetrospectiveCommentIDs adds the "retrospective_comments" edge to the RetrospectiveComment entity by IDs.
func (uuo *UserUpdateOne) AddRetrospectiveCommentIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddRetrospectiveCommentIDs(ids...)
	return uuo
}

// AddRetrospectiveComments adds the "retrospective_comments" edges to the RetrospectiveComment entity.
func (uuo *UserUpdateOne) AddRetrospectiveComments(r ...*RetrospectiveComment) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRetrospectiveCommentIDs(ids...)
}

// AddRoleAssignmentIDs adds the "role_assignments" edge to the IncidentRoleAssignment entity by IDs.
func (uuo *UserUpdateOne) AddRoleAssignmentIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddRoleAssignmentIDs(ids...)
	return uuo
}

// AddRoleAssignments adds the "role_assignments" edges to the IncidentRoleAssignment entity.
func (uuo *UserUpdateOne) AddRoleAssignments(i ...*IncidentRoleAssignment) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddRoleAssignmentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (uuo *UserUpdateOne) ClearTeams() *UserUpdateOne {
	uuo.mutation.ClearTeams()
	return uuo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (uuo *UserUpdateOne) RemoveTeamIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveTeamIDs(ids...)
	return uuo
}

// RemoveTeams removes "teams" edges to Team entities.
func (uuo *UserUpdateOne) RemoveTeams(t ...*Team) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTeamIDs(ids...)
}

// ClearWatchedOncallRosters clears all "watched_oncall_rosters" edges to the OncallRoster entity.
func (uuo *UserUpdateOne) ClearWatchedOncallRosters() *UserUpdateOne {
	uuo.mutation.ClearWatchedOncallRosters()
	return uuo
}

// RemoveWatchedOncallRosterIDs removes the "watched_oncall_rosters" edge to OncallRoster entities by IDs.
func (uuo *UserUpdateOne) RemoveWatchedOncallRosterIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveWatchedOncallRosterIDs(ids...)
	return uuo
}

// RemoveWatchedOncallRosters removes "watched_oncall_rosters" edges to OncallRoster entities.
func (uuo *UserUpdateOne) RemoveWatchedOncallRosters(o ...*OncallRoster) *UserUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveWatchedOncallRosterIDs(ids...)
}

// ClearOncallSchedules clears all "oncall_schedules" edges to the OncallScheduleParticipant entity.
func (uuo *UserUpdateOne) ClearOncallSchedules() *UserUpdateOne {
	uuo.mutation.ClearOncallSchedules()
	return uuo
}

// RemoveOncallScheduleIDs removes the "oncall_schedules" edge to OncallScheduleParticipant entities by IDs.
func (uuo *UserUpdateOne) RemoveOncallScheduleIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveOncallScheduleIDs(ids...)
	return uuo
}

// RemoveOncallSchedules removes "oncall_schedules" edges to OncallScheduleParticipant entities.
func (uuo *UserUpdateOne) RemoveOncallSchedules(o ...*OncallScheduleParticipant) *UserUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOncallScheduleIDs(ids...)
}

// ClearOncallShifts clears all "oncall_shifts" edges to the OncallShift entity.
func (uuo *UserUpdateOne) ClearOncallShifts() *UserUpdateOne {
	uuo.mutation.ClearOncallShifts()
	return uuo
}

// RemoveOncallShiftIDs removes the "oncall_shifts" edge to OncallShift entities by IDs.
func (uuo *UserUpdateOne) RemoveOncallShiftIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveOncallShiftIDs(ids...)
	return uuo
}

// RemoveOncallShifts removes "oncall_shifts" edges to OncallShift entities.
func (uuo *UserUpdateOne) RemoveOncallShifts(o ...*OncallShift) *UserUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOncallShiftIDs(ids...)
}

// ClearEventAnnotations clears all "event_annotations" edges to the EventAnnotation entity.
func (uuo *UserUpdateOne) ClearEventAnnotations() *UserUpdateOne {
	uuo.mutation.ClearEventAnnotations()
	return uuo
}

// RemoveEventAnnotationIDs removes the "event_annotations" edge to EventAnnotation entities by IDs.
func (uuo *UserUpdateOne) RemoveEventAnnotationIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveEventAnnotationIDs(ids...)
	return uuo
}

// RemoveEventAnnotations removes "event_annotations" edges to EventAnnotation entities.
func (uuo *UserUpdateOne) RemoveEventAnnotations(e ...*EventAnnotation) *UserUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveEventAnnotationIDs(ids...)
}

// ClearIncidents clears all "incidents" edges to the Incident entity.
func (uuo *UserUpdateOne) ClearIncidents() *UserUpdateOne {
	uuo.mutation.ClearIncidents()
	return uuo
}

// RemoveIncidentIDs removes the "incidents" edge to Incident entities by IDs.
func (uuo *UserUpdateOne) RemoveIncidentIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveIncidentIDs(ids...)
	return uuo
}

// RemoveIncidents removes "incidents" edges to Incident entities.
func (uuo *UserUpdateOne) RemoveIncidents(i ...*Incident) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveIncidentIDs(ids...)
}

// ClearIncidentDebriefs clears all "incident_debriefs" edges to the IncidentDebrief entity.
func (uuo *UserUpdateOne) ClearIncidentDebriefs() *UserUpdateOne {
	uuo.mutation.ClearIncidentDebriefs()
	return uuo
}

// RemoveIncidentDebriefIDs removes the "incident_debriefs" edge to IncidentDebrief entities by IDs.
func (uuo *UserUpdateOne) RemoveIncidentDebriefIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveIncidentDebriefIDs(ids...)
	return uuo
}

// RemoveIncidentDebriefs removes "incident_debriefs" edges to IncidentDebrief entities.
func (uuo *UserUpdateOne) RemoveIncidentDebriefs(i ...*IncidentDebrief) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveIncidentDebriefIDs(ids...)
}

// ClearAssignedTasks clears all "assigned_tasks" edges to the Task entity.
func (uuo *UserUpdateOne) ClearAssignedTasks() *UserUpdateOne {
	uuo.mutation.ClearAssignedTasks()
	return uuo
}

// RemoveAssignedTaskIDs removes the "assigned_tasks" edge to Task entities by IDs.
func (uuo *UserUpdateOne) RemoveAssignedTaskIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveAssignedTaskIDs(ids...)
	return uuo
}

// RemoveAssignedTasks removes "assigned_tasks" edges to Task entities.
func (uuo *UserUpdateOne) RemoveAssignedTasks(t ...*Task) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveAssignedTaskIDs(ids...)
}

// ClearCreatedTasks clears all "created_tasks" edges to the Task entity.
func (uuo *UserUpdateOne) ClearCreatedTasks() *UserUpdateOne {
	uuo.mutation.ClearCreatedTasks()
	return uuo
}

// RemoveCreatedTaskIDs removes the "created_tasks" edge to Task entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedTaskIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveCreatedTaskIDs(ids...)
	return uuo
}

// RemoveCreatedTasks removes "created_tasks" edges to Task entities.
func (uuo *UserUpdateOne) RemoveCreatedTasks(t ...*Task) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveCreatedTaskIDs(ids...)
}

// ClearRetrospectiveReviewRequests clears all "retrospective_review_requests" edges to the RetrospectiveReview entity.
func (uuo *UserUpdateOne) ClearRetrospectiveReviewRequests() *UserUpdateOne {
	uuo.mutation.ClearRetrospectiveReviewRequests()
	return uuo
}

// RemoveRetrospectiveReviewRequestIDs removes the "retrospective_review_requests" edge to RetrospectiveReview entities by IDs.
func (uuo *UserUpdateOne) RemoveRetrospectiveReviewRequestIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveRetrospectiveReviewRequestIDs(ids...)
	return uuo
}

// RemoveRetrospectiveReviewRequests removes "retrospective_review_requests" edges to RetrospectiveReview entities.
func (uuo *UserUpdateOne) RemoveRetrospectiveReviewRequests(r ...*RetrospectiveReview) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRetrospectiveReviewRequestIDs(ids...)
}

// ClearRetrospectiveReviewResponses clears all "retrospective_review_responses" edges to the RetrospectiveReview entity.
func (uuo *UserUpdateOne) ClearRetrospectiveReviewResponses() *UserUpdateOne {
	uuo.mutation.ClearRetrospectiveReviewResponses()
	return uuo
}

// RemoveRetrospectiveReviewResponseIDs removes the "retrospective_review_responses" edge to RetrospectiveReview entities by IDs.
func (uuo *UserUpdateOne) RemoveRetrospectiveReviewResponseIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveRetrospectiveReviewResponseIDs(ids...)
	return uuo
}

// RemoveRetrospectiveReviewResponses removes "retrospective_review_responses" edges to RetrospectiveReview entities.
func (uuo *UserUpdateOne) RemoveRetrospectiveReviewResponses(r ...*RetrospectiveReview) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRetrospectiveReviewResponseIDs(ids...)
}

// ClearRetrospectiveComments clears all "retrospective_comments" edges to the RetrospectiveComment entity.
func (uuo *UserUpdateOne) ClearRetrospectiveComments() *UserUpdateOne {
	uuo.mutation.ClearRetrospectiveComments()
	return uuo
}

// RemoveRetrospectiveCommentIDs removes the "retrospective_comments" edge to RetrospectiveComment entities by IDs.
func (uuo *UserUpdateOne) RemoveRetrospectiveCommentIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveRetrospectiveCommentIDs(ids...)
	return uuo
}

// RemoveRetrospectiveComments removes "retrospective_comments" edges to RetrospectiveComment entities.
func (uuo *UserUpdateOne) RemoveRetrospectiveComments(r ...*RetrospectiveComment) *UserUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRetrospectiveCommentIDs(ids...)
}

// ClearRoleAssignments clears all "role_assignments" edges to the IncidentRoleAssignment entity.
func (uuo *UserUpdateOne) ClearRoleAssignments() *UserUpdateOne {
	uuo.mutation.ClearRoleAssignments()
	return uuo
}

// RemoveRoleAssignmentIDs removes the "role_assignments" edge to IncidentRoleAssignment entities by IDs.
func (uuo *UserUpdateOne) RemoveRoleAssignmentIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveRoleAssignmentIDs(ids...)
	return uuo
}

// RemoveRoleAssignments removes "role_assignments" edges to IncidentRoleAssignment entities.
func (uuo *UserUpdateOne) RemoveRoleAssignments(i ...*IncidentRoleAssignment) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveRoleAssignmentIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if uuo.mutation.TenantCleared() && len(uuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.ProviderID(); ok {
		_spec.SetField(user.FieldProviderID, field.TypeString, value)
	}
	if uuo.mutation.ProviderIDCleared() {
		_spec.ClearField(user.FieldProviderID, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.ChatID(); ok {
		_spec.SetField(user.FieldChatID, field.TypeString, value)
	}
	if uuo.mutation.ChatIDCleared() {
		_spec.ClearField(user.FieldChatID, field.TypeString)
	}
	if value, ok := uuo.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if uuo.mutation.TimezoneCleared() {
		_spec.ClearField(user.FieldTimezone, field.TypeString)
	}
	if value, ok := uuo.mutation.Confirmed(); ok {
		_spec.SetField(user.FieldConfirmed, field.TypeBool, value)
	}
	if uuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !uuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WatchedOncallRostersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.WatchedOncallRostersTable,
			Columns: user.WatchedOncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedWatchedOncallRostersIDs(); len(nodes) > 0 && !uuo.mutation.WatchedOncallRostersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.WatchedOncallRostersTable,
			Columns: user.WatchedOncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WatchedOncallRostersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.WatchedOncallRostersTable,
			Columns: user.WatchedOncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OncallSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallSchedulesTable,
			Columns: []string{user.OncallSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOncallSchedulesIDs(); len(nodes) > 0 && !uuo.mutation.OncallSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallSchedulesTable,
			Columns: []string{user.OncallSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OncallSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallSchedulesTable,
			Columns: []string{user.OncallSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OncallShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallShiftsTable,
			Columns: []string{user.OncallShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOncallShiftsIDs(); len(nodes) > 0 && !uuo.mutation.OncallShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallShiftsTable,
			Columns: []string{user.OncallShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OncallShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallShiftsTable,
			Columns: []string{user.OncallShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.EventAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventAnnotationsTable,
			Columns: []string{user.EventAnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEventAnnotationsIDs(); len(nodes) > 0 && !uuo.mutation.EventAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventAnnotationsTable,
			Columns: []string{user.EventAnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EventAnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventAnnotationsTable,
			Columns: []string{user.EventAnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.IncidentsTable,
			Columns: user.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		createE := &IncidentRoleAssignmentCreate{config: uuo.config, mutation: newIncidentRoleAssignmentMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !uuo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.IncidentsTable,
			Columns: user.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentRoleAssignmentCreate{config: uuo.config, mutation: newIncidentRoleAssignmentMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.IncidentsTable,
			Columns: user.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentRoleAssignmentCreate{config: uuo.config, mutation: newIncidentRoleAssignmentMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.IncidentDebriefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IncidentDebriefsTable,
			Columns: []string{user.IncidentDebriefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedIncidentDebriefsIDs(); len(nodes) > 0 && !uuo.mutation.IncidentDebriefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IncidentDebriefsTable,
			Columns: []string{user.IncidentDebriefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.IncidentDebriefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IncidentDebriefsTable,
			Columns: []string{user.IncidentDebriefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AssignedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTasksTable,
			Columns: []string{user.AssignedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAssignedTasksIDs(); len(nodes) > 0 && !uuo.mutation.AssignedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTasksTable,
			Columns: []string{user.AssignedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AssignedTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTasksTable,
			Columns: []string{user.AssignedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTasksTable,
			Columns: []string{user.CreatedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedTasksIDs(); len(nodes) > 0 && !uuo.mutation.CreatedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTasksTable,
			Columns: []string{user.CreatedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTasksTable,
			Columns: []string{user.CreatedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RetrospectiveReviewRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewRequestsTable,
			Columns: []string{user.RetrospectiveReviewRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRetrospectiveReviewRequestsIDs(); len(nodes) > 0 && !uuo.mutation.RetrospectiveReviewRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewRequestsTable,
			Columns: []string{user.RetrospectiveReviewRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RetrospectiveReviewRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewRequestsTable,
			Columns: []string{user.RetrospectiveReviewRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RetrospectiveReviewResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewResponsesTable,
			Columns: []string{user.RetrospectiveReviewResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRetrospectiveReviewResponsesIDs(); len(nodes) > 0 && !uuo.mutation.RetrospectiveReviewResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewResponsesTable,
			Columns: []string{user.RetrospectiveReviewResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RetrospectiveReviewResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewResponsesTable,
			Columns: []string{user.RetrospectiveReviewResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RetrospectiveCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveCommentsTable,
			Columns: []string{user.RetrospectiveCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRetrospectiveCommentsIDs(); len(nodes) > 0 && !uuo.mutation.RetrospectiveCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveCommentsTable,
			Columns: []string{user.RetrospectiveCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RetrospectiveCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveCommentsTable,
			Columns: []string{user.RetrospectiveCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RoleAssignmentsTable,
			Columns: []string{user.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentroleassignment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRoleAssignmentsIDs(); len(nodes) > 0 && !uuo.mutation.RoleAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RoleAssignmentsTable,
			Columns: []string{user.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentroleassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RoleAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RoleAssignmentsTable,
			Columns: []string{user.RoleAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentroleassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
