// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/tenant"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind event.Kind `json:"kind,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges        EventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// AlertInstance holds the value of the alert_instance edge.
	AlertInstance []*AlertInstance `json:"alert_instance,omitempty"`
	// IncidentEvent holds the value of the incident_event edge.
	IncidentEvent []*IncidentEvent `json:"incident_event,omitempty"`
	// Annotations holds the value of the annotations edge.
	Annotations []*EventAnnotation `json:"annotations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// AlertInstanceOrErr returns the AlertInstance value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) AlertInstanceOrErr() ([]*AlertInstance, error) {
	if e.loadedTypes[1] {
		return e.AlertInstance, nil
	}
	return nil, &NotLoadedError{edge: "alert_instance"}
}

// IncidentEventOrErr returns the IncidentEvent value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) IncidentEventOrErr() ([]*IncidentEvent, error) {
	if e.loadedTypes[2] {
		return e.IncidentEvent, nil
	}
	return nil, &NotLoadedError{edge: "incident_event"}
}

// AnnotationsOrErr returns the Annotations value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) AnnotationsOrErr() ([]*EventAnnotation, error) {
	if e.loadedTypes[3] {
		return e.Annotations, nil
	}
	return nil, &NotLoadedError{edge: "annotations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case event.FieldProviderID, event.FieldKind, event.FieldTitle, event.FieldDescription, event.FieldSource:
			values[i] = new(sql.NullString)
		case event.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case event.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case event.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				e.TenantID = int(value.Int64)
			}
		case event.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				e.ProviderID = value.String
			}
		case event.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				e.Timestamp = value.Time
			}
		case event.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				e.Kind = event.Kind(value.String)
			}
		case event.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				e.Title = value.String
			}
		case event.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case event.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				e.Source = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (e *Event) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Event entity.
func (e *Event) QueryTenant() *TenantQuery {
	return NewEventClient(e.config).QueryTenant(e)
}

// QueryAlertInstance queries the "alert_instance" edge of the Event entity.
func (e *Event) QueryAlertInstance() *AlertInstanceQuery {
	return NewEventClient(e.config).QueryAlertInstance(e)
}

// QueryIncidentEvent queries the "incident_event" edge of the Event entity.
func (e *Event) QueryIncidentEvent() *IncidentEventQuery {
	return NewEventClient(e.config).QueryIncidentEvent(e)
}

// QueryAnnotations queries the "annotations" edge of the Event entity.
func (e *Event) QueryAnnotations() *EventAnnotationQuery {
	return NewEventClient(e.config).QueryAnnotations(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return NewEventClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", e.TenantID))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(e.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(e.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", e.Kind))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(e.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(e.Source)
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event
