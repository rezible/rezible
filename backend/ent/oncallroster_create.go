// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/oncallhandovertemplate"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallrostermetrics"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// OncallRosterCreate is the builder for creating a OncallRoster entity.
type OncallRosterCreate struct {
	config
	mutation *OncallRosterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (orc *OncallRosterCreate) SetTenantID(i int) *OncallRosterCreate {
	orc.mutation.SetTenantID(i)
	return orc
}

// SetArchiveTime sets the "archive_time" field.
func (orc *OncallRosterCreate) SetArchiveTime(t time.Time) *OncallRosterCreate {
	orc.mutation.SetArchiveTime(t)
	return orc
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (orc *OncallRosterCreate) SetNillableArchiveTime(t *time.Time) *OncallRosterCreate {
	if t != nil {
		orc.SetArchiveTime(*t)
	}
	return orc
}

// SetName sets the "name" field.
func (orc *OncallRosterCreate) SetName(s string) *OncallRosterCreate {
	orc.mutation.SetName(s)
	return orc
}

// SetSlug sets the "slug" field.
func (orc *OncallRosterCreate) SetSlug(s string) *OncallRosterCreate {
	orc.mutation.SetSlug(s)
	return orc
}

// SetProviderID sets the "provider_id" field.
func (orc *OncallRosterCreate) SetProviderID(s string) *OncallRosterCreate {
	orc.mutation.SetProviderID(s)
	return orc
}

// SetTimezone sets the "timezone" field.
func (orc *OncallRosterCreate) SetTimezone(s string) *OncallRosterCreate {
	orc.mutation.SetTimezone(s)
	return orc
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (orc *OncallRosterCreate) SetNillableTimezone(s *string) *OncallRosterCreate {
	if s != nil {
		orc.SetTimezone(*s)
	}
	return orc
}

// SetChatHandle sets the "chat_handle" field.
func (orc *OncallRosterCreate) SetChatHandle(s string) *OncallRosterCreate {
	orc.mutation.SetChatHandle(s)
	return orc
}

// SetNillableChatHandle sets the "chat_handle" field if the given value is not nil.
func (orc *OncallRosterCreate) SetNillableChatHandle(s *string) *OncallRosterCreate {
	if s != nil {
		orc.SetChatHandle(*s)
	}
	return orc
}

// SetChatChannelID sets the "chat_channel_id" field.
func (orc *OncallRosterCreate) SetChatChannelID(s string) *OncallRosterCreate {
	orc.mutation.SetChatChannelID(s)
	return orc
}

// SetNillableChatChannelID sets the "chat_channel_id" field if the given value is not nil.
func (orc *OncallRosterCreate) SetNillableChatChannelID(s *string) *OncallRosterCreate {
	if s != nil {
		orc.SetChatChannelID(*s)
	}
	return orc
}

// SetHandoverTemplateID sets the "handover_template_id" field.
func (orc *OncallRosterCreate) SetHandoverTemplateID(u uuid.UUID) *OncallRosterCreate {
	orc.mutation.SetHandoverTemplateID(u)
	return orc
}

// SetNillableHandoverTemplateID sets the "handover_template_id" field if the given value is not nil.
func (orc *OncallRosterCreate) SetNillableHandoverTemplateID(u *uuid.UUID) *OncallRosterCreate {
	if u != nil {
		orc.SetHandoverTemplateID(*u)
	}
	return orc
}

// SetID sets the "id" field.
func (orc *OncallRosterCreate) SetID(u uuid.UUID) *OncallRosterCreate {
	orc.mutation.SetID(u)
	return orc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (orc *OncallRosterCreate) SetNillableID(u *uuid.UUID) *OncallRosterCreate {
	if u != nil {
		orc.SetID(*u)
	}
	return orc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (orc *OncallRosterCreate) SetTenant(t *Tenant) *OncallRosterCreate {
	return orc.SetTenantID(t.ID)
}

// AddScheduleIDs adds the "schedules" edge to the OncallSchedule entity by IDs.
func (orc *OncallRosterCreate) AddScheduleIDs(ids ...uuid.UUID) *OncallRosterCreate {
	orc.mutation.AddScheduleIDs(ids...)
	return orc
}

// AddSchedules adds the "schedules" edges to the OncallSchedule entity.
func (orc *OncallRosterCreate) AddSchedules(o ...*OncallSchedule) *OncallRosterCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return orc.AddScheduleIDs(ids...)
}

// SetHandoverTemplate sets the "handover_template" edge to the OncallHandoverTemplate entity.
func (orc *OncallRosterCreate) SetHandoverTemplate(o *OncallHandoverTemplate) *OncallRosterCreate {
	return orc.SetHandoverTemplateID(o.ID)
}

// AddAlertIDs adds the "alerts" edge to the Alert entity by IDs.
func (orc *OncallRosterCreate) AddAlertIDs(ids ...uuid.UUID) *OncallRosterCreate {
	orc.mutation.AddAlertIDs(ids...)
	return orc
}

// AddAlerts adds the "alerts" edges to the Alert entity.
func (orc *OncallRosterCreate) AddAlerts(a ...*Alert) *OncallRosterCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return orc.AddAlertIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (orc *OncallRosterCreate) AddTeamIDs(ids ...uuid.UUID) *OncallRosterCreate {
	orc.mutation.AddTeamIDs(ids...)
	return orc
}

// AddTeams adds the "teams" edges to the Team entity.
func (orc *OncallRosterCreate) AddTeams(t ...*Team) *OncallRosterCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return orc.AddTeamIDs(ids...)
}

// AddShiftIDs adds the "shifts" edge to the OncallShift entity by IDs.
func (orc *OncallRosterCreate) AddShiftIDs(ids ...uuid.UUID) *OncallRosterCreate {
	orc.mutation.AddShiftIDs(ids...)
	return orc
}

// AddShifts adds the "shifts" edges to the OncallShift entity.
func (orc *OncallRosterCreate) AddShifts(o ...*OncallShift) *OncallRosterCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return orc.AddShiftIDs(ids...)
}

// AddUserWatcherIDs adds the "user_watchers" edge to the User entity by IDs.
func (orc *OncallRosterCreate) AddUserWatcherIDs(ids ...uuid.UUID) *OncallRosterCreate {
	orc.mutation.AddUserWatcherIDs(ids...)
	return orc
}

// AddUserWatchers adds the "user_watchers" edges to the User entity.
func (orc *OncallRosterCreate) AddUserWatchers(u ...*User) *OncallRosterCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return orc.AddUserWatcherIDs(ids...)
}

// AddMetricIDs adds the "metrics" edge to the OncallRosterMetrics entity by IDs.
func (orc *OncallRosterCreate) AddMetricIDs(ids ...uuid.UUID) *OncallRosterCreate {
	orc.mutation.AddMetricIDs(ids...)
	return orc
}

// AddMetrics adds the "metrics" edges to the OncallRosterMetrics entity.
func (orc *OncallRosterCreate) AddMetrics(o ...*OncallRosterMetrics) *OncallRosterCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return orc.AddMetricIDs(ids...)
}

// Mutation returns the OncallRosterMutation object of the builder.
func (orc *OncallRosterCreate) Mutation() *OncallRosterMutation {
	return orc.mutation
}

// Save creates the OncallRoster in the database.
func (orc *OncallRosterCreate) Save(ctx context.Context) (*OncallRoster, error) {
	if err := orc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, orc.sqlSave, orc.mutation, orc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OncallRosterCreate) SaveX(ctx context.Context) *OncallRoster {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orc *OncallRosterCreate) Exec(ctx context.Context) error {
	_, err := orc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orc *OncallRosterCreate) ExecX(ctx context.Context) {
	if err := orc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (orc *OncallRosterCreate) defaults() error {
	if _, ok := orc.mutation.ID(); !ok {
		if oncallroster.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized oncallroster.DefaultID (forgotten import ent/runtime?)")
		}
		v := oncallroster.DefaultID()
		orc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (orc *OncallRosterCreate) check() error {
	if _, ok := orc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OncallRoster.tenant_id"`)}
	}
	if _, ok := orc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OncallRoster.name"`)}
	}
	if _, ok := orc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "OncallRoster.slug"`)}
	}
	if _, ok := orc.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "OncallRoster.provider_id"`)}
	}
	if len(orc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "OncallRoster.tenant"`)}
	}
	return nil
}

func (orc *OncallRosterCreate) sqlSave(ctx context.Context) (*OncallRoster, error) {
	if err := orc.check(); err != nil {
		return nil, err
	}
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	orc.mutation.id = &_node.ID
	orc.mutation.done = true
	return _node, nil
}

func (orc *OncallRosterCreate) createSpec() (*OncallRoster, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallRoster{config: orc.config}
		_spec = sqlgraph.NewCreateSpec(oncallroster.Table, sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = orc.conflict
	if id, ok := orc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := orc.mutation.ArchiveTime(); ok {
		_spec.SetField(oncallroster.FieldArchiveTime, field.TypeTime, value)
		_node.ArchiveTime = value
	}
	if value, ok := orc.mutation.Name(); ok {
		_spec.SetField(oncallroster.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := orc.mutation.Slug(); ok {
		_spec.SetField(oncallroster.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := orc.mutation.ProviderID(); ok {
		_spec.SetField(oncallroster.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if value, ok := orc.mutation.Timezone(); ok {
		_spec.SetField(oncallroster.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := orc.mutation.ChatHandle(); ok {
		_spec.SetField(oncallroster.FieldChatHandle, field.TypeString, value)
		_node.ChatHandle = value
	}
	if value, ok := orc.mutation.ChatChannelID(); ok {
		_spec.SetField(oncallroster.FieldChatChannelID, field.TypeString, value)
		_node.ChatChannelID = value
	}
	if nodes := orc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallroster.TenantTable,
			Columns: []string{oncallroster.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.SchedulesTable,
			Columns: []string{oncallroster.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.HandoverTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallroster.HandoverTemplateTable,
			Columns: []string{oncallroster.HandoverTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallhandovertemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HandoverTemplateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.AlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.AlertsTable,
			Columns: []string{oncallroster.AlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.TeamsTable,
			Columns: oncallroster.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.ShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.ShiftsTable,
			Columns: []string{oncallroster.ShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.UserWatchersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.UserWatchersTable,
			Columns: oncallroster.UserWatchersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.MetricsTable,
			Columns: []string{oncallroster.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallRoster.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallRosterUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (orc *OncallRosterCreate) OnConflict(opts ...sql.ConflictOption) *OncallRosterUpsertOne {
	orc.conflict = opts
	return &OncallRosterUpsertOne{
		create: orc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallRoster.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (orc *OncallRosterCreate) OnConflictColumns(columns ...string) *OncallRosterUpsertOne {
	orc.conflict = append(orc.conflict, sql.ConflictColumns(columns...))
	return &OncallRosterUpsertOne{
		create: orc,
	}
}

type (
	// OncallRosterUpsertOne is the builder for "upsert"-ing
	//  one OncallRoster node.
	OncallRosterUpsertOne struct {
		create *OncallRosterCreate
	}

	// OncallRosterUpsert is the "OnConflict" setter.
	OncallRosterUpsert struct {
		*sql.UpdateSet
	}
)

// SetArchiveTime sets the "archive_time" field.
func (u *OncallRosterUpsert) SetArchiveTime(v time.Time) *OncallRosterUpsert {
	u.Set(oncallroster.FieldArchiveTime, v)
	return u
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *OncallRosterUpsert) UpdateArchiveTime() *OncallRosterUpsert {
	u.SetExcluded(oncallroster.FieldArchiveTime)
	return u
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *OncallRosterUpsert) ClearArchiveTime() *OncallRosterUpsert {
	u.SetNull(oncallroster.FieldArchiveTime)
	return u
}

// SetName sets the "name" field.
func (u *OncallRosterUpsert) SetName(v string) *OncallRosterUpsert {
	u.Set(oncallroster.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OncallRosterUpsert) UpdateName() *OncallRosterUpsert {
	u.SetExcluded(oncallroster.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *OncallRosterUpsert) SetSlug(v string) *OncallRosterUpsert {
	u.Set(oncallroster.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *OncallRosterUpsert) UpdateSlug() *OncallRosterUpsert {
	u.SetExcluded(oncallroster.FieldSlug)
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *OncallRosterUpsert) SetProviderID(v string) *OncallRosterUpsert {
	u.Set(oncallroster.FieldProviderID, v)
	return u
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallRosterUpsert) UpdateProviderID() *OncallRosterUpsert {
	u.SetExcluded(oncallroster.FieldProviderID)
	return u
}

// SetTimezone sets the "timezone" field.
func (u *OncallRosterUpsert) SetTimezone(v string) *OncallRosterUpsert {
	u.Set(oncallroster.FieldTimezone, v)
	return u
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *OncallRosterUpsert) UpdateTimezone() *OncallRosterUpsert {
	u.SetExcluded(oncallroster.FieldTimezone)
	return u
}

// ClearTimezone clears the value of the "timezone" field.
func (u *OncallRosterUpsert) ClearTimezone() *OncallRosterUpsert {
	u.SetNull(oncallroster.FieldTimezone)
	return u
}

// SetChatHandle sets the "chat_handle" field.
func (u *OncallRosterUpsert) SetChatHandle(v string) *OncallRosterUpsert {
	u.Set(oncallroster.FieldChatHandle, v)
	return u
}

// UpdateChatHandle sets the "chat_handle" field to the value that was provided on create.
func (u *OncallRosterUpsert) UpdateChatHandle() *OncallRosterUpsert {
	u.SetExcluded(oncallroster.FieldChatHandle)
	return u
}

// ClearChatHandle clears the value of the "chat_handle" field.
func (u *OncallRosterUpsert) ClearChatHandle() *OncallRosterUpsert {
	u.SetNull(oncallroster.FieldChatHandle)
	return u
}

// SetChatChannelID sets the "chat_channel_id" field.
func (u *OncallRosterUpsert) SetChatChannelID(v string) *OncallRosterUpsert {
	u.Set(oncallroster.FieldChatChannelID, v)
	return u
}

// UpdateChatChannelID sets the "chat_channel_id" field to the value that was provided on create.
func (u *OncallRosterUpsert) UpdateChatChannelID() *OncallRosterUpsert {
	u.SetExcluded(oncallroster.FieldChatChannelID)
	return u
}

// ClearChatChannelID clears the value of the "chat_channel_id" field.
func (u *OncallRosterUpsert) ClearChatChannelID() *OncallRosterUpsert {
	u.SetNull(oncallroster.FieldChatChannelID)
	return u
}

// SetHandoverTemplateID sets the "handover_template_id" field.
func (u *OncallRosterUpsert) SetHandoverTemplateID(v uuid.UUID) *OncallRosterUpsert {
	u.Set(oncallroster.FieldHandoverTemplateID, v)
	return u
}

// UpdateHandoverTemplateID sets the "handover_template_id" field to the value that was provided on create.
func (u *OncallRosterUpsert) UpdateHandoverTemplateID() *OncallRosterUpsert {
	u.SetExcluded(oncallroster.FieldHandoverTemplateID)
	return u
}

// ClearHandoverTemplateID clears the value of the "handover_template_id" field.
func (u *OncallRosterUpsert) ClearHandoverTemplateID() *OncallRosterUpsert {
	u.SetNull(oncallroster.FieldHandoverTemplateID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallRoster.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallroster.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallRosterUpsertOne) UpdateNewValues() *OncallRosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallroster.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(oncallroster.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallRoster.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallRosterUpsertOne) Ignore() *OncallRosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallRosterUpsertOne) DoNothing() *OncallRosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallRosterCreate.OnConflict
// documentation for more info.
func (u *OncallRosterUpsertOne) Update(set func(*OncallRosterUpsert)) *OncallRosterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallRosterUpsert{UpdateSet: update})
	}))
	return u
}

// SetArchiveTime sets the "archive_time" field.
func (u *OncallRosterUpsertOne) SetArchiveTime(v time.Time) *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetArchiveTime(v)
	})
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *OncallRosterUpsertOne) UpdateArchiveTime() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateArchiveTime()
	})
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *OncallRosterUpsertOne) ClearArchiveTime() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.ClearArchiveTime()
	})
}

// SetName sets the "name" field.
func (u *OncallRosterUpsertOne) SetName(v string) *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OncallRosterUpsertOne) UpdateName() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *OncallRosterUpsertOne) SetSlug(v string) *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *OncallRosterUpsertOne) UpdateSlug() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateSlug()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *OncallRosterUpsertOne) SetProviderID(v string) *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallRosterUpsertOne) UpdateProviderID() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateProviderID()
	})
}

// SetTimezone sets the "timezone" field.
func (u *OncallRosterUpsertOne) SetTimezone(v string) *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *OncallRosterUpsertOne) UpdateTimezone() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *OncallRosterUpsertOne) ClearTimezone() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.ClearTimezone()
	})
}

// SetChatHandle sets the "chat_handle" field.
func (u *OncallRosterUpsertOne) SetChatHandle(v string) *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetChatHandle(v)
	})
}

// UpdateChatHandle sets the "chat_handle" field to the value that was provided on create.
func (u *OncallRosterUpsertOne) UpdateChatHandle() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateChatHandle()
	})
}

// ClearChatHandle clears the value of the "chat_handle" field.
func (u *OncallRosterUpsertOne) ClearChatHandle() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.ClearChatHandle()
	})
}

// SetChatChannelID sets the "chat_channel_id" field.
func (u *OncallRosterUpsertOne) SetChatChannelID(v string) *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetChatChannelID(v)
	})
}

// UpdateChatChannelID sets the "chat_channel_id" field to the value that was provided on create.
func (u *OncallRosterUpsertOne) UpdateChatChannelID() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateChatChannelID()
	})
}

// ClearChatChannelID clears the value of the "chat_channel_id" field.
func (u *OncallRosterUpsertOne) ClearChatChannelID() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.ClearChatChannelID()
	})
}

// SetHandoverTemplateID sets the "handover_template_id" field.
func (u *OncallRosterUpsertOne) SetHandoverTemplateID(v uuid.UUID) *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetHandoverTemplateID(v)
	})
}

// UpdateHandoverTemplateID sets the "handover_template_id" field to the value that was provided on create.
func (u *OncallRosterUpsertOne) UpdateHandoverTemplateID() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateHandoverTemplateID()
	})
}

// ClearHandoverTemplateID clears the value of the "handover_template_id" field.
func (u *OncallRosterUpsertOne) ClearHandoverTemplateID() *OncallRosterUpsertOne {
	return u.Update(func(s *OncallRosterUpsert) {
		s.ClearHandoverTemplateID()
	})
}

// Exec executes the query.
func (u *OncallRosterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallRosterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallRosterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallRosterUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallRosterUpsertOne.ID is not supported by MySQL driver. Use OncallRosterUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallRosterUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallRosterCreateBulk is the builder for creating many OncallRoster entities in bulk.
type OncallRosterCreateBulk struct {
	config
	err      error
	builders []*OncallRosterCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallRoster entities in the database.
func (orcb *OncallRosterCreateBulk) Save(ctx context.Context) ([]*OncallRoster, error) {
	if orcb.err != nil {
		return nil, orcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OncallRoster, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallRosterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = orcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OncallRosterCreateBulk) SaveX(ctx context.Context) []*OncallRoster {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orcb *OncallRosterCreateBulk) Exec(ctx context.Context) error {
	_, err := orcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orcb *OncallRosterCreateBulk) ExecX(ctx context.Context) {
	if err := orcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallRoster.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallRosterUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (orcb *OncallRosterCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallRosterUpsertBulk {
	orcb.conflict = opts
	return &OncallRosterUpsertBulk{
		create: orcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallRoster.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (orcb *OncallRosterCreateBulk) OnConflictColumns(columns ...string) *OncallRosterUpsertBulk {
	orcb.conflict = append(orcb.conflict, sql.ConflictColumns(columns...))
	return &OncallRosterUpsertBulk{
		create: orcb,
	}
}

// OncallRosterUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallRoster nodes.
type OncallRosterUpsertBulk struct {
	create *OncallRosterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallRoster.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallroster.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallRosterUpsertBulk) UpdateNewValues() *OncallRosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallroster.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(oncallroster.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallRoster.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallRosterUpsertBulk) Ignore() *OncallRosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallRosterUpsertBulk) DoNothing() *OncallRosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallRosterCreateBulk.OnConflict
// documentation for more info.
func (u *OncallRosterUpsertBulk) Update(set func(*OncallRosterUpsert)) *OncallRosterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallRosterUpsert{UpdateSet: update})
	}))
	return u
}

// SetArchiveTime sets the "archive_time" field.
func (u *OncallRosterUpsertBulk) SetArchiveTime(v time.Time) *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetArchiveTime(v)
	})
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *OncallRosterUpsertBulk) UpdateArchiveTime() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateArchiveTime()
	})
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *OncallRosterUpsertBulk) ClearArchiveTime() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.ClearArchiveTime()
	})
}

// SetName sets the "name" field.
func (u *OncallRosterUpsertBulk) SetName(v string) *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OncallRosterUpsertBulk) UpdateName() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *OncallRosterUpsertBulk) SetSlug(v string) *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *OncallRosterUpsertBulk) UpdateSlug() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateSlug()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *OncallRosterUpsertBulk) SetProviderID(v string) *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallRosterUpsertBulk) UpdateProviderID() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateProviderID()
	})
}

// SetTimezone sets the "timezone" field.
func (u *OncallRosterUpsertBulk) SetTimezone(v string) *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *OncallRosterUpsertBulk) UpdateTimezone() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *OncallRosterUpsertBulk) ClearTimezone() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.ClearTimezone()
	})
}

// SetChatHandle sets the "chat_handle" field.
func (u *OncallRosterUpsertBulk) SetChatHandle(v string) *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetChatHandle(v)
	})
}

// UpdateChatHandle sets the "chat_handle" field to the value that was provided on create.
func (u *OncallRosterUpsertBulk) UpdateChatHandle() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateChatHandle()
	})
}

// ClearChatHandle clears the value of the "chat_handle" field.
func (u *OncallRosterUpsertBulk) ClearChatHandle() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.ClearChatHandle()
	})
}

// SetChatChannelID sets the "chat_channel_id" field.
func (u *OncallRosterUpsertBulk) SetChatChannelID(v string) *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetChatChannelID(v)
	})
}

// UpdateChatChannelID sets the "chat_channel_id" field to the value that was provided on create.
func (u *OncallRosterUpsertBulk) UpdateChatChannelID() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateChatChannelID()
	})
}

// ClearChatChannelID clears the value of the "chat_channel_id" field.
func (u *OncallRosterUpsertBulk) ClearChatChannelID() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.ClearChatChannelID()
	})
}

// SetHandoverTemplateID sets the "handover_template_id" field.
func (u *OncallRosterUpsertBulk) SetHandoverTemplateID(v uuid.UUID) *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.SetHandoverTemplateID(v)
	})
}

// UpdateHandoverTemplateID sets the "handover_template_id" field to the value that was provided on create.
func (u *OncallRosterUpsertBulk) UpdateHandoverTemplateID() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.UpdateHandoverTemplateID()
	})
}

// ClearHandoverTemplateID clears the value of the "handover_template_id" field.
func (u *OncallRosterUpsertBulk) ClearHandoverTemplateID() *OncallRosterUpsertBulk {
	return u.Update(func(s *OncallRosterUpsert) {
		s.ClearHandoverTemplateID()
	})
}

// Exec executes the query.
func (u *OncallRosterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallRosterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallRosterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallRosterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
