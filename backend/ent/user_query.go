// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/eventannotation"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/retrospectivecomment"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/task"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                              *QueryContext
	order                            []user.OrderOption
	inters                           []Interceptor
	predicates                       []predicate.User
	withTenant                       *TenantQuery
	withTeams                        *TeamQuery
	withWatchedOncallRosters         *OncallRosterQuery
	withOncallSchedules              *OncallScheduleParticipantQuery
	withOncallShifts                 *OncallShiftQuery
	withEventAnnotations             *EventAnnotationQuery
	withIncidents                    *IncidentQuery
	withIncidentDebriefs             *IncidentDebriefQuery
	withAssignedTasks                *TaskQuery
	withCreatedTasks                 *TaskQuery
	withRetrospectiveReviewRequests  *RetrospectiveReviewQuery
	withRetrospectiveReviewResponses *RetrospectiveReviewQuery
	withRetrospectiveComments        *RetrospectiveCommentQuery
	withRoleAssignments              *IncidentRoleAssignmentQuery
	modifiers                        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryTenant chains the current query on the "tenant" edge.
func (uq *UserQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.TenantTable, user.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeams chains the current query on the "teams" edge.
func (uq *UserQuery) QueryTeams() *TeamQuery {
	query := (&TeamClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.TeamsTable, user.TeamsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWatchedOncallRosters chains the current query on the "watched_oncall_rosters" edge.
func (uq *UserQuery) QueryWatchedOncallRosters() *OncallRosterQuery {
	query := (&OncallRosterClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(oncallroster.Table, oncallroster.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.WatchedOncallRostersTable, user.WatchedOncallRostersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOncallSchedules chains the current query on the "oncall_schedules" edge.
func (uq *UserQuery) QueryOncallSchedules() *OncallScheduleParticipantQuery {
	query := (&OncallScheduleParticipantClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(oncallscheduleparticipant.Table, oncallscheduleparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.OncallSchedulesTable, user.OncallSchedulesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOncallShifts chains the current query on the "oncall_shifts" edge.
func (uq *UserQuery) QueryOncallShifts() *OncallShiftQuery {
	query := (&OncallShiftClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(oncallshift.Table, oncallshift.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.OncallShiftsTable, user.OncallShiftsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEventAnnotations chains the current query on the "event_annotations" edge.
func (uq *UserQuery) QueryEventAnnotations() *EventAnnotationQuery {
	query := (&EventAnnotationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(eventannotation.Table, eventannotation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.EventAnnotationsTable, user.EventAnnotationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncidents chains the current query on the "incidents" edge.
func (uq *UserQuery) QueryIncidents() *IncidentQuery {
	query := (&IncidentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(incident.Table, incident.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.IncidentsTable, user.IncidentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncidentDebriefs chains the current query on the "incident_debriefs" edge.
func (uq *UserQuery) QueryIncidentDebriefs() *IncidentDebriefQuery {
	query := (&IncidentDebriefClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(incidentdebrief.Table, incidentdebrief.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.IncidentDebriefsTable, user.IncidentDebriefsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignedTasks chains the current query on the "assigned_tasks" edge.
func (uq *UserQuery) QueryAssignedTasks() *TaskQuery {
	query := (&TaskClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AssignedTasksTable, user.AssignedTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedTasks chains the current query on the "created_tasks" edge.
func (uq *UserQuery) QueryCreatedTasks() *TaskQuery {
	query := (&TaskClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedTasksTable, user.CreatedTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRetrospectiveReviewRequests chains the current query on the "retrospective_review_requests" edge.
func (uq *UserQuery) QueryRetrospectiveReviewRequests() *RetrospectiveReviewQuery {
	query := (&RetrospectiveReviewClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(retrospectivereview.Table, retrospectivereview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.RetrospectiveReviewRequestsTable, user.RetrospectiveReviewRequestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRetrospectiveReviewResponses chains the current query on the "retrospective_review_responses" edge.
func (uq *UserQuery) QueryRetrospectiveReviewResponses() *RetrospectiveReviewQuery {
	query := (&RetrospectiveReviewClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(retrospectivereview.Table, retrospectivereview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.RetrospectiveReviewResponsesTable, user.RetrospectiveReviewResponsesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRetrospectiveComments chains the current query on the "retrospective_comments" edge.
func (uq *UserQuery) QueryRetrospectiveComments() *RetrospectiveCommentQuery {
	query := (&RetrospectiveCommentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(retrospectivecomment.Table, retrospectivecomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.RetrospectiveCommentsTable, user.RetrospectiveCommentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleAssignments chains the current query on the "role_assignments" edge.
func (uq *UserQuery) QueryRoleAssignments() *IncidentRoleAssignmentQuery {
	query := (&IncidentRoleAssignmentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(incidentroleassignment.Table, incidentroleassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.RoleAssignmentsTable, user.RoleAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryAll)
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryIDs)
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryCount)
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryExist)
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                           uq.config,
		ctx:                              uq.ctx.Clone(),
		order:                            append([]user.OrderOption{}, uq.order...),
		inters:                           append([]Interceptor{}, uq.inters...),
		predicates:                       append([]predicate.User{}, uq.predicates...),
		withTenant:                       uq.withTenant.Clone(),
		withTeams:                        uq.withTeams.Clone(),
		withWatchedOncallRosters:         uq.withWatchedOncallRosters.Clone(),
		withOncallSchedules:              uq.withOncallSchedules.Clone(),
		withOncallShifts:                 uq.withOncallShifts.Clone(),
		withEventAnnotations:             uq.withEventAnnotations.Clone(),
		withIncidents:                    uq.withIncidents.Clone(),
		withIncidentDebriefs:             uq.withIncidentDebriefs.Clone(),
		withAssignedTasks:                uq.withAssignedTasks.Clone(),
		withCreatedTasks:                 uq.withCreatedTasks.Clone(),
		withRetrospectiveReviewRequests:  uq.withRetrospectiveReviewRequests.Clone(),
		withRetrospectiveReviewResponses: uq.withRetrospectiveReviewResponses.Clone(),
		withRetrospectiveComments:        uq.withRetrospectiveComments.Clone(),
		withRoleAssignments:              uq.withRoleAssignments.Clone(),
		// clone intermediate query.
		sql:       uq.sql.Clone(),
		path:      uq.path,
		modifiers: append([]func(*sql.Selector){}, uq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithTenant(opts ...func(*TenantQuery)) *UserQuery {
	query := (&TenantClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withTenant = query
	return uq
}

// WithTeams tells the query-builder to eager-load the nodes that are connected to
// the "teams" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithTeams(opts ...func(*TeamQuery)) *UserQuery {
	query := (&TeamClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withTeams = query
	return uq
}

// WithWatchedOncallRosters tells the query-builder to eager-load the nodes that are connected to
// the "watched_oncall_rosters" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithWatchedOncallRosters(opts ...func(*OncallRosterQuery)) *UserQuery {
	query := (&OncallRosterClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withWatchedOncallRosters = query
	return uq
}

// WithOncallSchedules tells the query-builder to eager-load the nodes that are connected to
// the "oncall_schedules" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithOncallSchedules(opts ...func(*OncallScheduleParticipantQuery)) *UserQuery {
	query := (&OncallScheduleParticipantClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withOncallSchedules = query
	return uq
}

// WithOncallShifts tells the query-builder to eager-load the nodes that are connected to
// the "oncall_shifts" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithOncallShifts(opts ...func(*OncallShiftQuery)) *UserQuery {
	query := (&OncallShiftClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withOncallShifts = query
	return uq
}

// WithEventAnnotations tells the query-builder to eager-load the nodes that are connected to
// the "event_annotations" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithEventAnnotations(opts ...func(*EventAnnotationQuery)) *UserQuery {
	query := (&EventAnnotationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withEventAnnotations = query
	return uq
}

// WithIncidents tells the query-builder to eager-load the nodes that are connected to
// the "incidents" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithIncidents(opts ...func(*IncidentQuery)) *UserQuery {
	query := (&IncidentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withIncidents = query
	return uq
}

// WithIncidentDebriefs tells the query-builder to eager-load the nodes that are connected to
// the "incident_debriefs" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithIncidentDebriefs(opts ...func(*IncidentDebriefQuery)) *UserQuery {
	query := (&IncidentDebriefClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withIncidentDebriefs = query
	return uq
}

// WithAssignedTasks tells the query-builder to eager-load the nodes that are connected to
// the "assigned_tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithAssignedTasks(opts ...func(*TaskQuery)) *UserQuery {
	query := (&TaskClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAssignedTasks = query
	return uq
}

// WithCreatedTasks tells the query-builder to eager-load the nodes that are connected to
// the "created_tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCreatedTasks(opts ...func(*TaskQuery)) *UserQuery {
	query := (&TaskClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withCreatedTasks = query
	return uq
}

// WithRetrospectiveReviewRequests tells the query-builder to eager-load the nodes that are connected to
// the "retrospective_review_requests" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRetrospectiveReviewRequests(opts ...func(*RetrospectiveReviewQuery)) *UserQuery {
	query := (&RetrospectiveReviewClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRetrospectiveReviewRequests = query
	return uq
}

// WithRetrospectiveReviewResponses tells the query-builder to eager-load the nodes that are connected to
// the "retrospective_review_responses" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRetrospectiveReviewResponses(opts ...func(*RetrospectiveReviewQuery)) *UserQuery {
	query := (&RetrospectiveReviewClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRetrospectiveReviewResponses = query
	return uq
}

// WithRetrospectiveComments tells the query-builder to eager-load the nodes that are connected to
// the "retrospective_comments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRetrospectiveComments(opts ...func(*RetrospectiveCommentQuery)) *UserQuery {
	query := (&RetrospectiveCommentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRetrospectiveComments = query
	return uq
}

// WithRoleAssignments tells the query-builder to eager-load the nodes that are connected to
// the "role_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRoleAssignments(opts ...func(*IncidentRoleAssignmentQuery)) *UserQuery {
	query := (&IncidentRoleAssignmentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRoleAssignments = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldTenantID).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	if user.Policy == nil {
		return errors.New("ent: uninitialized user.Policy (forgotten import ent/runtime?)")
	}
	if err := user.Policy.EvalQuery(ctx, uq); err != nil {
		return err
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [14]bool{
			uq.withTenant != nil,
			uq.withTeams != nil,
			uq.withWatchedOncallRosters != nil,
			uq.withOncallSchedules != nil,
			uq.withOncallShifts != nil,
			uq.withEventAnnotations != nil,
			uq.withIncidents != nil,
			uq.withIncidentDebriefs != nil,
			uq.withAssignedTasks != nil,
			uq.withCreatedTasks != nil,
			uq.withRetrospectiveReviewRequests != nil,
			uq.withRetrospectiveReviewResponses != nil,
			uq.withRetrospectiveComments != nil,
			uq.withRoleAssignments != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withTenant; query != nil {
		if err := uq.loadTenant(ctx, query, nodes, nil,
			func(n *User, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withTeams; query != nil {
		if err := uq.loadTeams(ctx, query, nodes,
			func(n *User) { n.Edges.Teams = []*Team{} },
			func(n *User, e *Team) { n.Edges.Teams = append(n.Edges.Teams, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withWatchedOncallRosters; query != nil {
		if err := uq.loadWatchedOncallRosters(ctx, query, nodes,
			func(n *User) { n.Edges.WatchedOncallRosters = []*OncallRoster{} },
			func(n *User, e *OncallRoster) { n.Edges.WatchedOncallRosters = append(n.Edges.WatchedOncallRosters, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withOncallSchedules; query != nil {
		if err := uq.loadOncallSchedules(ctx, query, nodes,
			func(n *User) { n.Edges.OncallSchedules = []*OncallScheduleParticipant{} },
			func(n *User, e *OncallScheduleParticipant) {
				n.Edges.OncallSchedules = append(n.Edges.OncallSchedules, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withOncallShifts; query != nil {
		if err := uq.loadOncallShifts(ctx, query, nodes,
			func(n *User) { n.Edges.OncallShifts = []*OncallShift{} },
			func(n *User, e *OncallShift) { n.Edges.OncallShifts = append(n.Edges.OncallShifts, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withEventAnnotations; query != nil {
		if err := uq.loadEventAnnotations(ctx, query, nodes,
			func(n *User) { n.Edges.EventAnnotations = []*EventAnnotation{} },
			func(n *User, e *EventAnnotation) { n.Edges.EventAnnotations = append(n.Edges.EventAnnotations, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withIncidents; query != nil {
		if err := uq.loadIncidents(ctx, query, nodes,
			func(n *User) { n.Edges.Incidents = []*Incident{} },
			func(n *User, e *Incident) { n.Edges.Incidents = append(n.Edges.Incidents, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withIncidentDebriefs; query != nil {
		if err := uq.loadIncidentDebriefs(ctx, query, nodes,
			func(n *User) { n.Edges.IncidentDebriefs = []*IncidentDebrief{} },
			func(n *User, e *IncidentDebrief) { n.Edges.IncidentDebriefs = append(n.Edges.IncidentDebriefs, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withAssignedTasks; query != nil {
		if err := uq.loadAssignedTasks(ctx, query, nodes,
			func(n *User) { n.Edges.AssignedTasks = []*Task{} },
			func(n *User, e *Task) { n.Edges.AssignedTasks = append(n.Edges.AssignedTasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCreatedTasks; query != nil {
		if err := uq.loadCreatedTasks(ctx, query, nodes,
			func(n *User) { n.Edges.CreatedTasks = []*Task{} },
			func(n *User, e *Task) { n.Edges.CreatedTasks = append(n.Edges.CreatedTasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withRetrospectiveReviewRequests; query != nil {
		if err := uq.loadRetrospectiveReviewRequests(ctx, query, nodes,
			func(n *User) { n.Edges.RetrospectiveReviewRequests = []*RetrospectiveReview{} },
			func(n *User, e *RetrospectiveReview) {
				n.Edges.RetrospectiveReviewRequests = append(n.Edges.RetrospectiveReviewRequests, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withRetrospectiveReviewResponses; query != nil {
		if err := uq.loadRetrospectiveReviewResponses(ctx, query, nodes,
			func(n *User) { n.Edges.RetrospectiveReviewResponses = []*RetrospectiveReview{} },
			func(n *User, e *RetrospectiveReview) {
				n.Edges.RetrospectiveReviewResponses = append(n.Edges.RetrospectiveReviewResponses, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withRetrospectiveComments; query != nil {
		if err := uq.loadRetrospectiveComments(ctx, query, nodes,
			func(n *User) { n.Edges.RetrospectiveComments = []*RetrospectiveComment{} },
			func(n *User, e *RetrospectiveComment) {
				n.Edges.RetrospectiveComments = append(n.Edges.RetrospectiveComments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withRoleAssignments; query != nil {
		if err := uq.loadRoleAssignments(ctx, query, nodes,
			func(n *User) { n.Edges.RoleAssignments = []*IncidentRoleAssignment{} },
			func(n *User, e *IncidentRoleAssignment) { n.Edges.RoleAssignments = append(n.Edges.RoleAssignments, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*User, init func(*User), assign func(*User, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*User)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uq *UserQuery) loadTeams(ctx context.Context, query *TeamQuery, nodes []*User, init func(*User), assign func(*User, *Team)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*User)
	nids := make(map[uuid.UUID]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.TeamsTable)
		s.Join(joinT).On(s.C(team.FieldID), joinT.C(user.TeamsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(user.TeamsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.TeamsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Team](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "teams" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadWatchedOncallRosters(ctx context.Context, query *OncallRosterQuery, nodes []*User, init func(*User), assign func(*User, *OncallRoster)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*User)
	nids := make(map[uuid.UUID]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.WatchedOncallRostersTable)
		s.Join(joinT).On(s.C(oncallroster.FieldID), joinT.C(user.WatchedOncallRostersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.WatchedOncallRostersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.WatchedOncallRostersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*OncallRoster](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "watched_oncall_rosters" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadOncallSchedules(ctx context.Context, query *OncallScheduleParticipantQuery, nodes []*User, init func(*User), assign func(*User, *OncallScheduleParticipant)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallscheduleparticipant.FieldUserID)
	}
	query.Where(predicate.OncallScheduleParticipant(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.OncallSchedulesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadOncallShifts(ctx context.Context, query *OncallShiftQuery, nodes []*User, init func(*User), assign func(*User, *OncallShift)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallshift.FieldUserID)
	}
	query.Where(predicate.OncallShift(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.OncallShiftsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadEventAnnotations(ctx context.Context, query *EventAnnotationQuery, nodes []*User, init func(*User), assign func(*User, *EventAnnotation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(eventannotation.FieldCreatorID)
	}
	query.Where(predicate.EventAnnotation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.EventAnnotationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatorID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "creator_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadIncidents(ctx context.Context, query *IncidentQuery, nodes []*User, init func(*User), assign func(*User, *Incident)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*User)
	nids := make(map[uuid.UUID]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.IncidentsTable)
		s.Join(joinT).On(s.C(incident.FieldID), joinT.C(user.IncidentsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.IncidentsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.IncidentsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Incident](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "incidents" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadIncidentDebriefs(ctx context.Context, query *IncidentDebriefQuery, nodes []*User, init func(*User), assign func(*User, *IncidentDebrief)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(incidentdebrief.FieldUserID)
	}
	query.Where(predicate.IncidentDebrief(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.IncidentDebriefsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadAssignedTasks(ctx context.Context, query *TaskQuery, nodes []*User, init func(*User), assign func(*User, *Task)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(task.FieldAssigneeID)
	}
	query.Where(predicate.Task(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.AssignedTasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AssigneeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "assignee_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCreatedTasks(ctx context.Context, query *TaskQuery, nodes []*User, init func(*User), assign func(*User, *Task)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(task.FieldCreatorID)
	}
	query.Where(predicate.Task(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CreatedTasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatorID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "creator_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRetrospectiveReviewRequests(ctx context.Context, query *RetrospectiveReviewQuery, nodes []*User, init func(*User), assign func(*User, *RetrospectiveReview)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(retrospectivereview.FieldRequesterID)
	}
	query.Where(predicate.RetrospectiveReview(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.RetrospectiveReviewRequestsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RequesterID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "requester_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRetrospectiveReviewResponses(ctx context.Context, query *RetrospectiveReviewQuery, nodes []*User, init func(*User), assign func(*User, *RetrospectiveReview)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(retrospectivereview.FieldReviewerID)
	}
	query.Where(predicate.RetrospectiveReview(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.RetrospectiveReviewResponsesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ReviewerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "reviewer_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRetrospectiveComments(ctx context.Context, query *RetrospectiveCommentQuery, nodes []*User, init func(*User), assign func(*User, *RetrospectiveComment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(retrospectivecomment.FieldUserID)
	}
	query.Where(predicate.RetrospectiveComment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.RetrospectiveCommentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRoleAssignments(ctx context.Context, query *IncidentRoleAssignmentQuery, nodes []*User, init func(*User), assign func(*User, *IncidentRoleAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(incidentroleassignment.FieldUserID)
	}
	query.Where(predicate.IncidentRoleAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.RoleAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if uq.withTenant != nil {
			_spec.Node.AddColumnOnce(user.FieldTenantID)
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range uq.modifiers {
		m(selector)
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (uq *UserQuery) Modify(modifiers ...func(s *sql.Selector)) *UserSelect {
	uq.modifiers = append(uq.modifiers, modifiers...)
	return uq.Select()
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, ent.OpQueryGroupBy)
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, ent.OpQuerySelect)
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (us *UserSelect) Modify(modifiers ...func(s *sql.Selector)) *UserSelect {
	us.modifiers = append(us.modifiers, modifiers...)
	return us
}
