// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/oncallhandovertemplate"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallrostermetrics"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// OncallRosterQuery is the builder for querying OncallRoster entities.
type OncallRosterQuery struct {
	config
	ctx                  *QueryContext
	order                []oncallroster.OrderOption
	inters               []Interceptor
	predicates           []predicate.OncallRoster
	withTenant           *TenantQuery
	withSchedules        *OncallScheduleQuery
	withHandoverTemplate *OncallHandoverTemplateQuery
	withAlerts           *AlertQuery
	withTeams            *TeamQuery
	withShifts           *OncallShiftQuery
	withUserWatchers     *UserQuery
	withMetrics          *OncallRosterMetricsQuery
	modifiers            []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallRosterQuery builder.
func (orq *OncallRosterQuery) Where(ps ...predicate.OncallRoster) *OncallRosterQuery {
	orq.predicates = append(orq.predicates, ps...)
	return orq
}

// Limit the number of records to be returned by this query.
func (orq *OncallRosterQuery) Limit(limit int) *OncallRosterQuery {
	orq.ctx.Limit = &limit
	return orq
}

// Offset to start from.
func (orq *OncallRosterQuery) Offset(offset int) *OncallRosterQuery {
	orq.ctx.Offset = &offset
	return orq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (orq *OncallRosterQuery) Unique(unique bool) *OncallRosterQuery {
	orq.ctx.Unique = &unique
	return orq
}

// Order specifies how the records should be ordered.
func (orq *OncallRosterQuery) Order(o ...oncallroster.OrderOption) *OncallRosterQuery {
	orq.order = append(orq.order, o...)
	return orq
}

// QueryTenant chains the current query on the "tenant" edge.
func (orq *OncallRosterQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallroster.Table, oncallroster.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallroster.TenantTable, oncallroster.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySchedules chains the current query on the "schedules" edge.
func (orq *OncallRosterQuery) QuerySchedules() *OncallScheduleQuery {
	query := (&OncallScheduleClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallroster.Table, oncallroster.FieldID, selector),
			sqlgraph.To(oncallschedule.Table, oncallschedule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, oncallroster.SchedulesTable, oncallroster.SchedulesColumn),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHandoverTemplate chains the current query on the "handover_template" edge.
func (orq *OncallRosterQuery) QueryHandoverTemplate() *OncallHandoverTemplateQuery {
	query := (&OncallHandoverTemplateClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallroster.Table, oncallroster.FieldID, selector),
			sqlgraph.To(oncallhandovertemplate.Table, oncallhandovertemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oncallroster.HandoverTemplateTable, oncallroster.HandoverTemplateColumn),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAlerts chains the current query on the "alerts" edge.
func (orq *OncallRosterQuery) QueryAlerts() *AlertQuery {
	query := (&AlertClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallroster.Table, oncallroster.FieldID, selector),
			sqlgraph.To(alert.Table, alert.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, oncallroster.AlertsTable, oncallroster.AlertsColumn),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeams chains the current query on the "teams" edge.
func (orq *OncallRosterQuery) QueryTeams() *TeamQuery {
	query := (&TeamClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallroster.Table, oncallroster.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, oncallroster.TeamsTable, oncallroster.TeamsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShifts chains the current query on the "shifts" edge.
func (orq *OncallRosterQuery) QueryShifts() *OncallShiftQuery {
	query := (&OncallShiftClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallroster.Table, oncallroster.FieldID, selector),
			sqlgraph.To(oncallshift.Table, oncallshift.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, oncallroster.ShiftsTable, oncallroster.ShiftsColumn),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserWatchers chains the current query on the "user_watchers" edge.
func (orq *OncallRosterQuery) QueryUserWatchers() *UserQuery {
	query := (&UserClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallroster.Table, oncallroster.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, oncallroster.UserWatchersTable, oncallroster.UserWatchersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMetrics chains the current query on the "metrics" edge.
func (orq *OncallRosterQuery) QueryMetrics() *OncallRosterMetricsQuery {
	query := (&OncallRosterMetricsClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallroster.Table, oncallroster.FieldID, selector),
			sqlgraph.To(oncallrostermetrics.Table, oncallrostermetrics.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, oncallroster.MetricsTable, oncallroster.MetricsColumn),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallRoster entity from the query.
// Returns a *NotFoundError when no OncallRoster was found.
func (orq *OncallRosterQuery) First(ctx context.Context) (*OncallRoster, error) {
	nodes, err := orq.Limit(1).All(setContextOp(ctx, orq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallroster.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (orq *OncallRosterQuery) FirstX(ctx context.Context) *OncallRoster {
	node, err := orq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallRoster ID from the query.
// Returns a *NotFoundError when no OncallRoster ID was found.
func (orq *OncallRosterQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = orq.Limit(1).IDs(setContextOp(ctx, orq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallroster.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (orq *OncallRosterQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := orq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallRoster entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallRoster entity is found.
// Returns a *NotFoundError when no OncallRoster entities are found.
func (orq *OncallRosterQuery) Only(ctx context.Context) (*OncallRoster, error) {
	nodes, err := orq.Limit(2).All(setContextOp(ctx, orq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallroster.Label}
	default:
		return nil, &NotSingularError{oncallroster.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (orq *OncallRosterQuery) OnlyX(ctx context.Context) *OncallRoster {
	node, err := orq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallRoster ID in the query.
// Returns a *NotSingularError when more than one OncallRoster ID is found.
// Returns a *NotFoundError when no entities are found.
func (orq *OncallRosterQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = orq.Limit(2).IDs(setContextOp(ctx, orq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallroster.Label}
	default:
		err = &NotSingularError{oncallroster.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (orq *OncallRosterQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := orq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallRosters.
func (orq *OncallRosterQuery) All(ctx context.Context) ([]*OncallRoster, error) {
	ctx = setContextOp(ctx, orq.ctx, ent.OpQueryAll)
	if err := orq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallRoster, *OncallRosterQuery]()
	return withInterceptors[[]*OncallRoster](ctx, orq, qr, orq.inters)
}

// AllX is like All, but panics if an error occurs.
func (orq *OncallRosterQuery) AllX(ctx context.Context) []*OncallRoster {
	nodes, err := orq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallRoster IDs.
func (orq *OncallRosterQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if orq.ctx.Unique == nil && orq.path != nil {
		orq.Unique(true)
	}
	ctx = setContextOp(ctx, orq.ctx, ent.OpQueryIDs)
	if err = orq.Select(oncallroster.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (orq *OncallRosterQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := orq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (orq *OncallRosterQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, orq.ctx, ent.OpQueryCount)
	if err := orq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, orq, querierCount[*OncallRosterQuery](), orq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (orq *OncallRosterQuery) CountX(ctx context.Context) int {
	count, err := orq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (orq *OncallRosterQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, orq.ctx, ent.OpQueryExist)
	switch _, err := orq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (orq *OncallRosterQuery) ExistX(ctx context.Context) bool {
	exist, err := orq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallRosterQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (orq *OncallRosterQuery) Clone() *OncallRosterQuery {
	if orq == nil {
		return nil
	}
	return &OncallRosterQuery{
		config:               orq.config,
		ctx:                  orq.ctx.Clone(),
		order:                append([]oncallroster.OrderOption{}, orq.order...),
		inters:               append([]Interceptor{}, orq.inters...),
		predicates:           append([]predicate.OncallRoster{}, orq.predicates...),
		withTenant:           orq.withTenant.Clone(),
		withSchedules:        orq.withSchedules.Clone(),
		withHandoverTemplate: orq.withHandoverTemplate.Clone(),
		withAlerts:           orq.withAlerts.Clone(),
		withTeams:            orq.withTeams.Clone(),
		withShifts:           orq.withShifts.Clone(),
		withUserWatchers:     orq.withUserWatchers.Clone(),
		withMetrics:          orq.withMetrics.Clone(),
		// clone intermediate query.
		sql:       orq.sql.Clone(),
		path:      orq.path,
		modifiers: append([]func(*sql.Selector){}, orq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OncallRosterQuery) WithTenant(opts ...func(*TenantQuery)) *OncallRosterQuery {
	query := (&TenantClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withTenant = query
	return orq
}

// WithSchedules tells the query-builder to eager-load the nodes that are connected to
// the "schedules" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OncallRosterQuery) WithSchedules(opts ...func(*OncallScheduleQuery)) *OncallRosterQuery {
	query := (&OncallScheduleClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withSchedules = query
	return orq
}

// WithHandoverTemplate tells the query-builder to eager-load the nodes that are connected to
// the "handover_template" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OncallRosterQuery) WithHandoverTemplate(opts ...func(*OncallHandoverTemplateQuery)) *OncallRosterQuery {
	query := (&OncallHandoverTemplateClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withHandoverTemplate = query
	return orq
}

// WithAlerts tells the query-builder to eager-load the nodes that are connected to
// the "alerts" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OncallRosterQuery) WithAlerts(opts ...func(*AlertQuery)) *OncallRosterQuery {
	query := (&AlertClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withAlerts = query
	return orq
}

// WithTeams tells the query-builder to eager-load the nodes that are connected to
// the "teams" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OncallRosterQuery) WithTeams(opts ...func(*TeamQuery)) *OncallRosterQuery {
	query := (&TeamClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withTeams = query
	return orq
}

// WithShifts tells the query-builder to eager-load the nodes that are connected to
// the "shifts" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OncallRosterQuery) WithShifts(opts ...func(*OncallShiftQuery)) *OncallRosterQuery {
	query := (&OncallShiftClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withShifts = query
	return orq
}

// WithUserWatchers tells the query-builder to eager-load the nodes that are connected to
// the "user_watchers" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OncallRosterQuery) WithUserWatchers(opts ...func(*UserQuery)) *OncallRosterQuery {
	query := (&UserClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withUserWatchers = query
	return orq
}

// WithMetrics tells the query-builder to eager-load the nodes that are connected to
// the "metrics" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OncallRosterQuery) WithMetrics(opts ...func(*OncallRosterMetricsQuery)) *OncallRosterQuery {
	query := (&OncallRosterMetricsClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withMetrics = query
	return orq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallRoster.Query().
//		GroupBy(oncallroster.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (orq *OncallRosterQuery) GroupBy(field string, fields ...string) *OncallRosterGroupBy {
	orq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallRosterGroupBy{build: orq}
	grbuild.flds = &orq.ctx.Fields
	grbuild.label = oncallroster.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.OncallRoster.Query().
//		Select(oncallroster.FieldTenantID).
//		Scan(ctx, &v)
func (orq *OncallRosterQuery) Select(fields ...string) *OncallRosterSelect {
	orq.ctx.Fields = append(orq.ctx.Fields, fields...)
	sbuild := &OncallRosterSelect{OncallRosterQuery: orq}
	sbuild.label = oncallroster.Label
	sbuild.flds, sbuild.scan = &orq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallRosterSelect configured with the given aggregations.
func (orq *OncallRosterQuery) Aggregate(fns ...AggregateFunc) *OncallRosterSelect {
	return orq.Select().Aggregate(fns...)
}

func (orq *OncallRosterQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range orq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, orq); err != nil {
				return err
			}
		}
	}
	for _, f := range orq.ctx.Fields {
		if !oncallroster.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if orq.path != nil {
		prev, err := orq.path(ctx)
		if err != nil {
			return err
		}
		orq.sql = prev
	}
	if oncallroster.Policy == nil {
		return errors.New("ent: uninitialized oncallroster.Policy (forgotten import ent/runtime?)")
	}
	if err := oncallroster.Policy.EvalQuery(ctx, orq); err != nil {
		return err
	}
	return nil
}

func (orq *OncallRosterQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallRoster, error) {
	var (
		nodes       = []*OncallRoster{}
		_spec       = orq.querySpec()
		loadedTypes = [8]bool{
			orq.withTenant != nil,
			orq.withSchedules != nil,
			orq.withHandoverTemplate != nil,
			orq.withAlerts != nil,
			orq.withTeams != nil,
			orq.withShifts != nil,
			orq.withUserWatchers != nil,
			orq.withMetrics != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallRoster).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallRoster{config: orq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(orq.modifiers) > 0 {
		_spec.Modifiers = orq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, orq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := orq.withTenant; query != nil {
		if err := orq.loadTenant(ctx, query, nodes, nil,
			func(n *OncallRoster, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := orq.withSchedules; query != nil {
		if err := orq.loadSchedules(ctx, query, nodes,
			func(n *OncallRoster) { n.Edges.Schedules = []*OncallSchedule{} },
			func(n *OncallRoster, e *OncallSchedule) { n.Edges.Schedules = append(n.Edges.Schedules, e) }); err != nil {
			return nil, err
		}
	}
	if query := orq.withHandoverTemplate; query != nil {
		if err := orq.loadHandoverTemplate(ctx, query, nodes, nil,
			func(n *OncallRoster, e *OncallHandoverTemplate) { n.Edges.HandoverTemplate = e }); err != nil {
			return nil, err
		}
	}
	if query := orq.withAlerts; query != nil {
		if err := orq.loadAlerts(ctx, query, nodes,
			func(n *OncallRoster) { n.Edges.Alerts = []*Alert{} },
			func(n *OncallRoster, e *Alert) { n.Edges.Alerts = append(n.Edges.Alerts, e) }); err != nil {
			return nil, err
		}
	}
	if query := orq.withTeams; query != nil {
		if err := orq.loadTeams(ctx, query, nodes,
			func(n *OncallRoster) { n.Edges.Teams = []*Team{} },
			func(n *OncallRoster, e *Team) { n.Edges.Teams = append(n.Edges.Teams, e) }); err != nil {
			return nil, err
		}
	}
	if query := orq.withShifts; query != nil {
		if err := orq.loadShifts(ctx, query, nodes,
			func(n *OncallRoster) { n.Edges.Shifts = []*OncallShift{} },
			func(n *OncallRoster, e *OncallShift) { n.Edges.Shifts = append(n.Edges.Shifts, e) }); err != nil {
			return nil, err
		}
	}
	if query := orq.withUserWatchers; query != nil {
		if err := orq.loadUserWatchers(ctx, query, nodes,
			func(n *OncallRoster) { n.Edges.UserWatchers = []*User{} },
			func(n *OncallRoster, e *User) { n.Edges.UserWatchers = append(n.Edges.UserWatchers, e) }); err != nil {
			return nil, err
		}
	}
	if query := orq.withMetrics; query != nil {
		if err := orq.loadMetrics(ctx, query, nodes,
			func(n *OncallRoster) { n.Edges.Metrics = []*OncallRosterMetrics{} },
			func(n *OncallRoster, e *OncallRosterMetrics) { n.Edges.Metrics = append(n.Edges.Metrics, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (orq *OncallRosterQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*OncallRoster, init func(*OncallRoster), assign func(*OncallRoster, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OncallRoster)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (orq *OncallRosterQuery) loadSchedules(ctx context.Context, query *OncallScheduleQuery, nodes []*OncallRoster, init func(*OncallRoster), assign func(*OncallRoster, *OncallSchedule)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OncallRoster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallschedule.FieldRosterID)
	}
	query.Where(predicate.OncallSchedule(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oncallroster.SchedulesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RosterID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "roster_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (orq *OncallRosterQuery) loadHandoverTemplate(ctx context.Context, query *OncallHandoverTemplateQuery, nodes []*OncallRoster, init func(*OncallRoster), assign func(*OncallRoster, *OncallHandoverTemplate)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallRoster)
	for i := range nodes {
		fk := nodes[i].HandoverTemplateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallhandovertemplate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "handover_template_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (orq *OncallRosterQuery) loadAlerts(ctx context.Context, query *AlertQuery, nodes []*OncallRoster, init func(*OncallRoster), assign func(*OncallRoster, *Alert)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OncallRoster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(alert.FieldRosterID)
	}
	query.Where(predicate.Alert(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oncallroster.AlertsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RosterID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "roster_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (orq *OncallRosterQuery) loadTeams(ctx context.Context, query *TeamQuery, nodes []*OncallRoster, init func(*OncallRoster), assign func(*OncallRoster, *Team)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*OncallRoster)
	nids := make(map[uuid.UUID]map[*OncallRoster]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(oncallroster.TeamsTable)
		s.Join(joinT).On(s.C(team.FieldID), joinT.C(oncallroster.TeamsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(oncallroster.TeamsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(oncallroster.TeamsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*OncallRoster]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Team](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "teams" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (orq *OncallRosterQuery) loadShifts(ctx context.Context, query *OncallShiftQuery, nodes []*OncallRoster, init func(*OncallRoster), assign func(*OncallRoster, *OncallShift)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OncallRoster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallshift.FieldRosterID)
	}
	query.Where(predicate.OncallShift(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oncallroster.ShiftsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RosterID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "roster_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (orq *OncallRosterQuery) loadUserWatchers(ctx context.Context, query *UserQuery, nodes []*OncallRoster, init func(*OncallRoster), assign func(*OncallRoster, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*OncallRoster)
	nids := make(map[uuid.UUID]map[*OncallRoster]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(oncallroster.UserWatchersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(oncallroster.UserWatchersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(oncallroster.UserWatchersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(oncallroster.UserWatchersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*OncallRoster]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "user_watchers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (orq *OncallRosterQuery) loadMetrics(ctx context.Context, query *OncallRosterMetricsQuery, nodes []*OncallRoster, init func(*OncallRoster), assign func(*OncallRoster, *OncallRosterMetrics)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OncallRoster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallrostermetrics.FieldRosterID)
	}
	query.Where(predicate.OncallRosterMetrics(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oncallroster.MetricsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RosterID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "roster_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (orq *OncallRosterQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := orq.querySpec()
	if len(orq.modifiers) > 0 {
		_spec.Modifiers = orq.modifiers
	}
	_spec.Node.Columns = orq.ctx.Fields
	if len(orq.ctx.Fields) > 0 {
		_spec.Unique = orq.ctx.Unique != nil && *orq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, orq.driver, _spec)
}

func (orq *OncallRosterQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallroster.Table, oncallroster.Columns, sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID))
	_spec.From = orq.sql
	if unique := orq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if orq.path != nil {
		_spec.Unique = true
	}
	if fields := orq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallroster.FieldID)
		for i := range fields {
			if fields[i] != oncallroster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if orq.withTenant != nil {
			_spec.Node.AddColumnOnce(oncallroster.FieldTenantID)
		}
		if orq.withHandoverTemplate != nil {
			_spec.Node.AddColumnOnce(oncallroster.FieldHandoverTemplateID)
		}
	}
	if ps := orq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := orq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := orq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := orq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (orq *OncallRosterQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(orq.driver.Dialect())
	t1 := builder.Table(oncallroster.Table)
	columns := orq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallroster.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if orq.sql != nil {
		selector = orq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if orq.ctx.Unique != nil && *orq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range orq.modifiers {
		m(selector)
	}
	for _, p := range orq.predicates {
		p(selector)
	}
	for _, p := range orq.order {
		p(selector)
	}
	if offset := orq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := orq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (orq *OncallRosterQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallRosterSelect {
	orq.modifiers = append(orq.modifiers, modifiers...)
	return orq.Select()
}

// OncallRosterGroupBy is the group-by builder for OncallRoster entities.
type OncallRosterGroupBy struct {
	selector
	build *OncallRosterQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (orgb *OncallRosterGroupBy) Aggregate(fns ...AggregateFunc) *OncallRosterGroupBy {
	orgb.fns = append(orgb.fns, fns...)
	return orgb
}

// Scan applies the selector query and scans the result into the given value.
func (orgb *OncallRosterGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, orgb.build.ctx, ent.OpQueryGroupBy)
	if err := orgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallRosterQuery, *OncallRosterGroupBy](ctx, orgb.build, orgb, orgb.build.inters, v)
}

func (orgb *OncallRosterGroupBy) sqlScan(ctx context.Context, root *OncallRosterQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(orgb.fns))
	for _, fn := range orgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*orgb.flds)+len(orgb.fns))
		for _, f := range *orgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*orgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := orgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallRosterSelect is the builder for selecting fields of OncallRoster entities.
type OncallRosterSelect struct {
	*OncallRosterQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ors *OncallRosterSelect) Aggregate(fns ...AggregateFunc) *OncallRosterSelect {
	ors.fns = append(ors.fns, fns...)
	return ors
}

// Scan applies the selector query and scans the result into the given value.
func (ors *OncallRosterSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ors.ctx, ent.OpQuerySelect)
	if err := ors.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallRosterQuery, *OncallRosterSelect](ctx, ors.OncallRosterQuery, ors, ors.inters, v)
}

func (ors *OncallRosterSelect) sqlScan(ctx context.Context, root *OncallRosterQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ors.fns))
	for _, fn := range ors.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ors.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ors.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ors *OncallRosterSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallRosterSelect {
	ors.modifiers = append(ors.modifiers, modifiers...)
	return ors
}
