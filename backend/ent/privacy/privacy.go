// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/rezible/rezible/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AlertQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AlertQueryRuleFunc func(context.Context, *ent.AlertQuery) error

// EvalQuery return f(ctx, q).
func (f AlertQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlertQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AlertQuery", q)
}

// The AlertMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AlertMutationRuleFunc func(context.Context, *ent.AlertMutation) error

// EvalMutation calls f(ctx, m).
func (f AlertMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AlertMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AlertMutation", m)
}

// The AlertFeedbackQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AlertFeedbackQueryRuleFunc func(context.Context, *ent.AlertFeedbackQuery) error

// EvalQuery return f(ctx, q).
func (f AlertFeedbackQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlertFeedbackQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AlertFeedbackQuery", q)
}

// The AlertFeedbackMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AlertFeedbackMutationRuleFunc func(context.Context, *ent.AlertFeedbackMutation) error

// EvalMutation calls f(ctx, m).
func (f AlertFeedbackMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AlertFeedbackMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AlertFeedbackMutation", m)
}

// The AlertInstanceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AlertInstanceQueryRuleFunc func(context.Context, *ent.AlertInstanceQuery) error

// EvalQuery return f(ctx, q).
func (f AlertInstanceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlertInstanceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AlertInstanceQuery", q)
}

// The AlertInstanceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AlertInstanceMutationRuleFunc func(context.Context, *ent.AlertInstanceMutation) error

// EvalMutation calls f(ctx, m).
func (f AlertInstanceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AlertInstanceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AlertInstanceMutation", m)
}

// The AlertMetricsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AlertMetricsQueryRuleFunc func(context.Context, *ent.AlertMetricsQuery) error

// EvalQuery return f(ctx, q).
func (f AlertMetricsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlertMetricsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AlertMetricsQuery", q)
}

// The DocumentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DocumentQueryRuleFunc func(context.Context, *ent.DocumentQuery) error

// EvalQuery return f(ctx, q).
func (f DocumentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DocumentQuery", q)
}

// The DocumentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DocumentMutationRuleFunc func(context.Context, *ent.DocumentMutation) error

// EvalMutation calls f(ctx, m).
func (f DocumentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DocumentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DocumentMutation", m)
}

// The EventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventQueryRuleFunc func(context.Context, *ent.EventQuery) error

// EvalQuery return f(ctx, q).
func (f EventQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EventQuery", q)
}

// The EventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventMutationRuleFunc func(context.Context, *ent.EventMutation) error

// EvalMutation calls f(ctx, m).
func (f EventMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EventMutation", m)
}

// The EventAnnotationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventAnnotationQueryRuleFunc func(context.Context, *ent.EventAnnotationQuery) error

// EvalQuery return f(ctx, q).
func (f EventAnnotationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventAnnotationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EventAnnotationQuery", q)
}

// The EventAnnotationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventAnnotationMutationRuleFunc func(context.Context, *ent.EventAnnotationMutation) error

// EvalMutation calls f(ctx, m).
func (f EventAnnotationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EventAnnotationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EventAnnotationMutation", m)
}

// The IncidentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentQueryRuleFunc func(context.Context, *ent.IncidentQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentQuery", q)
}

// The IncidentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentMutationRuleFunc func(context.Context, *ent.IncidentMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentMutation", m)
}

// The IncidentDebriefQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentDebriefQueryRuleFunc func(context.Context, *ent.IncidentDebriefQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentDebriefQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentDebriefQuery", q)
}

// The IncidentDebriefMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentDebriefMutationRuleFunc func(context.Context, *ent.IncidentDebriefMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentDebriefMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentDebriefMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentDebriefMutation", m)
}

// The IncidentDebriefMessageQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentDebriefMessageQueryRuleFunc func(context.Context, *ent.IncidentDebriefMessageQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentDebriefMessageQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefMessageQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentDebriefMessageQuery", q)
}

// The IncidentDebriefMessageMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentDebriefMessageMutationRuleFunc func(context.Context, *ent.IncidentDebriefMessageMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentDebriefMessageMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentDebriefMessageMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentDebriefMessageMutation", m)
}

// The IncidentDebriefQuestionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentDebriefQuestionQueryRuleFunc func(context.Context, *ent.IncidentDebriefQuestionQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentDebriefQuestionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefQuestionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentDebriefQuestionQuery", q)
}

// The IncidentDebriefQuestionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentDebriefQuestionMutationRuleFunc func(context.Context, *ent.IncidentDebriefQuestionMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentDebriefQuestionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentDebriefQuestionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentDebriefQuestionMutation", m)
}

// The IncidentDebriefSuggestionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentDebriefSuggestionQueryRuleFunc func(context.Context, *ent.IncidentDebriefSuggestionQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentDebriefSuggestionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefSuggestionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentDebriefSuggestionQuery", q)
}

// The IncidentDebriefSuggestionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentDebriefSuggestionMutationRuleFunc func(context.Context, *ent.IncidentDebriefSuggestionMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentDebriefSuggestionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentDebriefSuggestionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentDebriefSuggestionMutation", m)
}

// The IncidentEventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentEventQueryRuleFunc func(context.Context, *ent.IncidentEventQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentEventQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentEventQuery", q)
}

// The IncidentEventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentEventMutationRuleFunc func(context.Context, *ent.IncidentEventMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentEventMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentEventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentEventMutation", m)
}

// The IncidentEventContextQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentEventContextQueryRuleFunc func(context.Context, *ent.IncidentEventContextQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentEventContextQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventContextQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentEventContextQuery", q)
}

// The IncidentEventContextMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentEventContextMutationRuleFunc func(context.Context, *ent.IncidentEventContextMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentEventContextMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentEventContextMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentEventContextMutation", m)
}

// The IncidentEventContributingFactorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentEventContributingFactorQueryRuleFunc func(context.Context, *ent.IncidentEventContributingFactorQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentEventContributingFactorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventContributingFactorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentEventContributingFactorQuery", q)
}

// The IncidentEventContributingFactorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentEventContributingFactorMutationRuleFunc func(context.Context, *ent.IncidentEventContributingFactorMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentEventContributingFactorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentEventContributingFactorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentEventContributingFactorMutation", m)
}

// The IncidentEventEvidenceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentEventEvidenceQueryRuleFunc func(context.Context, *ent.IncidentEventEvidenceQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentEventEvidenceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventEvidenceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentEventEvidenceQuery", q)
}

// The IncidentEventEvidenceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentEventEvidenceMutationRuleFunc func(context.Context, *ent.IncidentEventEvidenceMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentEventEvidenceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentEventEvidenceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentEventEvidenceMutation", m)
}

// The IncidentEventSystemComponentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentEventSystemComponentQueryRuleFunc func(context.Context, *ent.IncidentEventSystemComponentQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentEventSystemComponentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventSystemComponentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentEventSystemComponentQuery", q)
}

// The IncidentEventSystemComponentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentEventSystemComponentMutationRuleFunc func(context.Context, *ent.IncidentEventSystemComponentMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentEventSystemComponentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentEventSystemComponentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentEventSystemComponentMutation", m)
}

// The IncidentFieldQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentFieldQueryRuleFunc func(context.Context, *ent.IncidentFieldQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentFieldQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentFieldQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentFieldQuery", q)
}

// The IncidentFieldMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentFieldMutationRuleFunc func(context.Context, *ent.IncidentFieldMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentFieldMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentFieldMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentFieldMutation", m)
}

// The IncidentFieldOptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentFieldOptionQueryRuleFunc func(context.Context, *ent.IncidentFieldOptionQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentFieldOptionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentFieldOptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentFieldOptionQuery", q)
}

// The IncidentFieldOptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentFieldOptionMutationRuleFunc func(context.Context, *ent.IncidentFieldOptionMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentFieldOptionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentFieldOptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentFieldOptionMutation", m)
}

// The IncidentLinkQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentLinkQueryRuleFunc func(context.Context, *ent.IncidentLinkQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentLinkQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentLinkQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentLinkQuery", q)
}

// The IncidentLinkMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentLinkMutationRuleFunc func(context.Context, *ent.IncidentLinkMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentLinkMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentLinkMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentLinkMutation", m)
}

// The IncidentMilestoneQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentMilestoneQueryRuleFunc func(context.Context, *ent.IncidentMilestoneQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentMilestoneQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentMilestoneQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentMilestoneQuery", q)
}

// The IncidentMilestoneMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentMilestoneMutationRuleFunc func(context.Context, *ent.IncidentMilestoneMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentMilestoneMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentMilestoneMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentMilestoneMutation", m)
}

// The IncidentRoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentRoleQueryRuleFunc func(context.Context, *ent.IncidentRoleQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentRoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentRoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentRoleQuery", q)
}

// The IncidentRoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentRoleMutationRuleFunc func(context.Context, *ent.IncidentRoleMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentRoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentRoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentRoleMutation", m)
}

// The IncidentRoleAssignmentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentRoleAssignmentQueryRuleFunc func(context.Context, *ent.IncidentRoleAssignmentQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentRoleAssignmentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentRoleAssignmentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentRoleAssignmentQuery", q)
}

// The IncidentRoleAssignmentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentRoleAssignmentMutationRuleFunc func(context.Context, *ent.IncidentRoleAssignmentMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentRoleAssignmentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentRoleAssignmentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentRoleAssignmentMutation", m)
}

// The IncidentSeverityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentSeverityQueryRuleFunc func(context.Context, *ent.IncidentSeverityQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentSeverityQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentSeverityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentSeverityQuery", q)
}

// The IncidentSeverityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentSeverityMutationRuleFunc func(context.Context, *ent.IncidentSeverityMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentSeverityMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentSeverityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentSeverityMutation", m)
}

// The IncidentTagQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentTagQueryRuleFunc func(context.Context, *ent.IncidentTagQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentTagQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentTagQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentTagQuery", q)
}

// The IncidentTagMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentTagMutationRuleFunc func(context.Context, *ent.IncidentTagMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentTagMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentTagMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentTagMutation", m)
}

// The IncidentTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IncidentTypeQueryRuleFunc func(context.Context, *ent.IncidentTypeQuery) error

// EvalQuery return f(ctx, q).
func (f IncidentTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IncidentTypeQuery", q)
}

// The IncidentTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IncidentTypeMutationRuleFunc func(context.Context, *ent.IncidentTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f IncidentTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IncidentTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IncidentTypeMutation", m)
}

// The MeetingScheduleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MeetingScheduleQueryRuleFunc func(context.Context, *ent.MeetingScheduleQuery) error

// EvalQuery return f(ctx, q).
func (f MeetingScheduleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MeetingScheduleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MeetingScheduleQuery", q)
}

// The MeetingScheduleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MeetingScheduleMutationRuleFunc func(context.Context, *ent.MeetingScheduleMutation) error

// EvalMutation calls f(ctx, m).
func (f MeetingScheduleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MeetingScheduleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MeetingScheduleMutation", m)
}

// The MeetingSessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MeetingSessionQueryRuleFunc func(context.Context, *ent.MeetingSessionQuery) error

// EvalQuery return f(ctx, q).
func (f MeetingSessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MeetingSessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MeetingSessionQuery", q)
}

// The MeetingSessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MeetingSessionMutationRuleFunc func(context.Context, *ent.MeetingSessionMutation) error

// EvalMutation calls f(ctx, m).
func (f MeetingSessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MeetingSessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MeetingSessionMutation", m)
}

// The OncallHandoverTemplateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OncallHandoverTemplateQueryRuleFunc func(context.Context, *ent.OncallHandoverTemplateQuery) error

// EvalQuery return f(ctx, q).
func (f OncallHandoverTemplateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallHandoverTemplateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OncallHandoverTemplateQuery", q)
}

// The OncallHandoverTemplateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OncallHandoverTemplateMutationRuleFunc func(context.Context, *ent.OncallHandoverTemplateMutation) error

// EvalMutation calls f(ctx, m).
func (f OncallHandoverTemplateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OncallHandoverTemplateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OncallHandoverTemplateMutation", m)
}

// The OncallRosterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OncallRosterQueryRuleFunc func(context.Context, *ent.OncallRosterQuery) error

// EvalQuery return f(ctx, q).
func (f OncallRosterQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallRosterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OncallRosterQuery", q)
}

// The OncallRosterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OncallRosterMutationRuleFunc func(context.Context, *ent.OncallRosterMutation) error

// EvalMutation calls f(ctx, m).
func (f OncallRosterMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OncallRosterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OncallRosterMutation", m)
}

// The OncallRosterMetricsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OncallRosterMetricsQueryRuleFunc func(context.Context, *ent.OncallRosterMetricsQuery) error

// EvalQuery return f(ctx, q).
func (f OncallRosterMetricsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallRosterMetricsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OncallRosterMetricsQuery", q)
}

// The OncallRosterMetricsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OncallRosterMetricsMutationRuleFunc func(context.Context, *ent.OncallRosterMetricsMutation) error

// EvalMutation calls f(ctx, m).
func (f OncallRosterMetricsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OncallRosterMetricsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OncallRosterMetricsMutation", m)
}

// The OncallScheduleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OncallScheduleQueryRuleFunc func(context.Context, *ent.OncallScheduleQuery) error

// EvalQuery return f(ctx, q).
func (f OncallScheduleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallScheduleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OncallScheduleQuery", q)
}

// The OncallScheduleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OncallScheduleMutationRuleFunc func(context.Context, *ent.OncallScheduleMutation) error

// EvalMutation calls f(ctx, m).
func (f OncallScheduleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OncallScheduleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OncallScheduleMutation", m)
}

// The OncallScheduleParticipantQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OncallScheduleParticipantQueryRuleFunc func(context.Context, *ent.OncallScheduleParticipantQuery) error

// EvalQuery return f(ctx, q).
func (f OncallScheduleParticipantQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallScheduleParticipantQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OncallScheduleParticipantQuery", q)
}

// The OncallScheduleParticipantMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OncallScheduleParticipantMutationRuleFunc func(context.Context, *ent.OncallScheduleParticipantMutation) error

// EvalMutation calls f(ctx, m).
func (f OncallScheduleParticipantMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OncallScheduleParticipantMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OncallScheduleParticipantMutation", m)
}

// The OncallShiftQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OncallShiftQueryRuleFunc func(context.Context, *ent.OncallShiftQuery) error

// EvalQuery return f(ctx, q).
func (f OncallShiftQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallShiftQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OncallShiftQuery", q)
}

// The OncallShiftMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OncallShiftMutationRuleFunc func(context.Context, *ent.OncallShiftMutation) error

// EvalMutation calls f(ctx, m).
func (f OncallShiftMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OncallShiftMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OncallShiftMutation", m)
}

// The OncallShiftHandoverQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OncallShiftHandoverQueryRuleFunc func(context.Context, *ent.OncallShiftHandoverQuery) error

// EvalQuery return f(ctx, q).
func (f OncallShiftHandoverQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallShiftHandoverQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OncallShiftHandoverQuery", q)
}

// The OncallShiftHandoverMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OncallShiftHandoverMutationRuleFunc func(context.Context, *ent.OncallShiftHandoverMutation) error

// EvalMutation calls f(ctx, m).
func (f OncallShiftHandoverMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OncallShiftHandoverMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OncallShiftHandoverMutation", m)
}

// The OncallShiftMetricsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OncallShiftMetricsQueryRuleFunc func(context.Context, *ent.OncallShiftMetricsQuery) error

// EvalQuery return f(ctx, q).
func (f OncallShiftMetricsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallShiftMetricsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OncallShiftMetricsQuery", q)
}

// The OncallShiftMetricsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OncallShiftMetricsMutationRuleFunc func(context.Context, *ent.OncallShiftMetricsMutation) error

// EvalMutation calls f(ctx, m).
func (f OncallShiftMetricsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OncallShiftMetricsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OncallShiftMetricsMutation", m)
}

// The PlaybookQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PlaybookQueryRuleFunc func(context.Context, *ent.PlaybookQuery) error

// EvalQuery return f(ctx, q).
func (f PlaybookQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlaybookQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PlaybookQuery", q)
}

// The PlaybookMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PlaybookMutationRuleFunc func(context.Context, *ent.PlaybookMutation) error

// EvalMutation calls f(ctx, m).
func (f PlaybookMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PlaybookMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PlaybookMutation", m)
}

// The ProviderConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProviderConfigQueryRuleFunc func(context.Context, *ent.ProviderConfigQuery) error

// EvalQuery return f(ctx, q).
func (f ProviderConfigQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProviderConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProviderConfigQuery", q)
}

// The ProviderConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProviderConfigMutationRuleFunc func(context.Context, *ent.ProviderConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f ProviderConfigMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProviderConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProviderConfigMutation", m)
}

// The ProviderSyncHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProviderSyncHistoryQueryRuleFunc func(context.Context, *ent.ProviderSyncHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f ProviderSyncHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProviderSyncHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProviderSyncHistoryQuery", q)
}

// The ProviderSyncHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProviderSyncHistoryMutationRuleFunc func(context.Context, *ent.ProviderSyncHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ProviderSyncHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProviderSyncHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProviderSyncHistoryMutation", m)
}

// The RetrospectiveQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RetrospectiveQueryRuleFunc func(context.Context, *ent.RetrospectiveQuery) error

// EvalQuery return f(ctx, q).
func (f RetrospectiveQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RetrospectiveQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RetrospectiveQuery", q)
}

// The RetrospectiveMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RetrospectiveMutationRuleFunc func(context.Context, *ent.RetrospectiveMutation) error

// EvalMutation calls f(ctx, m).
func (f RetrospectiveMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RetrospectiveMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RetrospectiveMutation", m)
}

// The RetrospectiveCommentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RetrospectiveCommentQueryRuleFunc func(context.Context, *ent.RetrospectiveCommentQuery) error

// EvalQuery return f(ctx, q).
func (f RetrospectiveCommentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RetrospectiveCommentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RetrospectiveCommentQuery", q)
}

// The RetrospectiveCommentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RetrospectiveCommentMutationRuleFunc func(context.Context, *ent.RetrospectiveCommentMutation) error

// EvalMutation calls f(ctx, m).
func (f RetrospectiveCommentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RetrospectiveCommentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RetrospectiveCommentMutation", m)
}

// The RetrospectiveReviewQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RetrospectiveReviewQueryRuleFunc func(context.Context, *ent.RetrospectiveReviewQuery) error

// EvalQuery return f(ctx, q).
func (f RetrospectiveReviewQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RetrospectiveReviewQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RetrospectiveReviewQuery", q)
}

// The RetrospectiveReviewMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RetrospectiveReviewMutationRuleFunc func(context.Context, *ent.RetrospectiveReviewMutation) error

// EvalMutation calls f(ctx, m).
func (f RetrospectiveReviewMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RetrospectiveReviewMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RetrospectiveReviewMutation", m)
}

// The SystemAnalysisQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemAnalysisQueryRuleFunc func(context.Context, *ent.SystemAnalysisQuery) error

// EvalQuery return f(ctx, q).
func (f SystemAnalysisQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemAnalysisQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemAnalysisQuery", q)
}

// The SystemAnalysisMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemAnalysisMutationRuleFunc func(context.Context, *ent.SystemAnalysisMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemAnalysisMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemAnalysisMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemAnalysisMutation", m)
}

// The SystemAnalysisComponentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemAnalysisComponentQueryRuleFunc func(context.Context, *ent.SystemAnalysisComponentQuery) error

// EvalQuery return f(ctx, q).
func (f SystemAnalysisComponentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemAnalysisComponentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemAnalysisComponentQuery", q)
}

// The SystemAnalysisComponentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemAnalysisComponentMutationRuleFunc func(context.Context, *ent.SystemAnalysisComponentMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemAnalysisComponentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemAnalysisComponentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemAnalysisComponentMutation", m)
}

// The SystemAnalysisRelationshipQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemAnalysisRelationshipQueryRuleFunc func(context.Context, *ent.SystemAnalysisRelationshipQuery) error

// EvalQuery return f(ctx, q).
func (f SystemAnalysisRelationshipQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemAnalysisRelationshipQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemAnalysisRelationshipQuery", q)
}

// The SystemAnalysisRelationshipMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemAnalysisRelationshipMutationRuleFunc func(context.Context, *ent.SystemAnalysisRelationshipMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemAnalysisRelationshipMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemAnalysisRelationshipMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemAnalysisRelationshipMutation", m)
}

// The SystemComponentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemComponentQueryRuleFunc func(context.Context, *ent.SystemComponentQuery) error

// EvalQuery return f(ctx, q).
func (f SystemComponentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemComponentQuery", q)
}

// The SystemComponentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemComponentMutationRuleFunc func(context.Context, *ent.SystemComponentMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemComponentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemComponentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemComponentMutation", m)
}

// The SystemComponentConstraintQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemComponentConstraintQueryRuleFunc func(context.Context, *ent.SystemComponentConstraintQuery) error

// EvalQuery return f(ctx, q).
func (f SystemComponentConstraintQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentConstraintQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemComponentConstraintQuery", q)
}

// The SystemComponentConstraintMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemComponentConstraintMutationRuleFunc func(context.Context, *ent.SystemComponentConstraintMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemComponentConstraintMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemComponentConstraintMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemComponentConstraintMutation", m)
}

// The SystemComponentControlQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemComponentControlQueryRuleFunc func(context.Context, *ent.SystemComponentControlQuery) error

// EvalQuery return f(ctx, q).
func (f SystemComponentControlQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentControlQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemComponentControlQuery", q)
}

// The SystemComponentControlMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemComponentControlMutationRuleFunc func(context.Context, *ent.SystemComponentControlMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemComponentControlMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemComponentControlMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemComponentControlMutation", m)
}

// The SystemComponentKindQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemComponentKindQueryRuleFunc func(context.Context, *ent.SystemComponentKindQuery) error

// EvalQuery return f(ctx, q).
func (f SystemComponentKindQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentKindQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemComponentKindQuery", q)
}

// The SystemComponentKindMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemComponentKindMutationRuleFunc func(context.Context, *ent.SystemComponentKindMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemComponentKindMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemComponentKindMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemComponentKindMutation", m)
}

// The SystemComponentRelationshipQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemComponentRelationshipQueryRuleFunc func(context.Context, *ent.SystemComponentRelationshipQuery) error

// EvalQuery return f(ctx, q).
func (f SystemComponentRelationshipQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentRelationshipQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemComponentRelationshipQuery", q)
}

// The SystemComponentRelationshipMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemComponentRelationshipMutationRuleFunc func(context.Context, *ent.SystemComponentRelationshipMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemComponentRelationshipMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemComponentRelationshipMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemComponentRelationshipMutation", m)
}

// The SystemComponentSignalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemComponentSignalQueryRuleFunc func(context.Context, *ent.SystemComponentSignalQuery) error

// EvalQuery return f(ctx, q).
func (f SystemComponentSignalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentSignalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemComponentSignalQuery", q)
}

// The SystemComponentSignalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemComponentSignalMutationRuleFunc func(context.Context, *ent.SystemComponentSignalMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemComponentSignalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemComponentSignalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemComponentSignalMutation", m)
}

// The SystemHazardQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemHazardQueryRuleFunc func(context.Context, *ent.SystemHazardQuery) error

// EvalQuery return f(ctx, q).
func (f SystemHazardQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemHazardQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemHazardQuery", q)
}

// The SystemHazardMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemHazardMutationRuleFunc func(context.Context, *ent.SystemHazardMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemHazardMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemHazardMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemHazardMutation", m)
}

// The SystemRelationshipControlActionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemRelationshipControlActionQueryRuleFunc func(context.Context, *ent.SystemRelationshipControlActionQuery) error

// EvalQuery return f(ctx, q).
func (f SystemRelationshipControlActionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemRelationshipControlActionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemRelationshipControlActionQuery", q)
}

// The SystemRelationshipControlActionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemRelationshipControlActionMutationRuleFunc func(context.Context, *ent.SystemRelationshipControlActionMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemRelationshipControlActionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemRelationshipControlActionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemRelationshipControlActionMutation", m)
}

// The SystemRelationshipFeedbackSignalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemRelationshipFeedbackSignalQueryRuleFunc func(context.Context, *ent.SystemRelationshipFeedbackSignalQuery) error

// EvalQuery return f(ctx, q).
func (f SystemRelationshipFeedbackSignalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemRelationshipFeedbackSignalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemRelationshipFeedbackSignalQuery", q)
}

// The SystemRelationshipFeedbackSignalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemRelationshipFeedbackSignalMutationRuleFunc func(context.Context, *ent.SystemRelationshipFeedbackSignalMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemRelationshipFeedbackSignalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemRelationshipFeedbackSignalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemRelationshipFeedbackSignalMutation", m)
}

// The TaskQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TaskQueryRuleFunc func(context.Context, *ent.TaskQuery) error

// EvalQuery return f(ctx, q).
func (f TaskQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TaskQuery", q)
}

// The TaskMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TaskMutationRuleFunc func(context.Context, *ent.TaskMutation) error

// EvalMutation calls f(ctx, m).
func (f TaskMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TaskMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TaskMutation", m)
}

// The TeamQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TeamQueryRuleFunc func(context.Context, *ent.TeamQuery) error

// EvalQuery return f(ctx, q).
func (f TeamQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TeamQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TeamQuery", q)
}

// The TeamMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TeamMutationRuleFunc func(context.Context, *ent.TeamMutation) error

// EvalMutation calls f(ctx, m).
func (f TeamMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TeamMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TeamMutation", m)
}

// The TenantQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TenantQueryRuleFunc func(context.Context, *ent.TenantQuery) error

// EvalQuery return f(ctx, q).
func (f TenantQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TenantQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TenantQuery", q)
}

// The TenantMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TenantMutationRuleFunc func(context.Context, *ent.TenantMutation) error

// EvalMutation calls f(ctx, m).
func (f TenantMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TenantMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TenantMutation", m)
}

// The TicketQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TicketQueryRuleFunc func(context.Context, *ent.TicketQuery) error

// EvalQuery return f(ctx, q).
func (f TicketQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TicketQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TicketQuery", q)
}

// The TicketMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TicketMutationRuleFunc func(context.Context, *ent.TicketMutation) error

// EvalMutation calls f(ctx, m).
func (f TicketMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TicketMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TicketMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.AlertQuery:
		return q.Filter(), nil
	case *ent.AlertFeedbackQuery:
		return q.Filter(), nil
	case *ent.AlertInstanceQuery:
		return q.Filter(), nil
	case *ent.AlertMetricsQuery:
		return q.Filter(), nil
	case *ent.DocumentQuery:
		return q.Filter(), nil
	case *ent.EventQuery:
		return q.Filter(), nil
	case *ent.EventAnnotationQuery:
		return q.Filter(), nil
	case *ent.IncidentQuery:
		return q.Filter(), nil
	case *ent.IncidentDebriefQuery:
		return q.Filter(), nil
	case *ent.IncidentDebriefMessageQuery:
		return q.Filter(), nil
	case *ent.IncidentDebriefQuestionQuery:
		return q.Filter(), nil
	case *ent.IncidentDebriefSuggestionQuery:
		return q.Filter(), nil
	case *ent.IncidentEventQuery:
		return q.Filter(), nil
	case *ent.IncidentEventContextQuery:
		return q.Filter(), nil
	case *ent.IncidentEventContributingFactorQuery:
		return q.Filter(), nil
	case *ent.IncidentEventEvidenceQuery:
		return q.Filter(), nil
	case *ent.IncidentEventSystemComponentQuery:
		return q.Filter(), nil
	case *ent.IncidentFieldQuery:
		return q.Filter(), nil
	case *ent.IncidentFieldOptionQuery:
		return q.Filter(), nil
	case *ent.IncidentLinkQuery:
		return q.Filter(), nil
	case *ent.IncidentMilestoneQuery:
		return q.Filter(), nil
	case *ent.IncidentRoleQuery:
		return q.Filter(), nil
	case *ent.IncidentRoleAssignmentQuery:
		return q.Filter(), nil
	case *ent.IncidentSeverityQuery:
		return q.Filter(), nil
	case *ent.IncidentTagQuery:
		return q.Filter(), nil
	case *ent.IncidentTypeQuery:
		return q.Filter(), nil
	case *ent.MeetingScheduleQuery:
		return q.Filter(), nil
	case *ent.MeetingSessionQuery:
		return q.Filter(), nil
	case *ent.OncallHandoverTemplateQuery:
		return q.Filter(), nil
	case *ent.OncallRosterQuery:
		return q.Filter(), nil
	case *ent.OncallRosterMetricsQuery:
		return q.Filter(), nil
	case *ent.OncallScheduleQuery:
		return q.Filter(), nil
	case *ent.OncallScheduleParticipantQuery:
		return q.Filter(), nil
	case *ent.OncallShiftQuery:
		return q.Filter(), nil
	case *ent.OncallShiftHandoverQuery:
		return q.Filter(), nil
	case *ent.OncallShiftMetricsQuery:
		return q.Filter(), nil
	case *ent.PlaybookQuery:
		return q.Filter(), nil
	case *ent.ProviderConfigQuery:
		return q.Filter(), nil
	case *ent.ProviderSyncHistoryQuery:
		return q.Filter(), nil
	case *ent.RetrospectiveQuery:
		return q.Filter(), nil
	case *ent.RetrospectiveCommentQuery:
		return q.Filter(), nil
	case *ent.RetrospectiveReviewQuery:
		return q.Filter(), nil
	case *ent.SystemAnalysisQuery:
		return q.Filter(), nil
	case *ent.SystemAnalysisComponentQuery:
		return q.Filter(), nil
	case *ent.SystemAnalysisRelationshipQuery:
		return q.Filter(), nil
	case *ent.SystemComponentQuery:
		return q.Filter(), nil
	case *ent.SystemComponentConstraintQuery:
		return q.Filter(), nil
	case *ent.SystemComponentControlQuery:
		return q.Filter(), nil
	case *ent.SystemComponentKindQuery:
		return q.Filter(), nil
	case *ent.SystemComponentRelationshipQuery:
		return q.Filter(), nil
	case *ent.SystemComponentSignalQuery:
		return q.Filter(), nil
	case *ent.SystemHazardQuery:
		return q.Filter(), nil
	case *ent.SystemRelationshipControlActionQuery:
		return q.Filter(), nil
	case *ent.SystemRelationshipFeedbackSignalQuery:
		return q.Filter(), nil
	case *ent.TaskQuery:
		return q.Filter(), nil
	case *ent.TeamQuery:
		return q.Filter(), nil
	case *ent.TenantQuery:
		return q.Filter(), nil
	case *ent.TicketQuery:
		return q.Filter(), nil
	case *ent.UserQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.AlertMutation:
		return m.Filter(), nil
	case *ent.AlertFeedbackMutation:
		return m.Filter(), nil
	case *ent.AlertInstanceMutation:
		return m.Filter(), nil
	case *ent.DocumentMutation:
		return m.Filter(), nil
	case *ent.EventMutation:
		return m.Filter(), nil
	case *ent.EventAnnotationMutation:
		return m.Filter(), nil
	case *ent.IncidentMutation:
		return m.Filter(), nil
	case *ent.IncidentDebriefMutation:
		return m.Filter(), nil
	case *ent.IncidentDebriefMessageMutation:
		return m.Filter(), nil
	case *ent.IncidentDebriefQuestionMutation:
		return m.Filter(), nil
	case *ent.IncidentDebriefSuggestionMutation:
		return m.Filter(), nil
	case *ent.IncidentEventMutation:
		return m.Filter(), nil
	case *ent.IncidentEventContextMutation:
		return m.Filter(), nil
	case *ent.IncidentEventContributingFactorMutation:
		return m.Filter(), nil
	case *ent.IncidentEventEvidenceMutation:
		return m.Filter(), nil
	case *ent.IncidentEventSystemComponentMutation:
		return m.Filter(), nil
	case *ent.IncidentFieldMutation:
		return m.Filter(), nil
	case *ent.IncidentFieldOptionMutation:
		return m.Filter(), nil
	case *ent.IncidentLinkMutation:
		return m.Filter(), nil
	case *ent.IncidentMilestoneMutation:
		return m.Filter(), nil
	case *ent.IncidentRoleMutation:
		return m.Filter(), nil
	case *ent.IncidentRoleAssignmentMutation:
		return m.Filter(), nil
	case *ent.IncidentSeverityMutation:
		return m.Filter(), nil
	case *ent.IncidentTagMutation:
		return m.Filter(), nil
	case *ent.IncidentTypeMutation:
		return m.Filter(), nil
	case *ent.MeetingScheduleMutation:
		return m.Filter(), nil
	case *ent.MeetingSessionMutation:
		return m.Filter(), nil
	case *ent.OncallHandoverTemplateMutation:
		return m.Filter(), nil
	case *ent.OncallRosterMutation:
		return m.Filter(), nil
	case *ent.OncallRosterMetricsMutation:
		return m.Filter(), nil
	case *ent.OncallScheduleMutation:
		return m.Filter(), nil
	case *ent.OncallScheduleParticipantMutation:
		return m.Filter(), nil
	case *ent.OncallShiftMutation:
		return m.Filter(), nil
	case *ent.OncallShiftHandoverMutation:
		return m.Filter(), nil
	case *ent.OncallShiftMetricsMutation:
		return m.Filter(), nil
	case *ent.PlaybookMutation:
		return m.Filter(), nil
	case *ent.ProviderConfigMutation:
		return m.Filter(), nil
	case *ent.ProviderSyncHistoryMutation:
		return m.Filter(), nil
	case *ent.RetrospectiveMutation:
		return m.Filter(), nil
	case *ent.RetrospectiveCommentMutation:
		return m.Filter(), nil
	case *ent.RetrospectiveReviewMutation:
		return m.Filter(), nil
	case *ent.SystemAnalysisMutation:
		return m.Filter(), nil
	case *ent.SystemAnalysisComponentMutation:
		return m.Filter(), nil
	case *ent.SystemAnalysisRelationshipMutation:
		return m.Filter(), nil
	case *ent.SystemComponentMutation:
		return m.Filter(), nil
	case *ent.SystemComponentConstraintMutation:
		return m.Filter(), nil
	case *ent.SystemComponentControlMutation:
		return m.Filter(), nil
	case *ent.SystemComponentKindMutation:
		return m.Filter(), nil
	case *ent.SystemComponentRelationshipMutation:
		return m.Filter(), nil
	case *ent.SystemComponentSignalMutation:
		return m.Filter(), nil
	case *ent.SystemHazardMutation:
		return m.Filter(), nil
	case *ent.SystemRelationshipControlActionMutation:
		return m.Filter(), nil
	case *ent.SystemRelationshipFeedbackSignalMutation:
		return m.Filter(), nil
	case *ent.TaskMutation:
		return m.Filter(), nil
	case *ent.TeamMutation:
		return m.Filter(), nil
	case *ent.TenantMutation:
		return m.Filter(), nil
	case *ent.TicketMutation:
		return m.Filter(), nil
	case *ent.UserMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
