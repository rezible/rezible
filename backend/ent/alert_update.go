// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/alertinstance"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/playbook"
	"github.com/rezible/rezible/ent/predicate"
)

// AlertUpdate is the builder for updating Alert entities.
type AlertUpdate struct {
	config
	hooks     []Hook
	mutation  *AlertMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AlertUpdate builder.
func (au *AlertUpdate) Where(ps ...predicate.Alert) *AlertUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetProviderID sets the "provider_id" field.
func (au *AlertUpdate) SetProviderID(s string) *AlertUpdate {
	au.mutation.SetProviderID(s)
	return au
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (au *AlertUpdate) SetNillableProviderID(s *string) *AlertUpdate {
	if s != nil {
		au.SetProviderID(*s)
	}
	return au
}

// SetTitle sets the "title" field.
func (au *AlertUpdate) SetTitle(s string) *AlertUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AlertUpdate) SetNillableTitle(s *string) *AlertUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AlertUpdate) SetDescription(s string) *AlertUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AlertUpdate) SetNillableDescription(s *string) *AlertUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AlertUpdate) ClearDescription() *AlertUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetDefinition sets the "definition" field.
func (au *AlertUpdate) SetDefinition(s string) *AlertUpdate {
	au.mutation.SetDefinition(s)
	return au
}

// SetNillableDefinition sets the "definition" field if the given value is not nil.
func (au *AlertUpdate) SetNillableDefinition(s *string) *AlertUpdate {
	if s != nil {
		au.SetDefinition(*s)
	}
	return au
}

// ClearDefinition clears the value of the "definition" field.
func (au *AlertUpdate) ClearDefinition() *AlertUpdate {
	au.mutation.ClearDefinition()
	return au
}

// SetRosterID sets the "roster_id" field.
func (au *AlertUpdate) SetRosterID(u uuid.UUID) *AlertUpdate {
	au.mutation.SetRosterID(u)
	return au
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (au *AlertUpdate) SetNillableRosterID(u *uuid.UUID) *AlertUpdate {
	if u != nil {
		au.SetRosterID(*u)
	}
	return au
}

// ClearRosterID clears the value of the "roster_id" field.
func (au *AlertUpdate) ClearRosterID() *AlertUpdate {
	au.mutation.ClearRosterID()
	return au
}

// AddPlaybookIDs adds the "playbooks" edge to the Playbook entity by IDs.
func (au *AlertUpdate) AddPlaybookIDs(ids ...uuid.UUID) *AlertUpdate {
	au.mutation.AddPlaybookIDs(ids...)
	return au
}

// AddPlaybooks adds the "playbooks" edges to the Playbook entity.
func (au *AlertUpdate) AddPlaybooks(p ...*Playbook) *AlertUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPlaybookIDs(ids...)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (au *AlertUpdate) SetRoster(o *OncallRoster) *AlertUpdate {
	return au.SetRosterID(o.ID)
}

// AddInstanceIDs adds the "instances" edge to the AlertInstance entity by IDs.
func (au *AlertUpdate) AddInstanceIDs(ids ...uuid.UUID) *AlertUpdate {
	au.mutation.AddInstanceIDs(ids...)
	return au
}

// AddInstances adds the "instances" edges to the AlertInstance entity.
func (au *AlertUpdate) AddInstances(a ...*AlertInstance) *AlertUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddInstanceIDs(ids...)
}

// Mutation returns the AlertMutation object of the builder.
func (au *AlertUpdate) Mutation() *AlertMutation {
	return au.mutation
}

// ClearPlaybooks clears all "playbooks" edges to the Playbook entity.
func (au *AlertUpdate) ClearPlaybooks() *AlertUpdate {
	au.mutation.ClearPlaybooks()
	return au
}

// RemovePlaybookIDs removes the "playbooks" edge to Playbook entities by IDs.
func (au *AlertUpdate) RemovePlaybookIDs(ids ...uuid.UUID) *AlertUpdate {
	au.mutation.RemovePlaybookIDs(ids...)
	return au
}

// RemovePlaybooks removes "playbooks" edges to Playbook entities.
func (au *AlertUpdate) RemovePlaybooks(p ...*Playbook) *AlertUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePlaybookIDs(ids...)
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (au *AlertUpdate) ClearRoster() *AlertUpdate {
	au.mutation.ClearRoster()
	return au
}

// ClearInstances clears all "instances" edges to the AlertInstance entity.
func (au *AlertUpdate) ClearInstances() *AlertUpdate {
	au.mutation.ClearInstances()
	return au
}

// RemoveInstanceIDs removes the "instances" edge to AlertInstance entities by IDs.
func (au *AlertUpdate) RemoveInstanceIDs(ids ...uuid.UUID) *AlertUpdate {
	au.mutation.RemoveInstanceIDs(ids...)
	return au
}

// RemoveInstances removes "instances" edges to AlertInstance entities.
func (au *AlertUpdate) RemoveInstances(a ...*AlertInstance) *AlertUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AlertUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AlertUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AlertUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AlertUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AlertUpdate) check() error {
	if au.mutation.TenantCleared() && len(au.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Alert.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AlertUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlertUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AlertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(alert.Table, alert.Columns, sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ProviderID(); ok {
		_spec.SetField(alert.FieldProviderID, field.TypeString, value)
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(alert.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(alert.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(alert.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.Definition(); ok {
		_spec.SetField(alert.FieldDefinition, field.TypeString, value)
	}
	if au.mutation.DefinitionCleared() {
		_spec.ClearField(alert.FieldDefinition, field.TypeString)
	}
	if au.mutation.PlaybooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   alert.PlaybooksTable,
			Columns: alert.PlaybooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPlaybooksIDs(); len(nodes) > 0 && !au.mutation.PlaybooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   alert.PlaybooksTable,
			Columns: alert.PlaybooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PlaybooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   alert.PlaybooksTable,
			Columns: alert.PlaybooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alert.RosterTable,
			Columns: []string{alert.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alert.RosterTable,
			Columns: []string{alert.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   alert.InstancesTable,
			Columns: []string{alert.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !au.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   alert.InstancesTable,
			Columns: []string{alert.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   alert.InstancesTable,
			Columns: []string{alert.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AlertUpdateOne is the builder for updating a single Alert entity.
type AlertUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AlertMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetProviderID sets the "provider_id" field.
func (auo *AlertUpdateOne) SetProviderID(s string) *AlertUpdateOne {
	auo.mutation.SetProviderID(s)
	return auo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableProviderID(s *string) *AlertUpdateOne {
	if s != nil {
		auo.SetProviderID(*s)
	}
	return auo
}

// SetTitle sets the "title" field.
func (auo *AlertUpdateOne) SetTitle(s string) *AlertUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableTitle(s *string) *AlertUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AlertUpdateOne) SetDescription(s string) *AlertUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableDescription(s *string) *AlertUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AlertUpdateOne) ClearDescription() *AlertUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetDefinition sets the "definition" field.
func (auo *AlertUpdateOne) SetDefinition(s string) *AlertUpdateOne {
	auo.mutation.SetDefinition(s)
	return auo
}

// SetNillableDefinition sets the "definition" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableDefinition(s *string) *AlertUpdateOne {
	if s != nil {
		auo.SetDefinition(*s)
	}
	return auo
}

// ClearDefinition clears the value of the "definition" field.
func (auo *AlertUpdateOne) ClearDefinition() *AlertUpdateOne {
	auo.mutation.ClearDefinition()
	return auo
}

// SetRosterID sets the "roster_id" field.
func (auo *AlertUpdateOne) SetRosterID(u uuid.UUID) *AlertUpdateOne {
	auo.mutation.SetRosterID(u)
	return auo
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (auo *AlertUpdateOne) SetNillableRosterID(u *uuid.UUID) *AlertUpdateOne {
	if u != nil {
		auo.SetRosterID(*u)
	}
	return auo
}

// ClearRosterID clears the value of the "roster_id" field.
func (auo *AlertUpdateOne) ClearRosterID() *AlertUpdateOne {
	auo.mutation.ClearRosterID()
	return auo
}

// AddPlaybookIDs adds the "playbooks" edge to the Playbook entity by IDs.
func (auo *AlertUpdateOne) AddPlaybookIDs(ids ...uuid.UUID) *AlertUpdateOne {
	auo.mutation.AddPlaybookIDs(ids...)
	return auo
}

// AddPlaybooks adds the "playbooks" edges to the Playbook entity.
func (auo *AlertUpdateOne) AddPlaybooks(p ...*Playbook) *AlertUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPlaybookIDs(ids...)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (auo *AlertUpdateOne) SetRoster(o *OncallRoster) *AlertUpdateOne {
	return auo.SetRosterID(o.ID)
}

// AddInstanceIDs adds the "instances" edge to the AlertInstance entity by IDs.
func (auo *AlertUpdateOne) AddInstanceIDs(ids ...uuid.UUID) *AlertUpdateOne {
	auo.mutation.AddInstanceIDs(ids...)
	return auo
}

// AddInstances adds the "instances" edges to the AlertInstance entity.
func (auo *AlertUpdateOne) AddInstances(a ...*AlertInstance) *AlertUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddInstanceIDs(ids...)
}

// Mutation returns the AlertMutation object of the builder.
func (auo *AlertUpdateOne) Mutation() *AlertMutation {
	return auo.mutation
}

// ClearPlaybooks clears all "playbooks" edges to the Playbook entity.
func (auo *AlertUpdateOne) ClearPlaybooks() *AlertUpdateOne {
	auo.mutation.ClearPlaybooks()
	return auo
}

// RemovePlaybookIDs removes the "playbooks" edge to Playbook entities by IDs.
func (auo *AlertUpdateOne) RemovePlaybookIDs(ids ...uuid.UUID) *AlertUpdateOne {
	auo.mutation.RemovePlaybookIDs(ids...)
	return auo
}

// RemovePlaybooks removes "playbooks" edges to Playbook entities.
func (auo *AlertUpdateOne) RemovePlaybooks(p ...*Playbook) *AlertUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePlaybookIDs(ids...)
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (auo *AlertUpdateOne) ClearRoster() *AlertUpdateOne {
	auo.mutation.ClearRoster()
	return auo
}

// ClearInstances clears all "instances" edges to the AlertInstance entity.
func (auo *AlertUpdateOne) ClearInstances() *AlertUpdateOne {
	auo.mutation.ClearInstances()
	return auo
}

// RemoveInstanceIDs removes the "instances" edge to AlertInstance entities by IDs.
func (auo *AlertUpdateOne) RemoveInstanceIDs(ids ...uuid.UUID) *AlertUpdateOne {
	auo.mutation.RemoveInstanceIDs(ids...)
	return auo
}

// RemoveInstances removes "instances" edges to AlertInstance entities.
func (auo *AlertUpdateOne) RemoveInstances(a ...*AlertInstance) *AlertUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveInstanceIDs(ids...)
}

// Where appends a list predicates to the AlertUpdate builder.
func (auo *AlertUpdateOne) Where(ps ...predicate.Alert) *AlertUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AlertUpdateOne) Select(field string, fields ...string) *AlertUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Alert entity.
func (auo *AlertUpdateOne) Save(ctx context.Context) (*Alert, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AlertUpdateOne) SaveX(ctx context.Context) *Alert {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AlertUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AlertUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AlertUpdateOne) check() error {
	if auo.mutation.TenantCleared() && len(auo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Alert.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AlertUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlertUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AlertUpdateOne) sqlSave(ctx context.Context) (_node *Alert, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(alert.Table, alert.Columns, sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Alert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alert.FieldID)
		for _, f := range fields {
			if !alert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != alert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.ProviderID(); ok {
		_spec.SetField(alert.FieldProviderID, field.TypeString, value)
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(alert.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(alert.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(alert.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.Definition(); ok {
		_spec.SetField(alert.FieldDefinition, field.TypeString, value)
	}
	if auo.mutation.DefinitionCleared() {
		_spec.ClearField(alert.FieldDefinition, field.TypeString)
	}
	if auo.mutation.PlaybooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   alert.PlaybooksTable,
			Columns: alert.PlaybooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPlaybooksIDs(); len(nodes) > 0 && !auo.mutation.PlaybooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   alert.PlaybooksTable,
			Columns: alert.PlaybooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PlaybooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   alert.PlaybooksTable,
			Columns: alert.PlaybooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alert.RosterTable,
			Columns: []string{alert.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alert.RosterTable,
			Columns: []string{alert.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   alert.InstancesTable,
			Columns: []string{alert.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !auo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   alert.InstancesTable,
			Columns: []string{alert.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   alert.InstancesTable,
			Columns: []string{alert.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Alert{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
