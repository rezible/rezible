// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/eventannotation"
	"github.com/rezible/rezible/ent/predicate"
)

// EventAnnotationDelete is the builder for deleting a EventAnnotation entity.
type EventAnnotationDelete struct {
	config
	hooks    []Hook
	mutation *EventAnnotationMutation
}

// Where appends a list predicates to the EventAnnotationDelete builder.
func (ead *EventAnnotationDelete) Where(ps ...predicate.EventAnnotation) *EventAnnotationDelete {
	ead.mutation.Where(ps...)
	return ead
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ead *EventAnnotationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ead.sqlExec, ead.mutation, ead.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ead *EventAnnotationDelete) ExecX(ctx context.Context) int {
	n, err := ead.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ead *EventAnnotationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(eventannotation.Table, sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID))
	if ps := ead.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ead.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ead.mutation.done = true
	return affected, err
}

// EventAnnotationDeleteOne is the builder for deleting a single EventAnnotation entity.
type EventAnnotationDeleteOne struct {
	ead *EventAnnotationDelete
}

// Where appends a list predicates to the EventAnnotationDelete builder.
func (eado *EventAnnotationDeleteOne) Where(ps ...predicate.EventAnnotation) *EventAnnotationDeleteOne {
	eado.ead.mutation.Where(ps...)
	return eado
}

// Exec executes the deletion query.
func (eado *EventAnnotationDeleteOne) Exec(ctx context.Context) error {
	n, err := eado.ead.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{eventannotation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (eado *EventAnnotationDeleteOne) ExecX(ctx context.Context) {
	if err := eado.Exec(ctx); err != nil {
		panic(err)
	}
}
