// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontext"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentEvent is the model entity for the IncidentEvent schema.
type IncidentEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// IncidentID holds the value of the "incident_id" field.
	IncidentID uuid.UUID `json:"incident_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID uuid.UUID `json:"event_id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind incidentevent.Kind `json:"kind,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IsKey holds the value of the "is_key" field.
	IsKey bool `json:"is_key,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Sequence holds the value of the "sequence" field.
	Sequence int `json:"sequence,omitempty"`
	// IsDraft holds the value of the "is_draft" field.
	IsDraft bool `json:"is_draft,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentEventQuery when eager-loading is set.
	Edges        IncidentEventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentEventEdges holds the relations/edges for other nodes in the graph.
type IncidentEventEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Incident holds the value of the incident edge.
	Incident *Incident `json:"incident,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// Context holds the value of the context edge.
	Context *IncidentEventContext `json:"context,omitempty"`
	// Factors holds the value of the factors edge.
	Factors []*IncidentEventContributingFactor `json:"factors,omitempty"`
	// Evidence holds the value of the evidence edge.
	Evidence []*IncidentEventEvidence `json:"evidence,omitempty"`
	// SystemComponents holds the value of the system_components edge.
	SystemComponents []*SystemComponent `json:"system_components,omitempty"`
	// EventComponents holds the value of the event_components edge.
	EventComponents []*IncidentEventSystemComponent `json:"event_components,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEventEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// IncidentOrErr returns the Incident value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEventEdges) IncidentOrErr() (*Incident, error) {
	if e.Incident != nil {
		return e.Incident, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: incident.Label}
	}
	return nil, &NotLoadedError{edge: "incident"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEventEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// ContextOrErr returns the Context value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEventEdges) ContextOrErr() (*IncidentEventContext, error) {
	if e.Context != nil {
		return e.Context, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: incidenteventcontext.Label}
	}
	return nil, &NotLoadedError{edge: "context"}
}

// FactorsOrErr returns the Factors value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEventEdges) FactorsOrErr() ([]*IncidentEventContributingFactor, error) {
	if e.loadedTypes[4] {
		return e.Factors, nil
	}
	return nil, &NotLoadedError{edge: "factors"}
}

// EvidenceOrErr returns the Evidence value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEventEdges) EvidenceOrErr() ([]*IncidentEventEvidence, error) {
	if e.loadedTypes[5] {
		return e.Evidence, nil
	}
	return nil, &NotLoadedError{edge: "evidence"}
}

// SystemComponentsOrErr returns the SystemComponents value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEventEdges) SystemComponentsOrErr() ([]*SystemComponent, error) {
	if e.loadedTypes[6] {
		return e.SystemComponents, nil
	}
	return nil, &NotLoadedError{edge: "system_components"}
}

// EventComponentsOrErr returns the EventComponents value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEventEdges) EventComponentsOrErr() ([]*IncidentEventSystemComponent, error) {
	if e.loadedTypes[7] {
		return e.EventComponents, nil
	}
	return nil, &NotLoadedError{edge: "event_components"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentevent.FieldIsKey, incidentevent.FieldIsDraft:
			values[i] = new(sql.NullBool)
		case incidentevent.FieldTenantID, incidentevent.FieldSequence:
			values[i] = new(sql.NullInt64)
		case incidentevent.FieldKind, incidentevent.FieldTitle, incidentevent.FieldDescription:
			values[i] = new(sql.NullString)
		case incidentevent.FieldTimestamp, incidentevent.FieldCreatedAt, incidentevent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case incidentevent.FieldID, incidentevent.FieldIncidentID, incidentevent.FieldEventID, incidentevent.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentEvent fields.
func (ie *IncidentEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentevent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ie.ID = *value
			}
		case incidentevent.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ie.TenantID = int(value.Int64)
			}
		case incidentevent.FieldIncidentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field incident_id", values[i])
			} else if value != nil {
				ie.IncidentID = *value
			}
		case incidentevent.FieldEventID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value != nil {
				ie.EventID = *value
			}
		case incidentevent.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				ie.Timestamp = value.Time
			}
		case incidentevent.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				ie.Kind = incidentevent.Kind(value.String)
			}
		case incidentevent.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ie.Title = value.String
			}
		case incidentevent.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ie.Description = value.String
			}
		case incidentevent.FieldIsKey:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_key", values[i])
			} else if value.Valid {
				ie.IsKey = value.Bool
			}
		case incidentevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ie.CreatedAt = value.Time
			}
		case incidentevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ie.UpdatedAt = value.Time
			}
		case incidentevent.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				ie.CreatedBy = *value
			}
		case incidentevent.FieldSequence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence", values[i])
			} else if value.Valid {
				ie.Sequence = int(value.Int64)
			}
		case incidentevent.FieldIsDraft:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_draft", values[i])
			} else if value.Valid {
				ie.IsDraft = value.Bool
			}
		default:
			ie.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentEvent.
// This includes values selected through modifiers, order, etc.
func (ie *IncidentEvent) Value(name string) (ent.Value, error) {
	return ie.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the IncidentEvent entity.
func (ie *IncidentEvent) QueryTenant() *TenantQuery {
	return NewIncidentEventClient(ie.config).QueryTenant(ie)
}

// QueryIncident queries the "incident" edge of the IncidentEvent entity.
func (ie *IncidentEvent) QueryIncident() *IncidentQuery {
	return NewIncidentEventClient(ie.config).QueryIncident(ie)
}

// QueryEvent queries the "event" edge of the IncidentEvent entity.
func (ie *IncidentEvent) QueryEvent() *EventQuery {
	return NewIncidentEventClient(ie.config).QueryEvent(ie)
}

// QueryContext queries the "context" edge of the IncidentEvent entity.
func (ie *IncidentEvent) QueryContext() *IncidentEventContextQuery {
	return NewIncidentEventClient(ie.config).QueryContext(ie)
}

// QueryFactors queries the "factors" edge of the IncidentEvent entity.
func (ie *IncidentEvent) QueryFactors() *IncidentEventContributingFactorQuery {
	return NewIncidentEventClient(ie.config).QueryFactors(ie)
}

// QueryEvidence queries the "evidence" edge of the IncidentEvent entity.
func (ie *IncidentEvent) QueryEvidence() *IncidentEventEvidenceQuery {
	return NewIncidentEventClient(ie.config).QueryEvidence(ie)
}

// QuerySystemComponents queries the "system_components" edge of the IncidentEvent entity.
func (ie *IncidentEvent) QuerySystemComponents() *SystemComponentQuery {
	return NewIncidentEventClient(ie.config).QuerySystemComponents(ie)
}

// QueryEventComponents queries the "event_components" edge of the IncidentEvent entity.
func (ie *IncidentEvent) QueryEventComponents() *IncidentEventSystemComponentQuery {
	return NewIncidentEventClient(ie.config).QueryEventComponents(ie)
}

// Update returns a builder for updating this IncidentEvent.
// Note that you need to call IncidentEvent.Unwrap() before calling this method if this IncidentEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ie *IncidentEvent) Update() *IncidentEventUpdateOne {
	return NewIncidentEventClient(ie.config).UpdateOne(ie)
}

// Unwrap unwraps the IncidentEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ie *IncidentEvent) Unwrap() *IncidentEvent {
	_tx, ok := ie.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentEvent is not a transactional entity")
	}
	ie.config.driver = _tx.drv
	return ie
}

// String implements the fmt.Stringer.
func (ie *IncidentEvent) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ie.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ie.TenantID))
	builder.WriteString(", ")
	builder.WriteString("incident_id=")
	builder.WriteString(fmt.Sprintf("%v", ie.IncidentID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", ie.EventID))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(ie.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", ie.Kind))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ie.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ie.Description)
	builder.WriteString(", ")
	builder.WriteString("is_key=")
	builder.WriteString(fmt.Sprintf("%v", ie.IsKey))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ie.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ie.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ie.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("sequence=")
	builder.WriteString(fmt.Sprintf("%v", ie.Sequence))
	builder.WriteString(", ")
	builder.WriteString("is_draft=")
	builder.WriteString(fmt.Sprintf("%v", ie.IsDraft))
	builder.WriteByte(')')
	return builder.String()
}

// IncidentEvents is a parsable slice of IncidentEvent.
type IncidentEvents []*IncidentEvent
