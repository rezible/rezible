// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/oncallhandovertemplate"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallrostermetrics"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/user"
)

// OncallRosterUpdate is the builder for updating OncallRoster entities.
type OncallRosterUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallRosterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallRosterUpdate builder.
func (oru *OncallRosterUpdate) Where(ps ...predicate.OncallRoster) *OncallRosterUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetArchiveTime sets the "archive_time" field.
func (oru *OncallRosterUpdate) SetArchiveTime(t time.Time) *OncallRosterUpdate {
	oru.mutation.SetArchiveTime(t)
	return oru
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (oru *OncallRosterUpdate) SetNillableArchiveTime(t *time.Time) *OncallRosterUpdate {
	if t != nil {
		oru.SetArchiveTime(*t)
	}
	return oru
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (oru *OncallRosterUpdate) ClearArchiveTime() *OncallRosterUpdate {
	oru.mutation.ClearArchiveTime()
	return oru
}

// SetName sets the "name" field.
func (oru *OncallRosterUpdate) SetName(s string) *OncallRosterUpdate {
	oru.mutation.SetName(s)
	return oru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oru *OncallRosterUpdate) SetNillableName(s *string) *OncallRosterUpdate {
	if s != nil {
		oru.SetName(*s)
	}
	return oru
}

// SetSlug sets the "slug" field.
func (oru *OncallRosterUpdate) SetSlug(s string) *OncallRosterUpdate {
	oru.mutation.SetSlug(s)
	return oru
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (oru *OncallRosterUpdate) SetNillableSlug(s *string) *OncallRosterUpdate {
	if s != nil {
		oru.SetSlug(*s)
	}
	return oru
}

// SetProviderID sets the "provider_id" field.
func (oru *OncallRosterUpdate) SetProviderID(s string) *OncallRosterUpdate {
	oru.mutation.SetProviderID(s)
	return oru
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (oru *OncallRosterUpdate) SetNillableProviderID(s *string) *OncallRosterUpdate {
	if s != nil {
		oru.SetProviderID(*s)
	}
	return oru
}

// SetTimezone sets the "timezone" field.
func (oru *OncallRosterUpdate) SetTimezone(s string) *OncallRosterUpdate {
	oru.mutation.SetTimezone(s)
	return oru
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (oru *OncallRosterUpdate) SetNillableTimezone(s *string) *OncallRosterUpdate {
	if s != nil {
		oru.SetTimezone(*s)
	}
	return oru
}

// ClearTimezone clears the value of the "timezone" field.
func (oru *OncallRosterUpdate) ClearTimezone() *OncallRosterUpdate {
	oru.mutation.ClearTimezone()
	return oru
}

// SetChatHandle sets the "chat_handle" field.
func (oru *OncallRosterUpdate) SetChatHandle(s string) *OncallRosterUpdate {
	oru.mutation.SetChatHandle(s)
	return oru
}

// SetNillableChatHandle sets the "chat_handle" field if the given value is not nil.
func (oru *OncallRosterUpdate) SetNillableChatHandle(s *string) *OncallRosterUpdate {
	if s != nil {
		oru.SetChatHandle(*s)
	}
	return oru
}

// ClearChatHandle clears the value of the "chat_handle" field.
func (oru *OncallRosterUpdate) ClearChatHandle() *OncallRosterUpdate {
	oru.mutation.ClearChatHandle()
	return oru
}

// SetChatChannelID sets the "chat_channel_id" field.
func (oru *OncallRosterUpdate) SetChatChannelID(s string) *OncallRosterUpdate {
	oru.mutation.SetChatChannelID(s)
	return oru
}

// SetNillableChatChannelID sets the "chat_channel_id" field if the given value is not nil.
func (oru *OncallRosterUpdate) SetNillableChatChannelID(s *string) *OncallRosterUpdate {
	if s != nil {
		oru.SetChatChannelID(*s)
	}
	return oru
}

// ClearChatChannelID clears the value of the "chat_channel_id" field.
func (oru *OncallRosterUpdate) ClearChatChannelID() *OncallRosterUpdate {
	oru.mutation.ClearChatChannelID()
	return oru
}

// SetHandoverTemplateID sets the "handover_template_id" field.
func (oru *OncallRosterUpdate) SetHandoverTemplateID(u uuid.UUID) *OncallRosterUpdate {
	oru.mutation.SetHandoverTemplateID(u)
	return oru
}

// SetNillableHandoverTemplateID sets the "handover_template_id" field if the given value is not nil.
func (oru *OncallRosterUpdate) SetNillableHandoverTemplateID(u *uuid.UUID) *OncallRosterUpdate {
	if u != nil {
		oru.SetHandoverTemplateID(*u)
	}
	return oru
}

// ClearHandoverTemplateID clears the value of the "handover_template_id" field.
func (oru *OncallRosterUpdate) ClearHandoverTemplateID() *OncallRosterUpdate {
	oru.mutation.ClearHandoverTemplateID()
	return oru
}

// AddScheduleIDs adds the "schedules" edge to the OncallSchedule entity by IDs.
func (oru *OncallRosterUpdate) AddScheduleIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.AddScheduleIDs(ids...)
	return oru
}

// AddSchedules adds the "schedules" edges to the OncallSchedule entity.
func (oru *OncallRosterUpdate) AddSchedules(o ...*OncallSchedule) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.AddScheduleIDs(ids...)
}

// SetHandoverTemplate sets the "handover_template" edge to the OncallHandoverTemplate entity.
func (oru *OncallRosterUpdate) SetHandoverTemplate(o *OncallHandoverTemplate) *OncallRosterUpdate {
	return oru.SetHandoverTemplateID(o.ID)
}

// AddAlertIDs adds the "alerts" edge to the Alert entity by IDs.
func (oru *OncallRosterUpdate) AddAlertIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.AddAlertIDs(ids...)
	return oru
}

// AddAlerts adds the "alerts" edges to the Alert entity.
func (oru *OncallRosterUpdate) AddAlerts(a ...*Alert) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return oru.AddAlertIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (oru *OncallRosterUpdate) AddTeamIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.AddTeamIDs(ids...)
	return oru
}

// AddTeams adds the "teams" edges to the Team entity.
func (oru *OncallRosterUpdate) AddTeams(t ...*Team) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oru.AddTeamIDs(ids...)
}

// AddShiftIDs adds the "shifts" edge to the OncallShift entity by IDs.
func (oru *OncallRosterUpdate) AddShiftIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.AddShiftIDs(ids...)
	return oru
}

// AddShifts adds the "shifts" edges to the OncallShift entity.
func (oru *OncallRosterUpdate) AddShifts(o ...*OncallShift) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.AddShiftIDs(ids...)
}

// AddUserWatcherIDs adds the "user_watchers" edge to the User entity by IDs.
func (oru *OncallRosterUpdate) AddUserWatcherIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.AddUserWatcherIDs(ids...)
	return oru
}

// AddUserWatchers adds the "user_watchers" edges to the User entity.
func (oru *OncallRosterUpdate) AddUserWatchers(u ...*User) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oru.AddUserWatcherIDs(ids...)
}

// AddMetricIDs adds the "metrics" edge to the OncallRosterMetrics entity by IDs.
func (oru *OncallRosterUpdate) AddMetricIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.AddMetricIDs(ids...)
	return oru
}

// AddMetrics adds the "metrics" edges to the OncallRosterMetrics entity.
func (oru *OncallRosterUpdate) AddMetrics(o ...*OncallRosterMetrics) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.AddMetricIDs(ids...)
}

// Mutation returns the OncallRosterMutation object of the builder.
func (oru *OncallRosterUpdate) Mutation() *OncallRosterMutation {
	return oru.mutation
}

// ClearSchedules clears all "schedules" edges to the OncallSchedule entity.
func (oru *OncallRosterUpdate) ClearSchedules() *OncallRosterUpdate {
	oru.mutation.ClearSchedules()
	return oru
}

// RemoveScheduleIDs removes the "schedules" edge to OncallSchedule entities by IDs.
func (oru *OncallRosterUpdate) RemoveScheduleIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.RemoveScheduleIDs(ids...)
	return oru
}

// RemoveSchedules removes "schedules" edges to OncallSchedule entities.
func (oru *OncallRosterUpdate) RemoveSchedules(o ...*OncallSchedule) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.RemoveScheduleIDs(ids...)
}

// ClearHandoverTemplate clears the "handover_template" edge to the OncallHandoverTemplate entity.
func (oru *OncallRosterUpdate) ClearHandoverTemplate() *OncallRosterUpdate {
	oru.mutation.ClearHandoverTemplate()
	return oru
}

// ClearAlerts clears all "alerts" edges to the Alert entity.
func (oru *OncallRosterUpdate) ClearAlerts() *OncallRosterUpdate {
	oru.mutation.ClearAlerts()
	return oru
}

// RemoveAlertIDs removes the "alerts" edge to Alert entities by IDs.
func (oru *OncallRosterUpdate) RemoveAlertIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.RemoveAlertIDs(ids...)
	return oru
}

// RemoveAlerts removes "alerts" edges to Alert entities.
func (oru *OncallRosterUpdate) RemoveAlerts(a ...*Alert) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return oru.RemoveAlertIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (oru *OncallRosterUpdate) ClearTeams() *OncallRosterUpdate {
	oru.mutation.ClearTeams()
	return oru
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (oru *OncallRosterUpdate) RemoveTeamIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.RemoveTeamIDs(ids...)
	return oru
}

// RemoveTeams removes "teams" edges to Team entities.
func (oru *OncallRosterUpdate) RemoveTeams(t ...*Team) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oru.RemoveTeamIDs(ids...)
}

// ClearShifts clears all "shifts" edges to the OncallShift entity.
func (oru *OncallRosterUpdate) ClearShifts() *OncallRosterUpdate {
	oru.mutation.ClearShifts()
	return oru
}

// RemoveShiftIDs removes the "shifts" edge to OncallShift entities by IDs.
func (oru *OncallRosterUpdate) RemoveShiftIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.RemoveShiftIDs(ids...)
	return oru
}

// RemoveShifts removes "shifts" edges to OncallShift entities.
func (oru *OncallRosterUpdate) RemoveShifts(o ...*OncallShift) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.RemoveShiftIDs(ids...)
}

// ClearUserWatchers clears all "user_watchers" edges to the User entity.
func (oru *OncallRosterUpdate) ClearUserWatchers() *OncallRosterUpdate {
	oru.mutation.ClearUserWatchers()
	return oru
}

// RemoveUserWatcherIDs removes the "user_watchers" edge to User entities by IDs.
func (oru *OncallRosterUpdate) RemoveUserWatcherIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.RemoveUserWatcherIDs(ids...)
	return oru
}

// RemoveUserWatchers removes "user_watchers" edges to User entities.
func (oru *OncallRosterUpdate) RemoveUserWatchers(u ...*User) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oru.RemoveUserWatcherIDs(ids...)
}

// ClearMetrics clears all "metrics" edges to the OncallRosterMetrics entity.
func (oru *OncallRosterUpdate) ClearMetrics() *OncallRosterUpdate {
	oru.mutation.ClearMetrics()
	return oru
}

// RemoveMetricIDs removes the "metrics" edge to OncallRosterMetrics entities by IDs.
func (oru *OncallRosterUpdate) RemoveMetricIDs(ids ...uuid.UUID) *OncallRosterUpdate {
	oru.mutation.RemoveMetricIDs(ids...)
	return oru
}

// RemoveMetrics removes "metrics" edges to OncallRosterMetrics entities.
func (oru *OncallRosterUpdate) RemoveMetrics(o ...*OncallRosterMetrics) *OncallRosterUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.RemoveMetricIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OncallRosterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OncallRosterUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OncallRosterUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OncallRosterUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oru *OncallRosterUpdate) check() error {
	if oru.mutation.TenantCleared() && len(oru.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallRoster.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oru *OncallRosterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallRosterUpdate {
	oru.modifiers = append(oru.modifiers, modifiers...)
	return oru
}

func (oru *OncallRosterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallroster.Table, oncallroster.Columns, sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.ArchiveTime(); ok {
		_spec.SetField(oncallroster.FieldArchiveTime, field.TypeTime, value)
	}
	if oru.mutation.ArchiveTimeCleared() {
		_spec.ClearField(oncallroster.FieldArchiveTime, field.TypeTime)
	}
	if value, ok := oru.mutation.Name(); ok {
		_spec.SetField(oncallroster.FieldName, field.TypeString, value)
	}
	if value, ok := oru.mutation.Slug(); ok {
		_spec.SetField(oncallroster.FieldSlug, field.TypeString, value)
	}
	if value, ok := oru.mutation.ProviderID(); ok {
		_spec.SetField(oncallroster.FieldProviderID, field.TypeString, value)
	}
	if value, ok := oru.mutation.Timezone(); ok {
		_spec.SetField(oncallroster.FieldTimezone, field.TypeString, value)
	}
	if oru.mutation.TimezoneCleared() {
		_spec.ClearField(oncallroster.FieldTimezone, field.TypeString)
	}
	if value, ok := oru.mutation.ChatHandle(); ok {
		_spec.SetField(oncallroster.FieldChatHandle, field.TypeString, value)
	}
	if oru.mutation.ChatHandleCleared() {
		_spec.ClearField(oncallroster.FieldChatHandle, field.TypeString)
	}
	if value, ok := oru.mutation.ChatChannelID(); ok {
		_spec.SetField(oncallroster.FieldChatChannelID, field.TypeString, value)
	}
	if oru.mutation.ChatChannelIDCleared() {
		_spec.ClearField(oncallroster.FieldChatChannelID, field.TypeString)
	}
	if oru.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.SchedulesTable,
			Columns: []string{oncallroster.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.RemovedSchedulesIDs(); len(nodes) > 0 && !oru.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.SchedulesTable,
			Columns: []string{oncallroster.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.SchedulesTable,
			Columns: []string{oncallroster.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.HandoverTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallroster.HandoverTemplateTable,
			Columns: []string{oncallroster.HandoverTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallhandovertemplate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.HandoverTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallroster.HandoverTemplateTable,
			Columns: []string{oncallroster.HandoverTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallhandovertemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.AlertsTable,
			Columns: []string{oncallroster.AlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.RemovedAlertsIDs(); len(nodes) > 0 && !oru.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.AlertsTable,
			Columns: []string{oncallroster.AlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.AlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.AlertsTable,
			Columns: []string{oncallroster.AlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.TeamsTable,
			Columns: oncallroster.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !oru.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.TeamsTable,
			Columns: oncallroster.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.TeamsTable,
			Columns: oncallroster.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.ShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.ShiftsTable,
			Columns: []string{oncallroster.ShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.RemovedShiftsIDs(); len(nodes) > 0 && !oru.mutation.ShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.ShiftsTable,
			Columns: []string{oncallroster.ShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.ShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.ShiftsTable,
			Columns: []string{oncallroster.ShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.UserWatchersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.UserWatchersTable,
			Columns: oncallroster.UserWatchersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.RemovedUserWatchersIDs(); len(nodes) > 0 && !oru.mutation.UserWatchersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.UserWatchersTable,
			Columns: oncallroster.UserWatchersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.UserWatchersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.UserWatchersTable,
			Columns: oncallroster.UserWatchersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.MetricsTable,
			Columns: []string{oncallroster.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.RemovedMetricsIDs(); len(nodes) > 0 && !oru.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.MetricsTable,
			Columns: []string{oncallroster.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.MetricsTable,
			Columns: []string{oncallroster.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallroster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OncallRosterUpdateOne is the builder for updating a single OncallRoster entity.
type OncallRosterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallRosterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetArchiveTime sets the "archive_time" field.
func (oruo *OncallRosterUpdateOne) SetArchiveTime(t time.Time) *OncallRosterUpdateOne {
	oruo.mutation.SetArchiveTime(t)
	return oruo
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (oruo *OncallRosterUpdateOne) SetNillableArchiveTime(t *time.Time) *OncallRosterUpdateOne {
	if t != nil {
		oruo.SetArchiveTime(*t)
	}
	return oruo
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (oruo *OncallRosterUpdateOne) ClearArchiveTime() *OncallRosterUpdateOne {
	oruo.mutation.ClearArchiveTime()
	return oruo
}

// SetName sets the "name" field.
func (oruo *OncallRosterUpdateOne) SetName(s string) *OncallRosterUpdateOne {
	oruo.mutation.SetName(s)
	return oruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oruo *OncallRosterUpdateOne) SetNillableName(s *string) *OncallRosterUpdateOne {
	if s != nil {
		oruo.SetName(*s)
	}
	return oruo
}

// SetSlug sets the "slug" field.
func (oruo *OncallRosterUpdateOne) SetSlug(s string) *OncallRosterUpdateOne {
	oruo.mutation.SetSlug(s)
	return oruo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (oruo *OncallRosterUpdateOne) SetNillableSlug(s *string) *OncallRosterUpdateOne {
	if s != nil {
		oruo.SetSlug(*s)
	}
	return oruo
}

// SetProviderID sets the "provider_id" field.
func (oruo *OncallRosterUpdateOne) SetProviderID(s string) *OncallRosterUpdateOne {
	oruo.mutation.SetProviderID(s)
	return oruo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (oruo *OncallRosterUpdateOne) SetNillableProviderID(s *string) *OncallRosterUpdateOne {
	if s != nil {
		oruo.SetProviderID(*s)
	}
	return oruo
}

// SetTimezone sets the "timezone" field.
func (oruo *OncallRosterUpdateOne) SetTimezone(s string) *OncallRosterUpdateOne {
	oruo.mutation.SetTimezone(s)
	return oruo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (oruo *OncallRosterUpdateOne) SetNillableTimezone(s *string) *OncallRosterUpdateOne {
	if s != nil {
		oruo.SetTimezone(*s)
	}
	return oruo
}

// ClearTimezone clears the value of the "timezone" field.
func (oruo *OncallRosterUpdateOne) ClearTimezone() *OncallRosterUpdateOne {
	oruo.mutation.ClearTimezone()
	return oruo
}

// SetChatHandle sets the "chat_handle" field.
func (oruo *OncallRosterUpdateOne) SetChatHandle(s string) *OncallRosterUpdateOne {
	oruo.mutation.SetChatHandle(s)
	return oruo
}

// SetNillableChatHandle sets the "chat_handle" field if the given value is not nil.
func (oruo *OncallRosterUpdateOne) SetNillableChatHandle(s *string) *OncallRosterUpdateOne {
	if s != nil {
		oruo.SetChatHandle(*s)
	}
	return oruo
}

// ClearChatHandle clears the value of the "chat_handle" field.
func (oruo *OncallRosterUpdateOne) ClearChatHandle() *OncallRosterUpdateOne {
	oruo.mutation.ClearChatHandle()
	return oruo
}

// SetChatChannelID sets the "chat_channel_id" field.
func (oruo *OncallRosterUpdateOne) SetChatChannelID(s string) *OncallRosterUpdateOne {
	oruo.mutation.SetChatChannelID(s)
	return oruo
}

// SetNillableChatChannelID sets the "chat_channel_id" field if the given value is not nil.
func (oruo *OncallRosterUpdateOne) SetNillableChatChannelID(s *string) *OncallRosterUpdateOne {
	if s != nil {
		oruo.SetChatChannelID(*s)
	}
	return oruo
}

// ClearChatChannelID clears the value of the "chat_channel_id" field.
func (oruo *OncallRosterUpdateOne) ClearChatChannelID() *OncallRosterUpdateOne {
	oruo.mutation.ClearChatChannelID()
	return oruo
}

// SetHandoverTemplateID sets the "handover_template_id" field.
func (oruo *OncallRosterUpdateOne) SetHandoverTemplateID(u uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.SetHandoverTemplateID(u)
	return oruo
}

// SetNillableHandoverTemplateID sets the "handover_template_id" field if the given value is not nil.
func (oruo *OncallRosterUpdateOne) SetNillableHandoverTemplateID(u *uuid.UUID) *OncallRosterUpdateOne {
	if u != nil {
		oruo.SetHandoverTemplateID(*u)
	}
	return oruo
}

// ClearHandoverTemplateID clears the value of the "handover_template_id" field.
func (oruo *OncallRosterUpdateOne) ClearHandoverTemplateID() *OncallRosterUpdateOne {
	oruo.mutation.ClearHandoverTemplateID()
	return oruo
}

// AddScheduleIDs adds the "schedules" edge to the OncallSchedule entity by IDs.
func (oruo *OncallRosterUpdateOne) AddScheduleIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.AddScheduleIDs(ids...)
	return oruo
}

// AddSchedules adds the "schedules" edges to the OncallSchedule entity.
func (oruo *OncallRosterUpdateOne) AddSchedules(o ...*OncallSchedule) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.AddScheduleIDs(ids...)
}

// SetHandoverTemplate sets the "handover_template" edge to the OncallHandoverTemplate entity.
func (oruo *OncallRosterUpdateOne) SetHandoverTemplate(o *OncallHandoverTemplate) *OncallRosterUpdateOne {
	return oruo.SetHandoverTemplateID(o.ID)
}

// AddAlertIDs adds the "alerts" edge to the Alert entity by IDs.
func (oruo *OncallRosterUpdateOne) AddAlertIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.AddAlertIDs(ids...)
	return oruo
}

// AddAlerts adds the "alerts" edges to the Alert entity.
func (oruo *OncallRosterUpdateOne) AddAlerts(a ...*Alert) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return oruo.AddAlertIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (oruo *OncallRosterUpdateOne) AddTeamIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.AddTeamIDs(ids...)
	return oruo
}

// AddTeams adds the "teams" edges to the Team entity.
func (oruo *OncallRosterUpdateOne) AddTeams(t ...*Team) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oruo.AddTeamIDs(ids...)
}

// AddShiftIDs adds the "shifts" edge to the OncallShift entity by IDs.
func (oruo *OncallRosterUpdateOne) AddShiftIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.AddShiftIDs(ids...)
	return oruo
}

// AddShifts adds the "shifts" edges to the OncallShift entity.
func (oruo *OncallRosterUpdateOne) AddShifts(o ...*OncallShift) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.AddShiftIDs(ids...)
}

// AddUserWatcherIDs adds the "user_watchers" edge to the User entity by IDs.
func (oruo *OncallRosterUpdateOne) AddUserWatcherIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.AddUserWatcherIDs(ids...)
	return oruo
}

// AddUserWatchers adds the "user_watchers" edges to the User entity.
func (oruo *OncallRosterUpdateOne) AddUserWatchers(u ...*User) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oruo.AddUserWatcherIDs(ids...)
}

// AddMetricIDs adds the "metrics" edge to the OncallRosterMetrics entity by IDs.
func (oruo *OncallRosterUpdateOne) AddMetricIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.AddMetricIDs(ids...)
	return oruo
}

// AddMetrics adds the "metrics" edges to the OncallRosterMetrics entity.
func (oruo *OncallRosterUpdateOne) AddMetrics(o ...*OncallRosterMetrics) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.AddMetricIDs(ids...)
}

// Mutation returns the OncallRosterMutation object of the builder.
func (oruo *OncallRosterUpdateOne) Mutation() *OncallRosterMutation {
	return oruo.mutation
}

// ClearSchedules clears all "schedules" edges to the OncallSchedule entity.
func (oruo *OncallRosterUpdateOne) ClearSchedules() *OncallRosterUpdateOne {
	oruo.mutation.ClearSchedules()
	return oruo
}

// RemoveScheduleIDs removes the "schedules" edge to OncallSchedule entities by IDs.
func (oruo *OncallRosterUpdateOne) RemoveScheduleIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.RemoveScheduleIDs(ids...)
	return oruo
}

// RemoveSchedules removes "schedules" edges to OncallSchedule entities.
func (oruo *OncallRosterUpdateOne) RemoveSchedules(o ...*OncallSchedule) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.RemoveScheduleIDs(ids...)
}

// ClearHandoverTemplate clears the "handover_template" edge to the OncallHandoverTemplate entity.
func (oruo *OncallRosterUpdateOne) ClearHandoverTemplate() *OncallRosterUpdateOne {
	oruo.mutation.ClearHandoverTemplate()
	return oruo
}

// ClearAlerts clears all "alerts" edges to the Alert entity.
func (oruo *OncallRosterUpdateOne) ClearAlerts() *OncallRosterUpdateOne {
	oruo.mutation.ClearAlerts()
	return oruo
}

// RemoveAlertIDs removes the "alerts" edge to Alert entities by IDs.
func (oruo *OncallRosterUpdateOne) RemoveAlertIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.RemoveAlertIDs(ids...)
	return oruo
}

// RemoveAlerts removes "alerts" edges to Alert entities.
func (oruo *OncallRosterUpdateOne) RemoveAlerts(a ...*Alert) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return oruo.RemoveAlertIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (oruo *OncallRosterUpdateOne) ClearTeams() *OncallRosterUpdateOne {
	oruo.mutation.ClearTeams()
	return oruo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (oruo *OncallRosterUpdateOne) RemoveTeamIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.RemoveTeamIDs(ids...)
	return oruo
}

// RemoveTeams removes "teams" edges to Team entities.
func (oruo *OncallRosterUpdateOne) RemoveTeams(t ...*Team) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oruo.RemoveTeamIDs(ids...)
}

// ClearShifts clears all "shifts" edges to the OncallShift entity.
func (oruo *OncallRosterUpdateOne) ClearShifts() *OncallRosterUpdateOne {
	oruo.mutation.ClearShifts()
	return oruo
}

// RemoveShiftIDs removes the "shifts" edge to OncallShift entities by IDs.
func (oruo *OncallRosterUpdateOne) RemoveShiftIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.RemoveShiftIDs(ids...)
	return oruo
}

// RemoveShifts removes "shifts" edges to OncallShift entities.
func (oruo *OncallRosterUpdateOne) RemoveShifts(o ...*OncallShift) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.RemoveShiftIDs(ids...)
}

// ClearUserWatchers clears all "user_watchers" edges to the User entity.
func (oruo *OncallRosterUpdateOne) ClearUserWatchers() *OncallRosterUpdateOne {
	oruo.mutation.ClearUserWatchers()
	return oruo
}

// RemoveUserWatcherIDs removes the "user_watchers" edge to User entities by IDs.
func (oruo *OncallRosterUpdateOne) RemoveUserWatcherIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.RemoveUserWatcherIDs(ids...)
	return oruo
}

// RemoveUserWatchers removes "user_watchers" edges to User entities.
func (oruo *OncallRosterUpdateOne) RemoveUserWatchers(u ...*User) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oruo.RemoveUserWatcherIDs(ids...)
}

// ClearMetrics clears all "metrics" edges to the OncallRosterMetrics entity.
func (oruo *OncallRosterUpdateOne) ClearMetrics() *OncallRosterUpdateOne {
	oruo.mutation.ClearMetrics()
	return oruo
}

// RemoveMetricIDs removes the "metrics" edge to OncallRosterMetrics entities by IDs.
func (oruo *OncallRosterUpdateOne) RemoveMetricIDs(ids ...uuid.UUID) *OncallRosterUpdateOne {
	oruo.mutation.RemoveMetricIDs(ids...)
	return oruo
}

// RemoveMetrics removes "metrics" edges to OncallRosterMetrics entities.
func (oruo *OncallRosterUpdateOne) RemoveMetrics(o ...*OncallRosterMetrics) *OncallRosterUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.RemoveMetricIDs(ids...)
}

// Where appends a list predicates to the OncallRosterUpdate builder.
func (oruo *OncallRosterUpdateOne) Where(ps ...predicate.OncallRoster) *OncallRosterUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OncallRosterUpdateOne) Select(field string, fields ...string) *OncallRosterUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OncallRoster entity.
func (oruo *OncallRosterUpdateOne) Save(ctx context.Context) (*OncallRoster, error) {
	return withHooks(ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OncallRosterUpdateOne) SaveX(ctx context.Context) *OncallRoster {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OncallRosterUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OncallRosterUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oruo *OncallRosterUpdateOne) check() error {
	if oruo.mutation.TenantCleared() && len(oruo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallRoster.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oruo *OncallRosterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallRosterUpdateOne {
	oruo.modifiers = append(oruo.modifiers, modifiers...)
	return oruo
}

func (oruo *OncallRosterUpdateOne) sqlSave(ctx context.Context) (_node *OncallRoster, err error) {
	if err := oruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallroster.Table, oncallroster.Columns, sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallRoster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallroster.FieldID)
		for _, f := range fields {
			if !oncallroster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallroster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.ArchiveTime(); ok {
		_spec.SetField(oncallroster.FieldArchiveTime, field.TypeTime, value)
	}
	if oruo.mutation.ArchiveTimeCleared() {
		_spec.ClearField(oncallroster.FieldArchiveTime, field.TypeTime)
	}
	if value, ok := oruo.mutation.Name(); ok {
		_spec.SetField(oncallroster.FieldName, field.TypeString, value)
	}
	if value, ok := oruo.mutation.Slug(); ok {
		_spec.SetField(oncallroster.FieldSlug, field.TypeString, value)
	}
	if value, ok := oruo.mutation.ProviderID(); ok {
		_spec.SetField(oncallroster.FieldProviderID, field.TypeString, value)
	}
	if value, ok := oruo.mutation.Timezone(); ok {
		_spec.SetField(oncallroster.FieldTimezone, field.TypeString, value)
	}
	if oruo.mutation.TimezoneCleared() {
		_spec.ClearField(oncallroster.FieldTimezone, field.TypeString)
	}
	if value, ok := oruo.mutation.ChatHandle(); ok {
		_spec.SetField(oncallroster.FieldChatHandle, field.TypeString, value)
	}
	if oruo.mutation.ChatHandleCleared() {
		_spec.ClearField(oncallroster.FieldChatHandle, field.TypeString)
	}
	if value, ok := oruo.mutation.ChatChannelID(); ok {
		_spec.SetField(oncallroster.FieldChatChannelID, field.TypeString, value)
	}
	if oruo.mutation.ChatChannelIDCleared() {
		_spec.ClearField(oncallroster.FieldChatChannelID, field.TypeString)
	}
	if oruo.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.SchedulesTable,
			Columns: []string{oncallroster.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.RemovedSchedulesIDs(); len(nodes) > 0 && !oruo.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.SchedulesTable,
			Columns: []string{oncallroster.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.SchedulesTable,
			Columns: []string{oncallroster.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.HandoverTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallroster.HandoverTemplateTable,
			Columns: []string{oncallroster.HandoverTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallhandovertemplate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.HandoverTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallroster.HandoverTemplateTable,
			Columns: []string{oncallroster.HandoverTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallhandovertemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.AlertsTable,
			Columns: []string{oncallroster.AlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.RemovedAlertsIDs(); len(nodes) > 0 && !oruo.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.AlertsTable,
			Columns: []string{oncallroster.AlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.AlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.AlertsTable,
			Columns: []string{oncallroster.AlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.TeamsTable,
			Columns: oncallroster.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !oruo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.TeamsTable,
			Columns: oncallroster.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.TeamsTable,
			Columns: oncallroster.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.ShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.ShiftsTable,
			Columns: []string{oncallroster.ShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.RemovedShiftsIDs(); len(nodes) > 0 && !oruo.mutation.ShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.ShiftsTable,
			Columns: []string{oncallroster.ShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.ShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.ShiftsTable,
			Columns: []string{oncallroster.ShiftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.UserWatchersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.UserWatchersTable,
			Columns: oncallroster.UserWatchersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.RemovedUserWatchersIDs(); len(nodes) > 0 && !oruo.mutation.UserWatchersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.UserWatchersTable,
			Columns: oncallroster.UserWatchersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.UserWatchersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.UserWatchersTable,
			Columns: oncallroster.UserWatchersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.MetricsTable,
			Columns: []string{oncallroster.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.RemovedMetricsIDs(); len(nodes) > 0 && !oruo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.MetricsTable,
			Columns: []string{oncallroster.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.MetricsTable,
			Columns: []string{oncallroster.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oruo.modifiers...)
	_node = &OncallRoster{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallroster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
