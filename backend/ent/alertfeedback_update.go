// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alertfeedback"
	"github.com/rezible/rezible/ent/alertinstance"
	"github.com/rezible/rezible/ent/predicate"
)

// AlertFeedbackUpdate is the builder for updating AlertFeedback entities.
type AlertFeedbackUpdate struct {
	config
	hooks     []Hook
	mutation  *AlertFeedbackMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AlertFeedbackUpdate builder.
func (afu *AlertFeedbackUpdate) Where(ps ...predicate.AlertFeedback) *AlertFeedbackUpdate {
	afu.mutation.Where(ps...)
	return afu
}

// SetAlertInstanceID sets the "alert_instance_id" field.
func (afu *AlertFeedbackUpdate) SetAlertInstanceID(u uuid.UUID) *AlertFeedbackUpdate {
	afu.mutation.SetAlertInstanceID(u)
	return afu
}

// SetNillableAlertInstanceID sets the "alert_instance_id" field if the given value is not nil.
func (afu *AlertFeedbackUpdate) SetNillableAlertInstanceID(u *uuid.UUID) *AlertFeedbackUpdate {
	if u != nil {
		afu.SetAlertInstanceID(*u)
	}
	return afu
}

// SetActionable sets the "actionable" field.
func (afu *AlertFeedbackUpdate) SetActionable(b bool) *AlertFeedbackUpdate {
	afu.mutation.SetActionable(b)
	return afu
}

// SetNillableActionable sets the "actionable" field if the given value is not nil.
func (afu *AlertFeedbackUpdate) SetNillableActionable(b *bool) *AlertFeedbackUpdate {
	if b != nil {
		afu.SetActionable(*b)
	}
	return afu
}

// SetAccurate sets the "accurate" field.
func (afu *AlertFeedbackUpdate) SetAccurate(a alertfeedback.Accurate) *AlertFeedbackUpdate {
	afu.mutation.SetAccurate(a)
	return afu
}

// SetNillableAccurate sets the "accurate" field if the given value is not nil.
func (afu *AlertFeedbackUpdate) SetNillableAccurate(a *alertfeedback.Accurate) *AlertFeedbackUpdate {
	if a != nil {
		afu.SetAccurate(*a)
	}
	return afu
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (afu *AlertFeedbackUpdate) SetDocumentationAvailable(b bool) *AlertFeedbackUpdate {
	afu.mutation.SetDocumentationAvailable(b)
	return afu
}

// SetNillableDocumentationAvailable sets the "documentation_available" field if the given value is not nil.
func (afu *AlertFeedbackUpdate) SetNillableDocumentationAvailable(b *bool) *AlertFeedbackUpdate {
	if b != nil {
		afu.SetDocumentationAvailable(*b)
	}
	return afu
}

// SetDocumentationNeedsUpdate sets the "documentation_needs_update" field.
func (afu *AlertFeedbackUpdate) SetDocumentationNeedsUpdate(b bool) *AlertFeedbackUpdate {
	afu.mutation.SetDocumentationNeedsUpdate(b)
	return afu
}

// SetNillableDocumentationNeedsUpdate sets the "documentation_needs_update" field if the given value is not nil.
func (afu *AlertFeedbackUpdate) SetNillableDocumentationNeedsUpdate(b *bool) *AlertFeedbackUpdate {
	if b != nil {
		afu.SetDocumentationNeedsUpdate(*b)
	}
	return afu
}

// SetAlertInstance sets the "alert_instance" edge to the AlertInstance entity.
func (afu *AlertFeedbackUpdate) SetAlertInstance(a *AlertInstance) *AlertFeedbackUpdate {
	return afu.SetAlertInstanceID(a.ID)
}

// Mutation returns the AlertFeedbackMutation object of the builder.
func (afu *AlertFeedbackUpdate) Mutation() *AlertFeedbackMutation {
	return afu.mutation
}

// ClearAlertInstance clears the "alert_instance" edge to the AlertInstance entity.
func (afu *AlertFeedbackUpdate) ClearAlertInstance() *AlertFeedbackUpdate {
	afu.mutation.ClearAlertInstance()
	return afu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (afu *AlertFeedbackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, afu.sqlSave, afu.mutation, afu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (afu *AlertFeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := afu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (afu *AlertFeedbackUpdate) Exec(ctx context.Context) error {
	_, err := afu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afu *AlertFeedbackUpdate) ExecX(ctx context.Context) {
	if err := afu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (afu *AlertFeedbackUpdate) check() error {
	if v, ok := afu.mutation.Accurate(); ok {
		if err := alertfeedback.AccurateValidator(v); err != nil {
			return &ValidationError{Name: "accurate", err: fmt.Errorf(`ent: validator failed for field "AlertFeedback.accurate": %w`, err)}
		}
	}
	if afu.mutation.TenantCleared() && len(afu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AlertFeedback.tenant"`)
	}
	if afu.mutation.AlertInstanceCleared() && len(afu.mutation.AlertInstanceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AlertFeedback.alert_instance"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (afu *AlertFeedbackUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlertFeedbackUpdate {
	afu.modifiers = append(afu.modifiers, modifiers...)
	return afu
}

func (afu *AlertFeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := afu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(alertfeedback.Table, alertfeedback.Columns, sqlgraph.NewFieldSpec(alertfeedback.FieldID, field.TypeUUID))
	if ps := afu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := afu.mutation.Actionable(); ok {
		_spec.SetField(alertfeedback.FieldActionable, field.TypeBool, value)
	}
	if value, ok := afu.mutation.Accurate(); ok {
		_spec.SetField(alertfeedback.FieldAccurate, field.TypeEnum, value)
	}
	if value, ok := afu.mutation.DocumentationAvailable(); ok {
		_spec.SetField(alertfeedback.FieldDocumentationAvailable, field.TypeBool, value)
	}
	if value, ok := afu.mutation.DocumentationNeedsUpdate(); ok {
		_spec.SetField(alertfeedback.FieldDocumentationNeedsUpdate, field.TypeBool, value)
	}
	if afu.mutation.AlertInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertfeedback.AlertInstanceTable,
			Columns: []string{alertfeedback.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afu.mutation.AlertInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertfeedback.AlertInstanceTable,
			Columns: []string{alertfeedback.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(afu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, afu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alertfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	afu.mutation.done = true
	return n, nil
}

// AlertFeedbackUpdateOne is the builder for updating a single AlertFeedback entity.
type AlertFeedbackUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AlertFeedbackMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAlertInstanceID sets the "alert_instance_id" field.
func (afuo *AlertFeedbackUpdateOne) SetAlertInstanceID(u uuid.UUID) *AlertFeedbackUpdateOne {
	afuo.mutation.SetAlertInstanceID(u)
	return afuo
}

// SetNillableAlertInstanceID sets the "alert_instance_id" field if the given value is not nil.
func (afuo *AlertFeedbackUpdateOne) SetNillableAlertInstanceID(u *uuid.UUID) *AlertFeedbackUpdateOne {
	if u != nil {
		afuo.SetAlertInstanceID(*u)
	}
	return afuo
}

// SetActionable sets the "actionable" field.
func (afuo *AlertFeedbackUpdateOne) SetActionable(b bool) *AlertFeedbackUpdateOne {
	afuo.mutation.SetActionable(b)
	return afuo
}

// SetNillableActionable sets the "actionable" field if the given value is not nil.
func (afuo *AlertFeedbackUpdateOne) SetNillableActionable(b *bool) *AlertFeedbackUpdateOne {
	if b != nil {
		afuo.SetActionable(*b)
	}
	return afuo
}

// SetAccurate sets the "accurate" field.
func (afuo *AlertFeedbackUpdateOne) SetAccurate(a alertfeedback.Accurate) *AlertFeedbackUpdateOne {
	afuo.mutation.SetAccurate(a)
	return afuo
}

// SetNillableAccurate sets the "accurate" field if the given value is not nil.
func (afuo *AlertFeedbackUpdateOne) SetNillableAccurate(a *alertfeedback.Accurate) *AlertFeedbackUpdateOne {
	if a != nil {
		afuo.SetAccurate(*a)
	}
	return afuo
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (afuo *AlertFeedbackUpdateOne) SetDocumentationAvailable(b bool) *AlertFeedbackUpdateOne {
	afuo.mutation.SetDocumentationAvailable(b)
	return afuo
}

// SetNillableDocumentationAvailable sets the "documentation_available" field if the given value is not nil.
func (afuo *AlertFeedbackUpdateOne) SetNillableDocumentationAvailable(b *bool) *AlertFeedbackUpdateOne {
	if b != nil {
		afuo.SetDocumentationAvailable(*b)
	}
	return afuo
}

// SetDocumentationNeedsUpdate sets the "documentation_needs_update" field.
func (afuo *AlertFeedbackUpdateOne) SetDocumentationNeedsUpdate(b bool) *AlertFeedbackUpdateOne {
	afuo.mutation.SetDocumentationNeedsUpdate(b)
	return afuo
}

// SetNillableDocumentationNeedsUpdate sets the "documentation_needs_update" field if the given value is not nil.
func (afuo *AlertFeedbackUpdateOne) SetNillableDocumentationNeedsUpdate(b *bool) *AlertFeedbackUpdateOne {
	if b != nil {
		afuo.SetDocumentationNeedsUpdate(*b)
	}
	return afuo
}

// SetAlertInstance sets the "alert_instance" edge to the AlertInstance entity.
func (afuo *AlertFeedbackUpdateOne) SetAlertInstance(a *AlertInstance) *AlertFeedbackUpdateOne {
	return afuo.SetAlertInstanceID(a.ID)
}

// Mutation returns the AlertFeedbackMutation object of the builder.
func (afuo *AlertFeedbackUpdateOne) Mutation() *AlertFeedbackMutation {
	return afuo.mutation
}

// ClearAlertInstance clears the "alert_instance" edge to the AlertInstance entity.
func (afuo *AlertFeedbackUpdateOne) ClearAlertInstance() *AlertFeedbackUpdateOne {
	afuo.mutation.ClearAlertInstance()
	return afuo
}

// Where appends a list predicates to the AlertFeedbackUpdate builder.
func (afuo *AlertFeedbackUpdateOne) Where(ps ...predicate.AlertFeedback) *AlertFeedbackUpdateOne {
	afuo.mutation.Where(ps...)
	return afuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (afuo *AlertFeedbackUpdateOne) Select(field string, fields ...string) *AlertFeedbackUpdateOne {
	afuo.fields = append([]string{field}, fields...)
	return afuo
}

// Save executes the query and returns the updated AlertFeedback entity.
func (afuo *AlertFeedbackUpdateOne) Save(ctx context.Context) (*AlertFeedback, error) {
	return withHooks(ctx, afuo.sqlSave, afuo.mutation, afuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (afuo *AlertFeedbackUpdateOne) SaveX(ctx context.Context) *AlertFeedback {
	node, err := afuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (afuo *AlertFeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := afuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afuo *AlertFeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := afuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (afuo *AlertFeedbackUpdateOne) check() error {
	if v, ok := afuo.mutation.Accurate(); ok {
		if err := alertfeedback.AccurateValidator(v); err != nil {
			return &ValidationError{Name: "accurate", err: fmt.Errorf(`ent: validator failed for field "AlertFeedback.accurate": %w`, err)}
		}
	}
	if afuo.mutation.TenantCleared() && len(afuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AlertFeedback.tenant"`)
	}
	if afuo.mutation.AlertInstanceCleared() && len(afuo.mutation.AlertInstanceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AlertFeedback.alert_instance"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (afuo *AlertFeedbackUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlertFeedbackUpdateOne {
	afuo.modifiers = append(afuo.modifiers, modifiers...)
	return afuo
}

func (afuo *AlertFeedbackUpdateOne) sqlSave(ctx context.Context) (_node *AlertFeedback, err error) {
	if err := afuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(alertfeedback.Table, alertfeedback.Columns, sqlgraph.NewFieldSpec(alertfeedback.FieldID, field.TypeUUID))
	id, ok := afuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AlertFeedback.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := afuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alertfeedback.FieldID)
		for _, f := range fields {
			if !alertfeedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != alertfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := afuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := afuo.mutation.Actionable(); ok {
		_spec.SetField(alertfeedback.FieldActionable, field.TypeBool, value)
	}
	if value, ok := afuo.mutation.Accurate(); ok {
		_spec.SetField(alertfeedback.FieldAccurate, field.TypeEnum, value)
	}
	if value, ok := afuo.mutation.DocumentationAvailable(); ok {
		_spec.SetField(alertfeedback.FieldDocumentationAvailable, field.TypeBool, value)
	}
	if value, ok := afuo.mutation.DocumentationNeedsUpdate(); ok {
		_spec.SetField(alertfeedback.FieldDocumentationNeedsUpdate, field.TypeBool, value)
	}
	if afuo.mutation.AlertInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertfeedback.AlertInstanceTable,
			Columns: []string{alertfeedback.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afuo.mutation.AlertInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertfeedback.AlertInstanceTable,
			Columns: []string{alertfeedback.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(afuo.modifiers...)
	_node = &AlertFeedback{config: afuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, afuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alertfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	afuo.mutation.done = true
	return _node, nil
}
