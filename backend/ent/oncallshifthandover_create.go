// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/eventannotation"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/oncallshifthandover"
	"github.com/rezible/rezible/ent/tenant"
)

// OncallShiftHandoverCreate is the builder for creating a OncallShiftHandover entity.
type OncallShiftHandoverCreate struct {
	config
	mutation *OncallShiftHandoverMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (oshc *OncallShiftHandoverCreate) SetTenantID(i int) *OncallShiftHandoverCreate {
	oshc.mutation.SetTenantID(i)
	return oshc
}

// SetShiftID sets the "shift_id" field.
func (oshc *OncallShiftHandoverCreate) SetShiftID(u uuid.UUID) *OncallShiftHandoverCreate {
	oshc.mutation.SetShiftID(u)
	return oshc
}

// SetCreatedAt sets the "created_at" field.
func (oshc *OncallShiftHandoverCreate) SetCreatedAt(t time.Time) *OncallShiftHandoverCreate {
	oshc.mutation.SetCreatedAt(t)
	return oshc
}

// SetReminderSent sets the "reminder_sent" field.
func (oshc *OncallShiftHandoverCreate) SetReminderSent(b bool) *OncallShiftHandoverCreate {
	oshc.mutation.SetReminderSent(b)
	return oshc
}

// SetNillableReminderSent sets the "reminder_sent" field if the given value is not nil.
func (oshc *OncallShiftHandoverCreate) SetNillableReminderSent(b *bool) *OncallShiftHandoverCreate {
	if b != nil {
		oshc.SetReminderSent(*b)
	}
	return oshc
}

// SetUpdatedAt sets the "updated_at" field.
func (oshc *OncallShiftHandoverCreate) SetUpdatedAt(t time.Time) *OncallShiftHandoverCreate {
	oshc.mutation.SetUpdatedAt(t)
	return oshc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oshc *OncallShiftHandoverCreate) SetNillableUpdatedAt(t *time.Time) *OncallShiftHandoverCreate {
	if t != nil {
		oshc.SetUpdatedAt(*t)
	}
	return oshc
}

// SetSentAt sets the "sent_at" field.
func (oshc *OncallShiftHandoverCreate) SetSentAt(t time.Time) *OncallShiftHandoverCreate {
	oshc.mutation.SetSentAt(t)
	return oshc
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (oshc *OncallShiftHandoverCreate) SetNillableSentAt(t *time.Time) *OncallShiftHandoverCreate {
	if t != nil {
		oshc.SetSentAt(*t)
	}
	return oshc
}

// SetContents sets the "contents" field.
func (oshc *OncallShiftHandoverCreate) SetContents(b []byte) *OncallShiftHandoverCreate {
	oshc.mutation.SetContents(b)
	return oshc
}

// SetID sets the "id" field.
func (oshc *OncallShiftHandoverCreate) SetID(u uuid.UUID) *OncallShiftHandoverCreate {
	oshc.mutation.SetID(u)
	return oshc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oshc *OncallShiftHandoverCreate) SetNillableID(u *uuid.UUID) *OncallShiftHandoverCreate {
	if u != nil {
		oshc.SetID(*u)
	}
	return oshc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (oshc *OncallShiftHandoverCreate) SetTenant(t *Tenant) *OncallShiftHandoverCreate {
	return oshc.SetTenantID(t.ID)
}

// SetShift sets the "shift" edge to the OncallShift entity.
func (oshc *OncallShiftHandoverCreate) SetShift(o *OncallShift) *OncallShiftHandoverCreate {
	return oshc.SetShiftID(o.ID)
}

// AddPinnedAnnotationIDs adds the "pinned_annotations" edge to the EventAnnotation entity by IDs.
func (oshc *OncallShiftHandoverCreate) AddPinnedAnnotationIDs(ids ...uuid.UUID) *OncallShiftHandoverCreate {
	oshc.mutation.AddPinnedAnnotationIDs(ids...)
	return oshc
}

// AddPinnedAnnotations adds the "pinned_annotations" edges to the EventAnnotation entity.
func (oshc *OncallShiftHandoverCreate) AddPinnedAnnotations(e ...*EventAnnotation) *OncallShiftHandoverCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oshc.AddPinnedAnnotationIDs(ids...)
}

// Mutation returns the OncallShiftHandoverMutation object of the builder.
func (oshc *OncallShiftHandoverCreate) Mutation() *OncallShiftHandoverMutation {
	return oshc.mutation
}

// Save creates the OncallShiftHandover in the database.
func (oshc *OncallShiftHandoverCreate) Save(ctx context.Context) (*OncallShiftHandover, error) {
	if err := oshc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, oshc.sqlSave, oshc.mutation, oshc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oshc *OncallShiftHandoverCreate) SaveX(ctx context.Context) *OncallShiftHandover {
	v, err := oshc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oshc *OncallShiftHandoverCreate) Exec(ctx context.Context) error {
	_, err := oshc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oshc *OncallShiftHandoverCreate) ExecX(ctx context.Context) {
	if err := oshc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oshc *OncallShiftHandoverCreate) defaults() error {
	if _, ok := oshc.mutation.ReminderSent(); !ok {
		v := oncallshifthandover.DefaultReminderSent
		oshc.mutation.SetReminderSent(v)
	}
	if _, ok := oshc.mutation.UpdatedAt(); !ok {
		if oncallshifthandover.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized oncallshifthandover.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := oncallshifthandover.DefaultUpdatedAt()
		oshc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oshc.mutation.ID(); !ok {
		if oncallshifthandover.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized oncallshifthandover.DefaultID (forgotten import ent/runtime?)")
		}
		v := oncallshifthandover.DefaultID()
		oshc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oshc *OncallShiftHandoverCreate) check() error {
	if _, ok := oshc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OncallShiftHandover.tenant_id"`)}
	}
	if _, ok := oshc.mutation.ShiftID(); !ok {
		return &ValidationError{Name: "shift_id", err: errors.New(`ent: missing required field "OncallShiftHandover.shift_id"`)}
	}
	if _, ok := oshc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OncallShiftHandover.created_at"`)}
	}
	if _, ok := oshc.mutation.ReminderSent(); !ok {
		return &ValidationError{Name: "reminder_sent", err: errors.New(`ent: missing required field "OncallShiftHandover.reminder_sent"`)}
	}
	if _, ok := oshc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OncallShiftHandover.updated_at"`)}
	}
	if _, ok := oshc.mutation.Contents(); !ok {
		return &ValidationError{Name: "contents", err: errors.New(`ent: missing required field "OncallShiftHandover.contents"`)}
	}
	if len(oshc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "OncallShiftHandover.tenant"`)}
	}
	if len(oshc.mutation.ShiftIDs()) == 0 {
		return &ValidationError{Name: "shift", err: errors.New(`ent: missing required edge "OncallShiftHandover.shift"`)}
	}
	return nil
}

func (oshc *OncallShiftHandoverCreate) sqlSave(ctx context.Context) (*OncallShiftHandover, error) {
	if err := oshc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oshc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oshc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oshc.mutation.id = &_node.ID
	oshc.mutation.done = true
	return _node, nil
}

func (oshc *OncallShiftHandoverCreate) createSpec() (*OncallShiftHandover, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallShiftHandover{config: oshc.config}
		_spec = sqlgraph.NewCreateSpec(oncallshifthandover.Table, sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oshc.conflict
	if id, ok := oshc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oshc.mutation.CreatedAt(); ok {
		_spec.SetField(oncallshifthandover.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oshc.mutation.ReminderSent(); ok {
		_spec.SetField(oncallshifthandover.FieldReminderSent, field.TypeBool, value)
		_node.ReminderSent = value
	}
	if value, ok := oshc.mutation.UpdatedAt(); ok {
		_spec.SetField(oncallshifthandover.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oshc.mutation.SentAt(); ok {
		_spec.SetField(oncallshifthandover.FieldSentAt, field.TypeTime, value)
		_node.SentAt = value
	}
	if value, ok := oshc.mutation.Contents(); ok {
		_spec.SetField(oncallshifthandover.FieldContents, field.TypeBytes, value)
		_node.Contents = value
	}
	if nodes := oshc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallshifthandover.TenantTable,
			Columns: []string{oncallshifthandover.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oshc.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallshifthandover.ShiftTable,
			Columns: []string{oncallshifthandover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShiftID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oshc.mutation.PinnedAnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallshifthandover.PinnedAnnotationsTable,
			Columns: oncallshifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallShiftHandover.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallShiftHandoverUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (oshc *OncallShiftHandoverCreate) OnConflict(opts ...sql.ConflictOption) *OncallShiftHandoverUpsertOne {
	oshc.conflict = opts
	return &OncallShiftHandoverUpsertOne{
		create: oshc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallShiftHandover.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oshc *OncallShiftHandoverCreate) OnConflictColumns(columns ...string) *OncallShiftHandoverUpsertOne {
	oshc.conflict = append(oshc.conflict, sql.ConflictColumns(columns...))
	return &OncallShiftHandoverUpsertOne{
		create: oshc,
	}
}

type (
	// OncallShiftHandoverUpsertOne is the builder for "upsert"-ing
	//  one OncallShiftHandover node.
	OncallShiftHandoverUpsertOne struct {
		create *OncallShiftHandoverCreate
	}

	// OncallShiftHandoverUpsert is the "OnConflict" setter.
	OncallShiftHandoverUpsert struct {
		*sql.UpdateSet
	}
)

// SetShiftID sets the "shift_id" field.
func (u *OncallShiftHandoverUpsert) SetShiftID(v uuid.UUID) *OncallShiftHandoverUpsert {
	u.Set(oncallshifthandover.FieldShiftID, v)
	return u
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsert) UpdateShiftID() *OncallShiftHandoverUpsert {
	u.SetExcluded(oncallshifthandover.FieldShiftID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallShiftHandoverUpsert) SetCreatedAt(v time.Time) *OncallShiftHandoverUpsert {
	u.Set(oncallshifthandover.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsert) UpdateCreatedAt() *OncallShiftHandoverUpsert {
	u.SetExcluded(oncallshifthandover.FieldCreatedAt)
	return u
}

// SetReminderSent sets the "reminder_sent" field.
func (u *OncallShiftHandoverUpsert) SetReminderSent(v bool) *OncallShiftHandoverUpsert {
	u.Set(oncallshifthandover.FieldReminderSent, v)
	return u
}

// UpdateReminderSent sets the "reminder_sent" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsert) UpdateReminderSent() *OncallShiftHandoverUpsert {
	u.SetExcluded(oncallshifthandover.FieldReminderSent)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OncallShiftHandoverUpsert) SetUpdatedAt(v time.Time) *OncallShiftHandoverUpsert {
	u.Set(oncallshifthandover.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsert) UpdateUpdatedAt() *OncallShiftHandoverUpsert {
	u.SetExcluded(oncallshifthandover.FieldUpdatedAt)
	return u
}

// SetSentAt sets the "sent_at" field.
func (u *OncallShiftHandoverUpsert) SetSentAt(v time.Time) *OncallShiftHandoverUpsert {
	u.Set(oncallshifthandover.FieldSentAt, v)
	return u
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsert) UpdateSentAt() *OncallShiftHandoverUpsert {
	u.SetExcluded(oncallshifthandover.FieldSentAt)
	return u
}

// ClearSentAt clears the value of the "sent_at" field.
func (u *OncallShiftHandoverUpsert) ClearSentAt() *OncallShiftHandoverUpsert {
	u.SetNull(oncallshifthandover.FieldSentAt)
	return u
}

// SetContents sets the "contents" field.
func (u *OncallShiftHandoverUpsert) SetContents(v []byte) *OncallShiftHandoverUpsert {
	u.Set(oncallshifthandover.FieldContents, v)
	return u
}

// UpdateContents sets the "contents" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsert) UpdateContents() *OncallShiftHandoverUpsert {
	u.SetExcluded(oncallshifthandover.FieldContents)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallShiftHandover.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallshifthandover.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallShiftHandoverUpsertOne) UpdateNewValues() *OncallShiftHandoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallshifthandover.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(oncallshifthandover.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallShiftHandover.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallShiftHandoverUpsertOne) Ignore() *OncallShiftHandoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallShiftHandoverUpsertOne) DoNothing() *OncallShiftHandoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallShiftHandoverCreate.OnConflict
// documentation for more info.
func (u *OncallShiftHandoverUpsertOne) Update(set func(*OncallShiftHandoverUpsert)) *OncallShiftHandoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallShiftHandoverUpsert{UpdateSet: update})
	}))
	return u
}

// SetShiftID sets the "shift_id" field.
func (u *OncallShiftHandoverUpsertOne) SetShiftID(v uuid.UUID) *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetShiftID(v)
	})
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertOne) UpdateShiftID() *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateShiftID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallShiftHandoverUpsertOne) SetCreatedAt(v time.Time) *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertOne) UpdateCreatedAt() *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetReminderSent sets the "reminder_sent" field.
func (u *OncallShiftHandoverUpsertOne) SetReminderSent(v bool) *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetReminderSent(v)
	})
}

// UpdateReminderSent sets the "reminder_sent" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertOne) UpdateReminderSent() *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateReminderSent()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OncallShiftHandoverUpsertOne) SetUpdatedAt(v time.Time) *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertOne) UpdateUpdatedAt() *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSentAt sets the "sent_at" field.
func (u *OncallShiftHandoverUpsertOne) SetSentAt(v time.Time) *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetSentAt(v)
	})
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertOne) UpdateSentAt() *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateSentAt()
	})
}

// ClearSentAt clears the value of the "sent_at" field.
func (u *OncallShiftHandoverUpsertOne) ClearSentAt() *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.ClearSentAt()
	})
}

// SetContents sets the "contents" field.
func (u *OncallShiftHandoverUpsertOne) SetContents(v []byte) *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetContents(v)
	})
}

// UpdateContents sets the "contents" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertOne) UpdateContents() *OncallShiftHandoverUpsertOne {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateContents()
	})
}

// Exec executes the query.
func (u *OncallShiftHandoverUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallShiftHandoverCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallShiftHandoverUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallShiftHandoverUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallShiftHandoverUpsertOne.ID is not supported by MySQL driver. Use OncallShiftHandoverUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallShiftHandoverUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallShiftHandoverCreateBulk is the builder for creating many OncallShiftHandover entities in bulk.
type OncallShiftHandoverCreateBulk struct {
	config
	err      error
	builders []*OncallShiftHandoverCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallShiftHandover entities in the database.
func (oshcb *OncallShiftHandoverCreateBulk) Save(ctx context.Context) ([]*OncallShiftHandover, error) {
	if oshcb.err != nil {
		return nil, oshcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oshcb.builders))
	nodes := make([]*OncallShiftHandover, len(oshcb.builders))
	mutators := make([]Mutator, len(oshcb.builders))
	for i := range oshcb.builders {
		func(i int, root context.Context) {
			builder := oshcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallShiftHandoverMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oshcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oshcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oshcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oshcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oshcb *OncallShiftHandoverCreateBulk) SaveX(ctx context.Context) []*OncallShiftHandover {
	v, err := oshcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oshcb *OncallShiftHandoverCreateBulk) Exec(ctx context.Context) error {
	_, err := oshcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oshcb *OncallShiftHandoverCreateBulk) ExecX(ctx context.Context) {
	if err := oshcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallShiftHandover.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallShiftHandoverUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (oshcb *OncallShiftHandoverCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallShiftHandoverUpsertBulk {
	oshcb.conflict = opts
	return &OncallShiftHandoverUpsertBulk{
		create: oshcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallShiftHandover.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oshcb *OncallShiftHandoverCreateBulk) OnConflictColumns(columns ...string) *OncallShiftHandoverUpsertBulk {
	oshcb.conflict = append(oshcb.conflict, sql.ConflictColumns(columns...))
	return &OncallShiftHandoverUpsertBulk{
		create: oshcb,
	}
}

// OncallShiftHandoverUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallShiftHandover nodes.
type OncallShiftHandoverUpsertBulk struct {
	create *OncallShiftHandoverCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallShiftHandover.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallshifthandover.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallShiftHandoverUpsertBulk) UpdateNewValues() *OncallShiftHandoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallshifthandover.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(oncallshifthandover.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallShiftHandover.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallShiftHandoverUpsertBulk) Ignore() *OncallShiftHandoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallShiftHandoverUpsertBulk) DoNothing() *OncallShiftHandoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallShiftHandoverCreateBulk.OnConflict
// documentation for more info.
func (u *OncallShiftHandoverUpsertBulk) Update(set func(*OncallShiftHandoverUpsert)) *OncallShiftHandoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallShiftHandoverUpsert{UpdateSet: update})
	}))
	return u
}

// SetShiftID sets the "shift_id" field.
func (u *OncallShiftHandoverUpsertBulk) SetShiftID(v uuid.UUID) *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetShiftID(v)
	})
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertBulk) UpdateShiftID() *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateShiftID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallShiftHandoverUpsertBulk) SetCreatedAt(v time.Time) *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertBulk) UpdateCreatedAt() *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetReminderSent sets the "reminder_sent" field.
func (u *OncallShiftHandoverUpsertBulk) SetReminderSent(v bool) *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetReminderSent(v)
	})
}

// UpdateReminderSent sets the "reminder_sent" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertBulk) UpdateReminderSent() *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateReminderSent()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OncallShiftHandoverUpsertBulk) SetUpdatedAt(v time.Time) *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertBulk) UpdateUpdatedAt() *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSentAt sets the "sent_at" field.
func (u *OncallShiftHandoverUpsertBulk) SetSentAt(v time.Time) *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetSentAt(v)
	})
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertBulk) UpdateSentAt() *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateSentAt()
	})
}

// ClearSentAt clears the value of the "sent_at" field.
func (u *OncallShiftHandoverUpsertBulk) ClearSentAt() *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.ClearSentAt()
	})
}

// SetContents sets the "contents" field.
func (u *OncallShiftHandoverUpsertBulk) SetContents(v []byte) *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.SetContents(v)
	})
}

// UpdateContents sets the "contents" field to the value that was provided on create.
func (u *OncallShiftHandoverUpsertBulk) UpdateContents() *OncallShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallShiftHandoverUpsert) {
		s.UpdateContents()
	})
}

// Exec executes the query.
func (u *OncallShiftHandoverUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallShiftHandoverCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallShiftHandoverCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallShiftHandoverUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
