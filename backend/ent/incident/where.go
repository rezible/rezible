// Code generated by ent, DO NOT EDIT.

package incident

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldTenantID, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldSlug, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldTitle, v))
}

// Private applies equality check predicate on the "private" field. It's identical to PrivateEQ.
func Private(v bool) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldPrivate, v))
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldSummary, v))
}

// OpenedAt applies equality check predicate on the "opened_at" field. It's identical to OpenedAtEQ.
func OpenedAt(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldOpenedAt, v))
}

// ModifiedAt applies equality check predicate on the "modified_at" field. It's identical to ModifiedAtEQ.
func ModifiedAt(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldModifiedAt, v))
}

// ClosedAt applies equality check predicate on the "closed_at" field. It's identical to ClosedAtEQ.
func ClosedAt(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldClosedAt, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldProviderID, v))
}

// ChatChannelID applies equality check predicate on the "chat_channel_id" field. It's identical to ChatChannelIDEQ.
func ChatChannelID(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldChatChannelID, v))
}

// SeverityID applies equality check predicate on the "severity_id" field. It's identical to SeverityIDEQ.
func SeverityID(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldSeverityID, v))
}

// TypeID applies equality check predicate on the "type_id" field. It's identical to TypeIDEQ.
func TypeID(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldTypeID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldTenantID, vs...))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldSlug, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldTitle, v))
}

// PrivateEQ applies the EQ predicate on the "private" field.
func PrivateEQ(v bool) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldPrivate, v))
}

// PrivateNEQ applies the NEQ predicate on the "private" field.
func PrivateNEQ(v bool) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldPrivate, v))
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldSummary, v))
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldSummary, v))
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldSummary, vs...))
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldSummary, vs...))
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldSummary, v))
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldSummary, v))
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldSummary, v))
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldSummary, v))
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldSummary, v))
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldSummary, v))
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldSummary, v))
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldSummary))
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldSummary))
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldSummary, v))
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldSummary, v))
}

// OpenedAtEQ applies the EQ predicate on the "opened_at" field.
func OpenedAtEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldOpenedAt, v))
}

// OpenedAtNEQ applies the NEQ predicate on the "opened_at" field.
func OpenedAtNEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldOpenedAt, v))
}

// OpenedAtIn applies the In predicate on the "opened_at" field.
func OpenedAtIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldOpenedAt, vs...))
}

// OpenedAtNotIn applies the NotIn predicate on the "opened_at" field.
func OpenedAtNotIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldOpenedAt, vs...))
}

// OpenedAtGT applies the GT predicate on the "opened_at" field.
func OpenedAtGT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldOpenedAt, v))
}

// OpenedAtGTE applies the GTE predicate on the "opened_at" field.
func OpenedAtGTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldOpenedAt, v))
}

// OpenedAtLT applies the LT predicate on the "opened_at" field.
func OpenedAtLT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldOpenedAt, v))
}

// OpenedAtLTE applies the LTE predicate on the "opened_at" field.
func OpenedAtLTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldOpenedAt, v))
}

// ModifiedAtEQ applies the EQ predicate on the "modified_at" field.
func ModifiedAtEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldModifiedAt, v))
}

// ModifiedAtNEQ applies the NEQ predicate on the "modified_at" field.
func ModifiedAtNEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldModifiedAt, v))
}

// ModifiedAtIn applies the In predicate on the "modified_at" field.
func ModifiedAtIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldModifiedAt, vs...))
}

// ModifiedAtNotIn applies the NotIn predicate on the "modified_at" field.
func ModifiedAtNotIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldModifiedAt, vs...))
}

// ModifiedAtGT applies the GT predicate on the "modified_at" field.
func ModifiedAtGT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldModifiedAt, v))
}

// ModifiedAtGTE applies the GTE predicate on the "modified_at" field.
func ModifiedAtGTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldModifiedAt, v))
}

// ModifiedAtLT applies the LT predicate on the "modified_at" field.
func ModifiedAtLT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldModifiedAt, v))
}

// ModifiedAtLTE applies the LTE predicate on the "modified_at" field.
func ModifiedAtLTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldModifiedAt, v))
}

// ModifiedAtIsNil applies the IsNil predicate on the "modified_at" field.
func ModifiedAtIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldModifiedAt))
}

// ModifiedAtNotNil applies the NotNil predicate on the "modified_at" field.
func ModifiedAtNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldModifiedAt))
}

// ClosedAtEQ applies the EQ predicate on the "closed_at" field.
func ClosedAtEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldClosedAt, v))
}

// ClosedAtNEQ applies the NEQ predicate on the "closed_at" field.
func ClosedAtNEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldClosedAt, v))
}

// ClosedAtIn applies the In predicate on the "closed_at" field.
func ClosedAtIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldClosedAt, vs...))
}

// ClosedAtNotIn applies the NotIn predicate on the "closed_at" field.
func ClosedAtNotIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldClosedAt, vs...))
}

// ClosedAtGT applies the GT predicate on the "closed_at" field.
func ClosedAtGT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldClosedAt, v))
}

// ClosedAtGTE applies the GTE predicate on the "closed_at" field.
func ClosedAtGTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldClosedAt, v))
}

// ClosedAtLT applies the LT predicate on the "closed_at" field.
func ClosedAtLT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldClosedAt, v))
}

// ClosedAtLTE applies the LTE predicate on the "closed_at" field.
func ClosedAtLTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldClosedAt, v))
}

// ClosedAtIsNil applies the IsNil predicate on the "closed_at" field.
func ClosedAtIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldClosedAt))
}

// ClosedAtNotNil applies the NotNil predicate on the "closed_at" field.
func ClosedAtNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldClosedAt))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderIDGT applies the GT predicate on the "provider_id" field.
func ProviderIDGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldProviderID, v))
}

// ProviderIDGTE applies the GTE predicate on the "provider_id" field.
func ProviderIDGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldProviderID, v))
}

// ProviderIDLT applies the LT predicate on the "provider_id" field.
func ProviderIDLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldProviderID, v))
}

// ProviderIDLTE applies the LTE predicate on the "provider_id" field.
func ProviderIDLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldProviderID, v))
}

// ProviderIDContains applies the Contains predicate on the "provider_id" field.
func ProviderIDContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldProviderID, v))
}

// ProviderIDHasPrefix applies the HasPrefix predicate on the "provider_id" field.
func ProviderIDHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldProviderID, v))
}

// ProviderIDHasSuffix applies the HasSuffix predicate on the "provider_id" field.
func ProviderIDHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldProviderID, v))
}

// ProviderIDIsNil applies the IsNil predicate on the "provider_id" field.
func ProviderIDIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldProviderID))
}

// ProviderIDNotNil applies the NotNil predicate on the "provider_id" field.
func ProviderIDNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldProviderID))
}

// ProviderIDEqualFold applies the EqualFold predicate on the "provider_id" field.
func ProviderIDEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldProviderID, v))
}

// ProviderIDContainsFold applies the ContainsFold predicate on the "provider_id" field.
func ProviderIDContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldProviderID, v))
}

// ChatChannelIDEQ applies the EQ predicate on the "chat_channel_id" field.
func ChatChannelIDEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldChatChannelID, v))
}

// ChatChannelIDNEQ applies the NEQ predicate on the "chat_channel_id" field.
func ChatChannelIDNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldChatChannelID, v))
}

// ChatChannelIDIn applies the In predicate on the "chat_channel_id" field.
func ChatChannelIDIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldChatChannelID, vs...))
}

// ChatChannelIDNotIn applies the NotIn predicate on the "chat_channel_id" field.
func ChatChannelIDNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldChatChannelID, vs...))
}

// ChatChannelIDGT applies the GT predicate on the "chat_channel_id" field.
func ChatChannelIDGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldChatChannelID, v))
}

// ChatChannelIDGTE applies the GTE predicate on the "chat_channel_id" field.
func ChatChannelIDGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldChatChannelID, v))
}

// ChatChannelIDLT applies the LT predicate on the "chat_channel_id" field.
func ChatChannelIDLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldChatChannelID, v))
}

// ChatChannelIDLTE applies the LTE predicate on the "chat_channel_id" field.
func ChatChannelIDLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldChatChannelID, v))
}

// ChatChannelIDContains applies the Contains predicate on the "chat_channel_id" field.
func ChatChannelIDContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldChatChannelID, v))
}

// ChatChannelIDHasPrefix applies the HasPrefix predicate on the "chat_channel_id" field.
func ChatChannelIDHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldChatChannelID, v))
}

// ChatChannelIDHasSuffix applies the HasSuffix predicate on the "chat_channel_id" field.
func ChatChannelIDHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldChatChannelID, v))
}

// ChatChannelIDIsNil applies the IsNil predicate on the "chat_channel_id" field.
func ChatChannelIDIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldChatChannelID))
}

// ChatChannelIDNotNil applies the NotNil predicate on the "chat_channel_id" field.
func ChatChannelIDNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldChatChannelID))
}

// ChatChannelIDEqualFold applies the EqualFold predicate on the "chat_channel_id" field.
func ChatChannelIDEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldChatChannelID, v))
}

// ChatChannelIDContainsFold applies the ContainsFold predicate on the "chat_channel_id" field.
func ChatChannelIDContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldChatChannelID, v))
}

// SeverityIDEQ applies the EQ predicate on the "severity_id" field.
func SeverityIDEQ(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldSeverityID, v))
}

// SeverityIDNEQ applies the NEQ predicate on the "severity_id" field.
func SeverityIDNEQ(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldSeverityID, v))
}

// SeverityIDIn applies the In predicate on the "severity_id" field.
func SeverityIDIn(vs ...uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldSeverityID, vs...))
}

// SeverityIDNotIn applies the NotIn predicate on the "severity_id" field.
func SeverityIDNotIn(vs ...uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldSeverityID, vs...))
}

// SeverityIDIsNil applies the IsNil predicate on the "severity_id" field.
func SeverityIDIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldSeverityID))
}

// SeverityIDNotNil applies the NotNil predicate on the "severity_id" field.
func SeverityIDNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldSeverityID))
}

// TypeIDEQ applies the EQ predicate on the "type_id" field.
func TypeIDEQ(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldTypeID, v))
}

// TypeIDNEQ applies the NEQ predicate on the "type_id" field.
func TypeIDNEQ(v uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldTypeID, v))
}

// TypeIDIn applies the In predicate on the "type_id" field.
func TypeIDIn(vs ...uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldTypeID, vs...))
}

// TypeIDNotIn applies the NotIn predicate on the "type_id" field.
func TypeIDNotIn(vs ...uuid.UUID) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldTypeID, vs...))
}

// TypeIDIsNil applies the IsNil predicate on the "type_id" field.
func TypeIDIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldTypeID))
}

// TypeIDNotNil applies the NotNil predicate on the "type_id" field.
func TypeIDNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldTypeID))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSeverity applies the HasEdge predicate on the "severity" edge.
func HasSeverity() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SeverityTable, SeverityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeverityWith applies the HasEdge predicate on the "severity" edge with a given conditions (other predicates).
func HasSeverityWith(preds ...predicate.IncidentSeverity) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newSeverityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasType applies the HasEdge predicate on the "type" edge.
func HasType() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TypeTable, TypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTypeWith applies the HasEdge predicate on the "type" edge with a given conditions (other predicates).
func HasTypeWith(preds ...predicate.IncidentType) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMilestones applies the HasEdge predicate on the "milestones" edge.
func HasMilestones() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MilestonesTable, MilestonesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMilestonesWith applies the HasEdge predicate on the "milestones" edge with a given conditions (other predicates).
func HasMilestonesWith(preds ...predicate.IncidentMilestone) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newMilestonesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.IncidentEvent) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRetrospective applies the HasEdge predicate on the "retrospective" edge.
func HasRetrospective() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RetrospectiveTable, RetrospectiveColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRetrospectiveWith applies the HasEdge predicate on the "retrospective" edge with a given conditions (other predicates).
func HasRetrospectiveWith(preds ...predicate.Retrospective) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newRetrospectiveStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleAssignments applies the HasEdge predicate on the "role_assignments" edge.
func HasRoleAssignments() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RoleAssignmentsTable, RoleAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleAssignmentsWith applies the HasEdge predicate on the "role_assignments" edge with a given conditions (other predicates).
func HasRoleAssignmentsWith(preds ...predicate.IncidentRoleAssignment) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newRoleAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLinkedIncidents applies the HasEdge predicate on the "linked_incidents" edge.
func HasLinkedIncidents() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LinkedIncidentsTable, LinkedIncidentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLinkedIncidentsWith applies the HasEdge predicate on the "linked_incidents" edge with a given conditions (other predicates).
func HasLinkedIncidentsWith(preds ...predicate.Incident) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newLinkedIncidentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFieldSelections applies the HasEdge predicate on the "field_selections" edge.
func HasFieldSelections() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FieldSelectionsTable, FieldSelectionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFieldSelectionsWith applies the HasEdge predicate on the "field_selections" edge with a given conditions (other predicates).
func HasFieldSelectionsWith(preds ...predicate.IncidentFieldOption) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newFieldSelectionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTagAssignments applies the HasEdge predicate on the "tag_assignments" edge.
func HasTagAssignments() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagAssignmentsTable, TagAssignmentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagAssignmentsWith applies the HasEdge predicate on the "tag_assignments" edge with a given conditions (other predicates).
func HasTagAssignmentsWith(preds ...predicate.IncidentTag) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newTagAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDebriefs applies the HasEdge predicate on the "debriefs" edge.
func HasDebriefs() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DebriefsTable, DebriefsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDebriefsWith applies the HasEdge predicate on the "debriefs" edge with a given conditions (other predicates).
func HasDebriefsWith(preds ...predicate.IncidentDebrief) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newDebriefsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviewSessions applies the HasEdge predicate on the "review_sessions" edge.
func HasReviewSessions() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReviewSessionsTable, ReviewSessionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewSessionsWith applies the HasEdge predicate on the "review_sessions" edge with a given conditions (other predicates).
func HasReviewSessionsWith(preds ...predicate.MeetingSession) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newReviewSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserRoles applies the HasEdge predicate on the "user_roles" edge.
func HasUserRoles() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserRolesTable, UserRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRolesWith applies the HasEdge predicate on the "user_roles" edge with a given conditions (other predicates).
func HasUserRolesWith(preds ...predicate.IncidentRoleAssignment) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newUserRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidentLinks applies the HasEdge predicate on the "incident_links" edge.
func HasIncidentLinks() predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, IncidentLinksTable, IncidentLinksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentLinksWith applies the HasEdge predicate on the "incident_links" edge with a given conditions (other predicates).
func HasIncidentLinksWith(preds ...predicate.IncidentLink) predicate.Incident {
	return predicate.Incident(func(s *sql.Selector) {
		step := newIncidentLinksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Incident) predicate.Incident {
	return predicate.Incident(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Incident) predicate.Incident {
	return predicate.Incident(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Incident) predicate.Incident {
	return predicate.Incident(sql.NotPredicates(p))
}
