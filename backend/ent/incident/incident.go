// Code generated by ent, DO NOT EDIT.

package incident

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the incident type in the database.
	Label = "incident"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldPrivate holds the string denoting the private field in the database.
	FieldPrivate = "private"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// FieldOpenedAt holds the string denoting the opened_at field in the database.
	FieldOpenedAt = "opened_at"
	// FieldModifiedAt holds the string denoting the modified_at field in the database.
	FieldModifiedAt = "modified_at"
	// FieldClosedAt holds the string denoting the closed_at field in the database.
	FieldClosedAt = "closed_at"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// FieldChatChannelID holds the string denoting the chat_channel_id field in the database.
	FieldChatChannelID = "chat_channel_id"
	// FieldSeverityID holds the string denoting the severity_id field in the database.
	FieldSeverityID = "severity_id"
	// FieldTypeID holds the string denoting the type_id field in the database.
	FieldTypeID = "type_id"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeSeverity holds the string denoting the severity edge name in mutations.
	EdgeSeverity = "severity"
	// EdgeType holds the string denoting the type edge name in mutations.
	EdgeType = "type"
	// EdgeMilestones holds the string denoting the milestones edge name in mutations.
	EdgeMilestones = "milestones"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeRetrospective holds the string denoting the retrospective edge name in mutations.
	EdgeRetrospective = "retrospective"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeRoleAssignments holds the string denoting the role_assignments edge name in mutations.
	EdgeRoleAssignments = "role_assignments"
	// EdgeLinkedIncidents holds the string denoting the linked_incidents edge name in mutations.
	EdgeLinkedIncidents = "linked_incidents"
	// EdgeFieldSelections holds the string denoting the field_selections edge name in mutations.
	EdgeFieldSelections = "field_selections"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeTagAssignments holds the string denoting the tag_assignments edge name in mutations.
	EdgeTagAssignments = "tag_assignments"
	// EdgeDebriefs holds the string denoting the debriefs edge name in mutations.
	EdgeDebriefs = "debriefs"
	// EdgeReviewSessions holds the string denoting the review_sessions edge name in mutations.
	EdgeReviewSessions = "review_sessions"
	// EdgeUserRoles holds the string denoting the user_roles edge name in mutations.
	EdgeUserRoles = "user_roles"
	// EdgeIncidentLinks holds the string denoting the incident_links edge name in mutations.
	EdgeIncidentLinks = "incident_links"
	// Table holds the table name of the incident in the database.
	Table = "incidents"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "incidents"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// SeverityTable is the table that holds the severity relation/edge.
	SeverityTable = "incidents"
	// SeverityInverseTable is the table name for the IncidentSeverity entity.
	// It exists in this package in order to avoid circular dependency with the "incidentseverity" package.
	SeverityInverseTable = "incident_severities"
	// SeverityColumn is the table column denoting the severity relation/edge.
	SeverityColumn = "severity_id"
	// TypeTable is the table that holds the type relation/edge.
	TypeTable = "incidents"
	// TypeInverseTable is the table name for the IncidentType entity.
	// It exists in this package in order to avoid circular dependency with the "incidenttype" package.
	TypeInverseTable = "incident_types"
	// TypeColumn is the table column denoting the type relation/edge.
	TypeColumn = "type_id"
	// MilestonesTable is the table that holds the milestones relation/edge.
	MilestonesTable = "incident_milestones"
	// MilestonesInverseTable is the table name for the IncidentMilestone entity.
	// It exists in this package in order to avoid circular dependency with the "incidentmilestone" package.
	MilestonesInverseTable = "incident_milestones"
	// MilestonesColumn is the table column denoting the milestones relation/edge.
	MilestonesColumn = "incident_id"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "incident_events"
	// EventsInverseTable is the table name for the IncidentEvent entity.
	// It exists in this package in order to avoid circular dependency with the "incidentevent" package.
	EventsInverseTable = "incident_events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "incident_id"
	// RetrospectiveTable is the table that holds the retrospective relation/edge.
	RetrospectiveTable = "retrospectives"
	// RetrospectiveInverseTable is the table name for the Retrospective entity.
	// It exists in this package in order to avoid circular dependency with the "retrospective" package.
	RetrospectiveInverseTable = "retrospectives"
	// RetrospectiveColumn is the table column denoting the retrospective relation/edge.
	RetrospectiveColumn = "incident_id"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "incident_role_assignments"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// RoleAssignmentsTable is the table that holds the role_assignments relation/edge.
	RoleAssignmentsTable = "incident_role_assignments"
	// RoleAssignmentsInverseTable is the table name for the IncidentRoleAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "incidentroleassignment" package.
	RoleAssignmentsInverseTable = "incident_role_assignments"
	// RoleAssignmentsColumn is the table column denoting the role_assignments relation/edge.
	RoleAssignmentsColumn = "incident_id"
	// LinkedIncidentsTable is the table that holds the linked_incidents relation/edge. The primary key declared below.
	LinkedIncidentsTable = "incident_links"
	// FieldSelectionsTable is the table that holds the field_selections relation/edge. The primary key declared below.
	FieldSelectionsTable = "incident_field_selections"
	// FieldSelectionsInverseTable is the table name for the IncidentFieldOption entity.
	// It exists in this package in order to avoid circular dependency with the "incidentfieldoption" package.
	FieldSelectionsInverseTable = "incident_field_options"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "incident_id"
	// TagAssignmentsTable is the table that holds the tag_assignments relation/edge. The primary key declared below.
	TagAssignmentsTable = "incident_tag_assignments"
	// TagAssignmentsInverseTable is the table name for the IncidentTag entity.
	// It exists in this package in order to avoid circular dependency with the "incidenttag" package.
	TagAssignmentsInverseTable = "incident_tags"
	// DebriefsTable is the table that holds the debriefs relation/edge.
	DebriefsTable = "incident_debriefs"
	// DebriefsInverseTable is the table name for the IncidentDebrief entity.
	// It exists in this package in order to avoid circular dependency with the "incidentdebrief" package.
	DebriefsInverseTable = "incident_debriefs"
	// DebriefsColumn is the table column denoting the debriefs relation/edge.
	DebriefsColumn = "incident_id"
	// ReviewSessionsTable is the table that holds the review_sessions relation/edge. The primary key declared below.
	ReviewSessionsTable = "incident_review_sessions"
	// ReviewSessionsInverseTable is the table name for the MeetingSession entity.
	// It exists in this package in order to avoid circular dependency with the "meetingsession" package.
	ReviewSessionsInverseTable = "meeting_sessions"
	// UserRolesTable is the table that holds the user_roles relation/edge.
	UserRolesTable = "incident_role_assignments"
	// UserRolesInverseTable is the table name for the IncidentRoleAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "incidentroleassignment" package.
	UserRolesInverseTable = "incident_role_assignments"
	// UserRolesColumn is the table column denoting the user_roles relation/edge.
	UserRolesColumn = "incident_id"
	// IncidentLinksTable is the table that holds the incident_links relation/edge.
	IncidentLinksTable = "incident_links"
	// IncidentLinksInverseTable is the table name for the IncidentLink entity.
	// It exists in this package in order to avoid circular dependency with the "incidentlink" package.
	IncidentLinksInverseTable = "incident_links"
	// IncidentLinksColumn is the table column denoting the incident_links relation/edge.
	IncidentLinksColumn = "incident_id"
)

// Columns holds all SQL columns for incident fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldSlug,
	FieldTitle,
	FieldPrivate,
	FieldSummary,
	FieldOpenedAt,
	FieldModifiedAt,
	FieldClosedAt,
	FieldProviderID,
	FieldChatChannelID,
	FieldSeverityID,
	FieldTypeID,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "incident_id"}
	// LinkedIncidentsPrimaryKey and LinkedIncidentsColumn2 are the table columns denoting the
	// primary key for the linked_incidents relation (M2M).
	LinkedIncidentsPrimaryKey = []string{"incident_id", "linked_incident_id"}
	// FieldSelectionsPrimaryKey and FieldSelectionsColumn2 are the table columns denoting the
	// primary key for the field_selections relation (M2M).
	FieldSelectionsPrimaryKey = []string{"incident_id", "incident_field_option_id"}
	// TagAssignmentsPrimaryKey and TagAssignmentsColumn2 are the table columns denoting the
	// primary key for the tag_assignments relation (M2M).
	TagAssignmentsPrimaryKey = []string{"incident_id", "incident_tag_id"}
	// ReviewSessionsPrimaryKey and ReviewSessionsColumn2 are the table columns denoting the
	// primary key for the review_sessions relation (M2M).
	ReviewSessionsPrimaryKey = []string{"incident_id", "meeting_session_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultPrivate holds the default value on creation for the "private" field.
	DefaultPrivate bool
	// DefaultOpenedAt holds the default value on creation for the "opened_at" field.
	DefaultOpenedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Incident queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByPrivate orders the results by the private field.
func ByPrivate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrivate, opts...).ToFunc()
}

// BySummary orders the results by the summary field.
func BySummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummary, opts...).ToFunc()
}

// ByOpenedAt orders the results by the opened_at field.
func ByOpenedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpenedAt, opts...).ToFunc()
}

// ByModifiedAt orders the results by the modified_at field.
func ByModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedAt, opts...).ToFunc()
}

// ByClosedAt orders the results by the closed_at field.
func ByClosedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosedAt, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// ByChatChannelID orders the results by the chat_channel_id field.
func ByChatChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChatChannelID, opts...).ToFunc()
}

// BySeverityID orders the results by the severity_id field.
func BySeverityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeverityID, opts...).ToFunc()
}

// ByTypeID orders the results by the type_id field.
func ByTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTypeID, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// BySeverityField orders the results by severity field.
func BySeverityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeverityStep(), sql.OrderByField(field, opts...))
	}
}

// ByTypeField orders the results by type field.
func ByTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByMilestonesCount orders the results by milestones count.
func ByMilestonesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMilestonesStep(), opts...)
	}
}

// ByMilestones orders the results by milestones terms.
func ByMilestones(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMilestonesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRetrospectiveField orders the results by retrospective field.
func ByRetrospectiveField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRetrospectiveStep(), sql.OrderByField(field, opts...))
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoleAssignmentsCount orders the results by role_assignments count.
func ByRoleAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoleAssignmentsStep(), opts...)
	}
}

// ByRoleAssignments orders the results by role_assignments terms.
func ByRoleAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLinkedIncidentsCount orders the results by linked_incidents count.
func ByLinkedIncidentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLinkedIncidentsStep(), opts...)
	}
}

// ByLinkedIncidents orders the results by linked_incidents terms.
func ByLinkedIncidents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLinkedIncidentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFieldSelectionsCount orders the results by field_selections count.
func ByFieldSelectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFieldSelectionsStep(), opts...)
	}
}

// ByFieldSelections orders the results by field_selections terms.
func ByFieldSelections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFieldSelectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTagAssignmentsCount orders the results by tag_assignments count.
func ByTagAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagAssignmentsStep(), opts...)
	}
}

// ByTagAssignments orders the results by tag_assignments terms.
func ByTagAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDebriefsCount orders the results by debriefs count.
func ByDebriefsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDebriefsStep(), opts...)
	}
}

// ByDebriefs orders the results by debriefs terms.
func ByDebriefs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDebriefsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReviewSessionsCount orders the results by review_sessions count.
func ByReviewSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReviewSessionsStep(), opts...)
	}
}

// ByReviewSessions orders the results by review_sessions terms.
func ByReviewSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserRolesCount orders the results by user_roles count.
func ByUserRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserRolesStep(), opts...)
	}
}

// ByUserRoles orders the results by user_roles terms.
func ByUserRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncidentLinksCount orders the results by incident_links count.
func ByIncidentLinksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentLinksStep(), opts...)
	}
}

// ByIncidentLinks orders the results by incident_links terms.
func ByIncidentLinks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentLinksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newSeverityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeverityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SeverityTable, SeverityColumn),
	)
}
func newTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TypeTable, TypeColumn),
	)
}
func newMilestonesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MilestonesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MilestonesTable, MilestonesColumn),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
	)
}
func newRetrospectiveStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RetrospectiveInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, RetrospectiveTable, RetrospectiveColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
	)
}
func newRoleAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleAssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RoleAssignmentsTable, RoleAssignmentsColumn),
	)
}
func newLinkedIncidentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, LinkedIncidentsTable, LinkedIncidentsPrimaryKey...),
	)
}
func newFieldSelectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FieldSelectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FieldSelectionsTable, FieldSelectionsPrimaryKey...),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
	)
}
func newTagAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagAssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TagAssignmentsTable, TagAssignmentsPrimaryKey...),
	)
}
func newDebriefsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DebriefsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DebriefsTable, DebriefsColumn),
	)
}
func newReviewSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ReviewSessionsTable, ReviewSessionsPrimaryKey...),
	)
}
func newUserRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserRolesTable, UserRolesColumn),
	)
}
func newIncidentLinksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentLinksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, IncidentLinksTable, IncidentLinksColumn),
	)
}
