// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/eventannotation"
	"github.com/rezible/rezible/ent/oncallshifthandover"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/user"
)

// EventAnnotationUpdate is the builder for updating EventAnnotation entities.
type EventAnnotationUpdate struct {
	config
	hooks     []Hook
	mutation  *EventAnnotationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventAnnotationUpdate builder.
func (eau *EventAnnotationUpdate) Where(ps ...predicate.EventAnnotation) *EventAnnotationUpdate {
	eau.mutation.Where(ps...)
	return eau
}

// SetEventID sets the "event_id" field.
func (eau *EventAnnotationUpdate) SetEventID(u uuid.UUID) *EventAnnotationUpdate {
	eau.mutation.SetEventID(u)
	return eau
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (eau *EventAnnotationUpdate) SetNillableEventID(u *uuid.UUID) *EventAnnotationUpdate {
	if u != nil {
		eau.SetEventID(*u)
	}
	return eau
}

// SetCreatorID sets the "creator_id" field.
func (eau *EventAnnotationUpdate) SetCreatorID(u uuid.UUID) *EventAnnotationUpdate {
	eau.mutation.SetCreatorID(u)
	return eau
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (eau *EventAnnotationUpdate) SetNillableCreatorID(u *uuid.UUID) *EventAnnotationUpdate {
	if u != nil {
		eau.SetCreatorID(*u)
	}
	return eau
}

// SetCreatedAt sets the "created_at" field.
func (eau *EventAnnotationUpdate) SetCreatedAt(t time.Time) *EventAnnotationUpdate {
	eau.mutation.SetCreatedAt(t)
	return eau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eau *EventAnnotationUpdate) SetNillableCreatedAt(t *time.Time) *EventAnnotationUpdate {
	if t != nil {
		eau.SetCreatedAt(*t)
	}
	return eau
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (eau *EventAnnotationUpdate) SetMinutesOccupied(i int) *EventAnnotationUpdate {
	eau.mutation.ResetMinutesOccupied()
	eau.mutation.SetMinutesOccupied(i)
	return eau
}

// SetNillableMinutesOccupied sets the "minutes_occupied" field if the given value is not nil.
func (eau *EventAnnotationUpdate) SetNillableMinutesOccupied(i *int) *EventAnnotationUpdate {
	if i != nil {
		eau.SetMinutesOccupied(*i)
	}
	return eau
}

// AddMinutesOccupied adds i to the "minutes_occupied" field.
func (eau *EventAnnotationUpdate) AddMinutesOccupied(i int) *EventAnnotationUpdate {
	eau.mutation.AddMinutesOccupied(i)
	return eau
}

// SetNotes sets the "notes" field.
func (eau *EventAnnotationUpdate) SetNotes(s string) *EventAnnotationUpdate {
	eau.mutation.SetNotes(s)
	return eau
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (eau *EventAnnotationUpdate) SetNillableNotes(s *string) *EventAnnotationUpdate {
	if s != nil {
		eau.SetNotes(*s)
	}
	return eau
}

// SetTags sets the "tags" field.
func (eau *EventAnnotationUpdate) SetTags(s []string) *EventAnnotationUpdate {
	eau.mutation.SetTags(s)
	return eau
}

// AppendTags appends s to the "tags" field.
func (eau *EventAnnotationUpdate) AppendTags(s []string) *EventAnnotationUpdate {
	eau.mutation.AppendTags(s)
	return eau
}

// SetEvent sets the "event" edge to the Event entity.
func (eau *EventAnnotationUpdate) SetEvent(e *Event) *EventAnnotationUpdate {
	return eau.SetEventID(e.ID)
}

// SetCreator sets the "creator" edge to the User entity.
func (eau *EventAnnotationUpdate) SetCreator(u *User) *EventAnnotationUpdate {
	return eau.SetCreatorID(u.ID)
}

// AddHandoverIDs adds the "handovers" edge to the OncallShiftHandover entity by IDs.
func (eau *EventAnnotationUpdate) AddHandoverIDs(ids ...uuid.UUID) *EventAnnotationUpdate {
	eau.mutation.AddHandoverIDs(ids...)
	return eau
}

// AddHandovers adds the "handovers" edges to the OncallShiftHandover entity.
func (eau *EventAnnotationUpdate) AddHandovers(o ...*OncallShiftHandover) *EventAnnotationUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eau.AddHandoverIDs(ids...)
}

// Mutation returns the EventAnnotationMutation object of the builder.
func (eau *EventAnnotationUpdate) Mutation() *EventAnnotationMutation {
	return eau.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (eau *EventAnnotationUpdate) ClearEvent() *EventAnnotationUpdate {
	eau.mutation.ClearEvent()
	return eau
}

// ClearCreator clears the "creator" edge to the User entity.
func (eau *EventAnnotationUpdate) ClearCreator() *EventAnnotationUpdate {
	eau.mutation.ClearCreator()
	return eau
}

// ClearHandovers clears all "handovers" edges to the OncallShiftHandover entity.
func (eau *EventAnnotationUpdate) ClearHandovers() *EventAnnotationUpdate {
	eau.mutation.ClearHandovers()
	return eau
}

// RemoveHandoverIDs removes the "handovers" edge to OncallShiftHandover entities by IDs.
func (eau *EventAnnotationUpdate) RemoveHandoverIDs(ids ...uuid.UUID) *EventAnnotationUpdate {
	eau.mutation.RemoveHandoverIDs(ids...)
	return eau
}

// RemoveHandovers removes "handovers" edges to OncallShiftHandover entities.
func (eau *EventAnnotationUpdate) RemoveHandovers(o ...*OncallShiftHandover) *EventAnnotationUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eau.RemoveHandoverIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EventAnnotationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eau.sqlSave, eau.mutation, eau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EventAnnotationUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EventAnnotationUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EventAnnotationUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eau *EventAnnotationUpdate) check() error {
	if eau.mutation.TenantCleared() && len(eau.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventAnnotation.tenant"`)
	}
	if eau.mutation.EventCleared() && len(eau.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventAnnotation.event"`)
	}
	if eau.mutation.CreatorCleared() && len(eau.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventAnnotation.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eau *EventAnnotationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventAnnotationUpdate {
	eau.modifiers = append(eau.modifiers, modifiers...)
	return eau
}

func (eau *EventAnnotationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventannotation.Table, eventannotation.Columns, sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID))
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.CreatedAt(); ok {
		_spec.SetField(eventannotation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eau.mutation.MinutesOccupied(); ok {
		_spec.SetField(eventannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := eau.mutation.AddedMinutesOccupied(); ok {
		_spec.AddField(eventannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := eau.mutation.Notes(); ok {
		_spec.SetField(eventannotation.FieldNotes, field.TypeString, value)
	}
	if value, ok := eau.mutation.Tags(); ok {
		_spec.SetField(eventannotation.FieldTags, field.TypeJSON, value)
	}
	if value, ok := eau.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, eventannotation.FieldTags, value)
		})
	}
	if eau.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.EventTable,
			Columns: []string{eventannotation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.EventTable,
			Columns: []string{eventannotation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.CreatorTable,
			Columns: []string{eventannotation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.CreatorTable,
			Columns: []string{eventannotation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.HandoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventannotation.HandoversTable,
			Columns: eventannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.RemovedHandoversIDs(); len(nodes) > 0 && !eau.mutation.HandoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventannotation.HandoversTable,
			Columns: eventannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.HandoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventannotation.HandoversTable,
			Columns: eventannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventannotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eau.mutation.done = true
	return n, nil
}

// EventAnnotationUpdateOne is the builder for updating a single EventAnnotation entity.
type EventAnnotationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventAnnotationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEventID sets the "event_id" field.
func (eauo *EventAnnotationUpdateOne) SetEventID(u uuid.UUID) *EventAnnotationUpdateOne {
	eauo.mutation.SetEventID(u)
	return eauo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (eauo *EventAnnotationUpdateOne) SetNillableEventID(u *uuid.UUID) *EventAnnotationUpdateOne {
	if u != nil {
		eauo.SetEventID(*u)
	}
	return eauo
}

// SetCreatorID sets the "creator_id" field.
func (eauo *EventAnnotationUpdateOne) SetCreatorID(u uuid.UUID) *EventAnnotationUpdateOne {
	eauo.mutation.SetCreatorID(u)
	return eauo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (eauo *EventAnnotationUpdateOne) SetNillableCreatorID(u *uuid.UUID) *EventAnnotationUpdateOne {
	if u != nil {
		eauo.SetCreatorID(*u)
	}
	return eauo
}

// SetCreatedAt sets the "created_at" field.
func (eauo *EventAnnotationUpdateOne) SetCreatedAt(t time.Time) *EventAnnotationUpdateOne {
	eauo.mutation.SetCreatedAt(t)
	return eauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eauo *EventAnnotationUpdateOne) SetNillableCreatedAt(t *time.Time) *EventAnnotationUpdateOne {
	if t != nil {
		eauo.SetCreatedAt(*t)
	}
	return eauo
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (eauo *EventAnnotationUpdateOne) SetMinutesOccupied(i int) *EventAnnotationUpdateOne {
	eauo.mutation.ResetMinutesOccupied()
	eauo.mutation.SetMinutesOccupied(i)
	return eauo
}

// SetNillableMinutesOccupied sets the "minutes_occupied" field if the given value is not nil.
func (eauo *EventAnnotationUpdateOne) SetNillableMinutesOccupied(i *int) *EventAnnotationUpdateOne {
	if i != nil {
		eauo.SetMinutesOccupied(*i)
	}
	return eauo
}

// AddMinutesOccupied adds i to the "minutes_occupied" field.
func (eauo *EventAnnotationUpdateOne) AddMinutesOccupied(i int) *EventAnnotationUpdateOne {
	eauo.mutation.AddMinutesOccupied(i)
	return eauo
}

// SetNotes sets the "notes" field.
func (eauo *EventAnnotationUpdateOne) SetNotes(s string) *EventAnnotationUpdateOne {
	eauo.mutation.SetNotes(s)
	return eauo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (eauo *EventAnnotationUpdateOne) SetNillableNotes(s *string) *EventAnnotationUpdateOne {
	if s != nil {
		eauo.SetNotes(*s)
	}
	return eauo
}

// SetTags sets the "tags" field.
func (eauo *EventAnnotationUpdateOne) SetTags(s []string) *EventAnnotationUpdateOne {
	eauo.mutation.SetTags(s)
	return eauo
}

// AppendTags appends s to the "tags" field.
func (eauo *EventAnnotationUpdateOne) AppendTags(s []string) *EventAnnotationUpdateOne {
	eauo.mutation.AppendTags(s)
	return eauo
}

// SetEvent sets the "event" edge to the Event entity.
func (eauo *EventAnnotationUpdateOne) SetEvent(e *Event) *EventAnnotationUpdateOne {
	return eauo.SetEventID(e.ID)
}

// SetCreator sets the "creator" edge to the User entity.
func (eauo *EventAnnotationUpdateOne) SetCreator(u *User) *EventAnnotationUpdateOne {
	return eauo.SetCreatorID(u.ID)
}

// AddHandoverIDs adds the "handovers" edge to the OncallShiftHandover entity by IDs.
func (eauo *EventAnnotationUpdateOne) AddHandoverIDs(ids ...uuid.UUID) *EventAnnotationUpdateOne {
	eauo.mutation.AddHandoverIDs(ids...)
	return eauo
}

// AddHandovers adds the "handovers" edges to the OncallShiftHandover entity.
func (eauo *EventAnnotationUpdateOne) AddHandovers(o ...*OncallShiftHandover) *EventAnnotationUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eauo.AddHandoverIDs(ids...)
}

// Mutation returns the EventAnnotationMutation object of the builder.
func (eauo *EventAnnotationUpdateOne) Mutation() *EventAnnotationMutation {
	return eauo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (eauo *EventAnnotationUpdateOne) ClearEvent() *EventAnnotationUpdateOne {
	eauo.mutation.ClearEvent()
	return eauo
}

// ClearCreator clears the "creator" edge to the User entity.
func (eauo *EventAnnotationUpdateOne) ClearCreator() *EventAnnotationUpdateOne {
	eauo.mutation.ClearCreator()
	return eauo
}

// ClearHandovers clears all "handovers" edges to the OncallShiftHandover entity.
func (eauo *EventAnnotationUpdateOne) ClearHandovers() *EventAnnotationUpdateOne {
	eauo.mutation.ClearHandovers()
	return eauo
}

// RemoveHandoverIDs removes the "handovers" edge to OncallShiftHandover entities by IDs.
func (eauo *EventAnnotationUpdateOne) RemoveHandoverIDs(ids ...uuid.UUID) *EventAnnotationUpdateOne {
	eauo.mutation.RemoveHandoverIDs(ids...)
	return eauo
}

// RemoveHandovers removes "handovers" edges to OncallShiftHandover entities.
func (eauo *EventAnnotationUpdateOne) RemoveHandovers(o ...*OncallShiftHandover) *EventAnnotationUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eauo.RemoveHandoverIDs(ids...)
}

// Where appends a list predicates to the EventAnnotationUpdate builder.
func (eauo *EventAnnotationUpdateOne) Where(ps ...predicate.EventAnnotation) *EventAnnotationUpdateOne {
	eauo.mutation.Where(ps...)
	return eauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eauo *EventAnnotationUpdateOne) Select(field string, fields ...string) *EventAnnotationUpdateOne {
	eauo.fields = append([]string{field}, fields...)
	return eauo
}

// Save executes the query and returns the updated EventAnnotation entity.
func (eauo *EventAnnotationUpdateOne) Save(ctx context.Context) (*EventAnnotation, error) {
	return withHooks(ctx, eauo.sqlSave, eauo.mutation, eauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EventAnnotationUpdateOne) SaveX(ctx context.Context) *EventAnnotation {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EventAnnotationUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EventAnnotationUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eauo *EventAnnotationUpdateOne) check() error {
	if eauo.mutation.TenantCleared() && len(eauo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventAnnotation.tenant"`)
	}
	if eauo.mutation.EventCleared() && len(eauo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventAnnotation.event"`)
	}
	if eauo.mutation.CreatorCleared() && len(eauo.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventAnnotation.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eauo *EventAnnotationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventAnnotationUpdateOne {
	eauo.modifiers = append(eauo.modifiers, modifiers...)
	return eauo
}

func (eauo *EventAnnotationUpdateOne) sqlSave(ctx context.Context) (_node *EventAnnotation, err error) {
	if err := eauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventannotation.Table, eventannotation.Columns, sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID))
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventAnnotation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventannotation.FieldID)
		for _, f := range fields {
			if !eventannotation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventannotation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.CreatedAt(); ok {
		_spec.SetField(eventannotation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eauo.mutation.MinutesOccupied(); ok {
		_spec.SetField(eventannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := eauo.mutation.AddedMinutesOccupied(); ok {
		_spec.AddField(eventannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := eauo.mutation.Notes(); ok {
		_spec.SetField(eventannotation.FieldNotes, field.TypeString, value)
	}
	if value, ok := eauo.mutation.Tags(); ok {
		_spec.SetField(eventannotation.FieldTags, field.TypeJSON, value)
	}
	if value, ok := eauo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, eventannotation.FieldTags, value)
		})
	}
	if eauo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.EventTable,
			Columns: []string{eventannotation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.EventTable,
			Columns: []string{eventannotation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.CreatorTable,
			Columns: []string{eventannotation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventannotation.CreatorTable,
			Columns: []string{eventannotation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.HandoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventannotation.HandoversTable,
			Columns: eventannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.RemovedHandoversIDs(); len(nodes) > 0 && !eauo.mutation.HandoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventannotation.HandoversTable,
			Columns: eventannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.HandoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventannotation.HandoversTable,
			Columns: eventannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eauo.modifiers...)
	_node = &EventAnnotation{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventannotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eauo.mutation.done = true
	return _node, nil
}
