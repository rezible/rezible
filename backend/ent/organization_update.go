// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/organization"
	"github.com/rezible/rezible/ent/predicate"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetProviderID sets the "provider_id" field.
func (ou *OrganizationUpdate) SetProviderID(s string) *OrganizationUpdate {
	ou.mutation.SetProviderID(s)
	return ou
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableProviderID(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetProviderID(*s)
	}
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetInitialSetupAt sets the "initial_setup_at" field.
func (ou *OrganizationUpdate) SetInitialSetupAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetInitialSetupAt(t)
	return ou
}

// SetNillableInitialSetupAt sets the "initial_setup_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableInitialSetupAt(t *time.Time) *OrganizationUpdate {
	if t != nil {
		ou.SetInitialSetupAt(*t)
	}
	return ou
}

// ClearInitialSetupAt clears the value of the "initial_setup_at" field.
func (ou *OrganizationUpdate) ClearInitialSetupAt() *OrganizationUpdate {
	ou.mutation.ClearInitialSetupAt()
	return ou
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrganizationUpdate) check() error {
	if v, ok := ou.mutation.ProviderID(); ok {
		if err := organization.ProviderIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "Organization.provider_id": %w`, err)}
		}
	}
	if ou.mutation.TenantCleared() && len(ou.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Organization.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *OrganizationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.ProviderID(); ok {
		_spec.SetField(organization.FieldProviderID, field.TypeString, value)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.InitialSetupAt(); ok {
		_spec.SetField(organization.FieldInitialSetupAt, field.TypeTime, value)
	}
	if ou.mutation.InitialSetupAtCleared() {
		_spec.ClearField(organization.FieldInitialSetupAt, field.TypeTime)
	}
	_spec.AddModifiers(ou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetProviderID sets the "provider_id" field.
func (ouo *OrganizationUpdateOne) SetProviderID(s string) *OrganizationUpdateOne {
	ouo.mutation.SetProviderID(s)
	return ouo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableProviderID(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetProviderID(*s)
	}
	return ouo
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetInitialSetupAt sets the "initial_setup_at" field.
func (ouo *OrganizationUpdateOne) SetInitialSetupAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetInitialSetupAt(t)
	return ouo
}

// SetNillableInitialSetupAt sets the "initial_setup_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableInitialSetupAt(t *time.Time) *OrganizationUpdateOne {
	if t != nil {
		ouo.SetInitialSetupAt(*t)
	}
	return ouo
}

// ClearInitialSetupAt clears the value of the "initial_setup_at" field.
func (ouo *OrganizationUpdateOne) ClearInitialSetupAt() *OrganizationUpdateOne {
	ouo.mutation.ClearInitialSetupAt()
	return ouo
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrganizationUpdateOne) check() error {
	if v, ok := ouo.mutation.ProviderID(); ok {
		if err := organization.ProviderIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "Organization.provider_id": %w`, err)}
		}
	}
	if ouo.mutation.TenantCleared() && len(ouo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Organization.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *OrganizationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.ProviderID(); ok {
		_spec.SetField(organization.FieldProviderID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.InitialSetupAt(); ok {
		_spec.SetField(organization.FieldInitialSetupAt, field.TypeTime, value)
	}
	if ouo.mutation.InitialSetupAtCleared() {
		_spec.ClearField(organization.FieldInitialSetupAt, field.TypeTime)
	}
	_spec.AddModifiers(ouo.modifiers...)
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
