// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/tenant"
)

// Alert is the model entity for the Alert schema.
type Alert struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Definition holds the value of the "definition" field.
	Definition string `json:"definition,omitempty"`
	// RosterID holds the value of the "roster_id" field.
	RosterID uuid.UUID `json:"roster_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlertQuery when eager-loading is set.
	Edges        AlertEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AlertEdges holds the relations/edges for other nodes in the graph.
type AlertEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Playbooks holds the value of the playbooks edge.
	Playbooks []*Playbook `json:"playbooks,omitempty"`
	// Roster holds the value of the roster edge.
	Roster *OncallRoster `json:"roster,omitempty"`
	// Instances holds the value of the instances edge.
	Instances []*AlertInstance `json:"instances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlertEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// PlaybooksOrErr returns the Playbooks value or an error if the edge
// was not loaded in eager-loading.
func (e AlertEdges) PlaybooksOrErr() ([]*Playbook, error) {
	if e.loadedTypes[1] {
		return e.Playbooks, nil
	}
	return nil, &NotLoadedError{edge: "playbooks"}
}

// RosterOrErr returns the Roster value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlertEdges) RosterOrErr() (*OncallRoster, error) {
	if e.Roster != nil {
		return e.Roster, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: oncallroster.Label}
	}
	return nil, &NotLoadedError{edge: "roster"}
}

// InstancesOrErr returns the Instances value or an error if the edge
// was not loaded in eager-loading.
func (e AlertEdges) InstancesOrErr() ([]*AlertInstance, error) {
	if e.loadedTypes[3] {
		return e.Instances, nil
	}
	return nil, &NotLoadedError{edge: "instances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Alert) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alert.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case alert.FieldProviderID, alert.FieldTitle, alert.FieldDescription, alert.FieldDefinition:
			values[i] = new(sql.NullString)
		case alert.FieldID, alert.FieldRosterID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Alert fields.
func (a *Alert) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alert.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case alert.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				a.TenantID = int(value.Int64)
			}
		case alert.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				a.ProviderID = value.String
			}
		case alert.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case alert.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case alert.FieldDefinition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field definition", values[i])
			} else if value.Valid {
				a.Definition = value.String
			}
		case alert.FieldRosterID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field roster_id", values[i])
			} else if value != nil {
				a.RosterID = *value
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Alert.
// This includes values selected through modifiers, order, etc.
func (a *Alert) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Alert entity.
func (a *Alert) QueryTenant() *TenantQuery {
	return NewAlertClient(a.config).QueryTenant(a)
}

// QueryPlaybooks queries the "playbooks" edge of the Alert entity.
func (a *Alert) QueryPlaybooks() *PlaybookQuery {
	return NewAlertClient(a.config).QueryPlaybooks(a)
}

// QueryRoster queries the "roster" edge of the Alert entity.
func (a *Alert) QueryRoster() *OncallRosterQuery {
	return NewAlertClient(a.config).QueryRoster(a)
}

// QueryInstances queries the "instances" edge of the Alert entity.
func (a *Alert) QueryInstances() *AlertInstanceQuery {
	return NewAlertClient(a.config).QueryInstances(a)
}

// Update returns a builder for updating this Alert.
// Note that you need to call Alert.Unwrap() before calling this method if this Alert
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Alert) Update() *AlertUpdateOne {
	return NewAlertClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Alert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Alert) Unwrap() *Alert {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Alert is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Alert) String() string {
	var builder strings.Builder
	builder.WriteString("Alert(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", a.TenantID))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(a.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(a.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("definition=")
	builder.WriteString(a.Definition)
	builder.WriteString(", ")
	builder.WriteString("roster_id=")
	builder.WriteString(fmt.Sprintf("%v", a.RosterID))
	builder.WriteByte(')')
	return builder.String()
}

// Alerts is a parsable slice of Alert.
type Alerts []*Alert
