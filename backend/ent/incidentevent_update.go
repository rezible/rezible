// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontext"
	"github.com/rezible/rezible/ent/incidenteventcontributingfactor"
	"github.com/rezible/rezible/ent/incidenteventevidence"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
)

// IncidentEventUpdate is the builder for updating IncidentEvent entities.
type IncidentEventUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentEventUpdate builder.
func (ieu *IncidentEventUpdate) Where(ps ...predicate.IncidentEvent) *IncidentEventUpdate {
	ieu.mutation.Where(ps...)
	return ieu
}

// SetIncidentID sets the "incident_id" field.
func (ieu *IncidentEventUpdate) SetIncidentID(u uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.SetIncidentID(u)
	return ieu
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableIncidentID(u *uuid.UUID) *IncidentEventUpdate {
	if u != nil {
		ieu.SetIncidentID(*u)
	}
	return ieu
}

// SetEventID sets the "event_id" field.
func (ieu *IncidentEventUpdate) SetEventID(u uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.SetEventID(u)
	return ieu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableEventID(u *uuid.UUID) *IncidentEventUpdate {
	if u != nil {
		ieu.SetEventID(*u)
	}
	return ieu
}

// ClearEventID clears the value of the "event_id" field.
func (ieu *IncidentEventUpdate) ClearEventID() *IncidentEventUpdate {
	ieu.mutation.ClearEventID()
	return ieu
}

// SetTimestamp sets the "timestamp" field.
func (ieu *IncidentEventUpdate) SetTimestamp(t time.Time) *IncidentEventUpdate {
	ieu.mutation.SetTimestamp(t)
	return ieu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableTimestamp(t *time.Time) *IncidentEventUpdate {
	if t != nil {
		ieu.SetTimestamp(*t)
	}
	return ieu
}

// SetKind sets the "kind" field.
func (ieu *IncidentEventUpdate) SetKind(i incidentevent.Kind) *IncidentEventUpdate {
	ieu.mutation.SetKind(i)
	return ieu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableKind(i *incidentevent.Kind) *IncidentEventUpdate {
	if i != nil {
		ieu.SetKind(*i)
	}
	return ieu
}

// SetTitle sets the "title" field.
func (ieu *IncidentEventUpdate) SetTitle(s string) *IncidentEventUpdate {
	ieu.mutation.SetTitle(s)
	return ieu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableTitle(s *string) *IncidentEventUpdate {
	if s != nil {
		ieu.SetTitle(*s)
	}
	return ieu
}

// SetDescription sets the "description" field.
func (ieu *IncidentEventUpdate) SetDescription(s string) *IncidentEventUpdate {
	ieu.mutation.SetDescription(s)
	return ieu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableDescription(s *string) *IncidentEventUpdate {
	if s != nil {
		ieu.SetDescription(*s)
	}
	return ieu
}

// ClearDescription clears the value of the "description" field.
func (ieu *IncidentEventUpdate) ClearDescription() *IncidentEventUpdate {
	ieu.mutation.ClearDescription()
	return ieu
}

// SetIsKey sets the "is_key" field.
func (ieu *IncidentEventUpdate) SetIsKey(b bool) *IncidentEventUpdate {
	ieu.mutation.SetIsKey(b)
	return ieu
}

// SetNillableIsKey sets the "is_key" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableIsKey(b *bool) *IncidentEventUpdate {
	if b != nil {
		ieu.SetIsKey(*b)
	}
	return ieu
}

// SetCreatedAt sets the "created_at" field.
func (ieu *IncidentEventUpdate) SetCreatedAt(t time.Time) *IncidentEventUpdate {
	ieu.mutation.SetCreatedAt(t)
	return ieu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableCreatedAt(t *time.Time) *IncidentEventUpdate {
	if t != nil {
		ieu.SetCreatedAt(*t)
	}
	return ieu
}

// SetUpdatedAt sets the "updated_at" field.
func (ieu *IncidentEventUpdate) SetUpdatedAt(t time.Time) *IncidentEventUpdate {
	ieu.mutation.SetUpdatedAt(t)
	return ieu
}

// SetCreatedBy sets the "created_by" field.
func (ieu *IncidentEventUpdate) SetCreatedBy(u uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.SetCreatedBy(u)
	return ieu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableCreatedBy(u *uuid.UUID) *IncidentEventUpdate {
	if u != nil {
		ieu.SetCreatedBy(*u)
	}
	return ieu
}

// SetSequence sets the "sequence" field.
func (ieu *IncidentEventUpdate) SetSequence(i int) *IncidentEventUpdate {
	ieu.mutation.ResetSequence()
	ieu.mutation.SetSequence(i)
	return ieu
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableSequence(i *int) *IncidentEventUpdate {
	if i != nil {
		ieu.SetSequence(*i)
	}
	return ieu
}

// AddSequence adds i to the "sequence" field.
func (ieu *IncidentEventUpdate) AddSequence(i int) *IncidentEventUpdate {
	ieu.mutation.AddSequence(i)
	return ieu
}

// SetIsDraft sets the "is_draft" field.
func (ieu *IncidentEventUpdate) SetIsDraft(b bool) *IncidentEventUpdate {
	ieu.mutation.SetIsDraft(b)
	return ieu
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableIsDraft(b *bool) *IncidentEventUpdate {
	if b != nil {
		ieu.SetIsDraft(*b)
	}
	return ieu
}

// SetIncident sets the "incident" edge to the Incident entity.
func (ieu *IncidentEventUpdate) SetIncident(i *Incident) *IncidentEventUpdate {
	return ieu.SetIncidentID(i.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (ieu *IncidentEventUpdate) SetEvent(e *Event) *IncidentEventUpdate {
	return ieu.SetEventID(e.ID)
}

// SetContextID sets the "context" edge to the IncidentEventContext entity by ID.
func (ieu *IncidentEventUpdate) SetContextID(id uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.SetContextID(id)
	return ieu
}

// SetNillableContextID sets the "context" edge to the IncidentEventContext entity by ID if the given value is not nil.
func (ieu *IncidentEventUpdate) SetNillableContextID(id *uuid.UUID) *IncidentEventUpdate {
	if id != nil {
		ieu = ieu.SetContextID(*id)
	}
	return ieu
}

// SetContext sets the "context" edge to the IncidentEventContext entity.
func (ieu *IncidentEventUpdate) SetContext(i *IncidentEventContext) *IncidentEventUpdate {
	return ieu.SetContextID(i.ID)
}

// AddFactorIDs adds the "factors" edge to the IncidentEventContributingFactor entity by IDs.
func (ieu *IncidentEventUpdate) AddFactorIDs(ids ...uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.AddFactorIDs(ids...)
	return ieu
}

// AddFactors adds the "factors" edges to the IncidentEventContributingFactor entity.
func (ieu *IncidentEventUpdate) AddFactors(i ...*IncidentEventContributingFactor) *IncidentEventUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieu.AddFactorIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the IncidentEventEvidence entity by IDs.
func (ieu *IncidentEventUpdate) AddEvidenceIDs(ids ...uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.AddEvidenceIDs(ids...)
	return ieu
}

// AddEvidence adds the "evidence" edges to the IncidentEventEvidence entity.
func (ieu *IncidentEventUpdate) AddEvidence(i ...*IncidentEventEvidence) *IncidentEventUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieu.AddEvidenceIDs(ids...)
}

// AddSystemComponentIDs adds the "system_components" edge to the SystemComponent entity by IDs.
func (ieu *IncidentEventUpdate) AddSystemComponentIDs(ids ...uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.AddSystemComponentIDs(ids...)
	return ieu
}

// AddSystemComponents adds the "system_components" edges to the SystemComponent entity.
func (ieu *IncidentEventUpdate) AddSystemComponents(s ...*SystemComponent) *IncidentEventUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ieu.AddSystemComponentIDs(ids...)
}

// AddEventComponentIDs adds the "event_components" edge to the IncidentEventSystemComponent entity by IDs.
func (ieu *IncidentEventUpdate) AddEventComponentIDs(ids ...uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.AddEventComponentIDs(ids...)
	return ieu
}

// AddEventComponents adds the "event_components" edges to the IncidentEventSystemComponent entity.
func (ieu *IncidentEventUpdate) AddEventComponents(i ...*IncidentEventSystemComponent) *IncidentEventUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieu.AddEventComponentIDs(ids...)
}

// Mutation returns the IncidentEventMutation object of the builder.
func (ieu *IncidentEventUpdate) Mutation() *IncidentEventMutation {
	return ieu.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (ieu *IncidentEventUpdate) ClearIncident() *IncidentEventUpdate {
	ieu.mutation.ClearIncident()
	return ieu
}

// ClearEvent clears the "event" edge to the Event entity.
func (ieu *IncidentEventUpdate) ClearEvent() *IncidentEventUpdate {
	ieu.mutation.ClearEvent()
	return ieu
}

// ClearContext clears the "context" edge to the IncidentEventContext entity.
func (ieu *IncidentEventUpdate) ClearContext() *IncidentEventUpdate {
	ieu.mutation.ClearContext()
	return ieu
}

// ClearFactors clears all "factors" edges to the IncidentEventContributingFactor entity.
func (ieu *IncidentEventUpdate) ClearFactors() *IncidentEventUpdate {
	ieu.mutation.ClearFactors()
	return ieu
}

// RemoveFactorIDs removes the "factors" edge to IncidentEventContributingFactor entities by IDs.
func (ieu *IncidentEventUpdate) RemoveFactorIDs(ids ...uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.RemoveFactorIDs(ids...)
	return ieu
}

// RemoveFactors removes "factors" edges to IncidentEventContributingFactor entities.
func (ieu *IncidentEventUpdate) RemoveFactors(i ...*IncidentEventContributingFactor) *IncidentEventUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieu.RemoveFactorIDs(ids...)
}

// ClearEvidence clears all "evidence" edges to the IncidentEventEvidence entity.
func (ieu *IncidentEventUpdate) ClearEvidence() *IncidentEventUpdate {
	ieu.mutation.ClearEvidence()
	return ieu
}

// RemoveEvidenceIDs removes the "evidence" edge to IncidentEventEvidence entities by IDs.
func (ieu *IncidentEventUpdate) RemoveEvidenceIDs(ids ...uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.RemoveEvidenceIDs(ids...)
	return ieu
}

// RemoveEvidence removes "evidence" edges to IncidentEventEvidence entities.
func (ieu *IncidentEventUpdate) RemoveEvidence(i ...*IncidentEventEvidence) *IncidentEventUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieu.RemoveEvidenceIDs(ids...)
}

// ClearSystemComponents clears all "system_components" edges to the SystemComponent entity.
func (ieu *IncidentEventUpdate) ClearSystemComponents() *IncidentEventUpdate {
	ieu.mutation.ClearSystemComponents()
	return ieu
}

// RemoveSystemComponentIDs removes the "system_components" edge to SystemComponent entities by IDs.
func (ieu *IncidentEventUpdate) RemoveSystemComponentIDs(ids ...uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.RemoveSystemComponentIDs(ids...)
	return ieu
}

// RemoveSystemComponents removes "system_components" edges to SystemComponent entities.
func (ieu *IncidentEventUpdate) RemoveSystemComponents(s ...*SystemComponent) *IncidentEventUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ieu.RemoveSystemComponentIDs(ids...)
}

// ClearEventComponents clears all "event_components" edges to the IncidentEventSystemComponent entity.
func (ieu *IncidentEventUpdate) ClearEventComponents() *IncidentEventUpdate {
	ieu.mutation.ClearEventComponents()
	return ieu
}

// RemoveEventComponentIDs removes the "event_components" edge to IncidentEventSystemComponent entities by IDs.
func (ieu *IncidentEventUpdate) RemoveEventComponentIDs(ids ...uuid.UUID) *IncidentEventUpdate {
	ieu.mutation.RemoveEventComponentIDs(ids...)
	return ieu
}

// RemoveEventComponents removes "event_components" edges to IncidentEventSystemComponent entities.
func (ieu *IncidentEventUpdate) RemoveEventComponents(i ...*IncidentEventSystemComponent) *IncidentEventUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieu.RemoveEventComponentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ieu *IncidentEventUpdate) Save(ctx context.Context) (int, error) {
	if err := ieu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ieu.sqlSave, ieu.mutation, ieu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ieu *IncidentEventUpdate) SaveX(ctx context.Context) int {
	affected, err := ieu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ieu *IncidentEventUpdate) Exec(ctx context.Context) error {
	_, err := ieu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieu *IncidentEventUpdate) ExecX(ctx context.Context) {
	if err := ieu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ieu *IncidentEventUpdate) defaults() error {
	if _, ok := ieu.mutation.UpdatedAt(); !ok {
		if incidentevent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized incidentevent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := incidentevent.UpdateDefaultUpdatedAt()
		ieu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ieu *IncidentEventUpdate) check() error {
	if v, ok := ieu.mutation.Kind(); ok {
		if err := incidentevent.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "IncidentEvent.kind": %w`, err)}
		}
	}
	if v, ok := ieu.mutation.Title(); ok {
		if err := incidentevent.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IncidentEvent.title": %w`, err)}
		}
	}
	if ieu.mutation.TenantCleared() && len(ieu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEvent.tenant"`)
	}
	if ieu.mutation.IncidentCleared() && len(ieu.mutation.IncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEvent.incident"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ieu *IncidentEventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentEventUpdate {
	ieu.modifiers = append(ieu.modifiers, modifiers...)
	return ieu
}

func (ieu *IncidentEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ieu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentevent.Table, incidentevent.Columns, sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID))
	if ps := ieu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ieu.mutation.Timestamp(); ok {
		_spec.SetField(incidentevent.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := ieu.mutation.Kind(); ok {
		_spec.SetField(incidentevent.FieldKind, field.TypeEnum, value)
	}
	if value, ok := ieu.mutation.Title(); ok {
		_spec.SetField(incidentevent.FieldTitle, field.TypeString, value)
	}
	if value, ok := ieu.mutation.Description(); ok {
		_spec.SetField(incidentevent.FieldDescription, field.TypeString, value)
	}
	if ieu.mutation.DescriptionCleared() {
		_spec.ClearField(incidentevent.FieldDescription, field.TypeString)
	}
	if value, ok := ieu.mutation.IsKey(); ok {
		_spec.SetField(incidentevent.FieldIsKey, field.TypeBool, value)
	}
	if value, ok := ieu.mutation.CreatedAt(); ok {
		_spec.SetField(incidentevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ieu.mutation.UpdatedAt(); ok {
		_spec.SetField(incidentevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ieu.mutation.CreatedBy(); ok {
		_spec.SetField(incidentevent.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := ieu.mutation.Sequence(); ok {
		_spec.SetField(incidentevent.FieldSequence, field.TypeInt, value)
	}
	if value, ok := ieu.mutation.AddedSequence(); ok {
		_spec.AddField(incidentevent.FieldSequence, field.TypeInt, value)
	}
	if value, ok := ieu.mutation.IsDraft(); ok {
		_spec.SetField(incidentevent.FieldIsDraft, field.TypeBool, value)
	}
	if ieu.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentevent.IncidentTable,
			Columns: []string{incidentevent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentevent.IncidentTable,
			Columns: []string{incidentevent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentevent.EventTable,
			Columns: []string{incidentevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentevent.EventTable,
			Columns: []string{incidentevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieu.mutation.ContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidentevent.ContextTable,
			Columns: []string{incidentevent.ContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontext.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.ContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidentevent.ContextTable,
			Columns: []string{incidentevent.ContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontext.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieu.mutation.FactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.FactorsTable,
			Columns: []string{incidentevent.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.RemovedFactorsIDs(); len(nodes) > 0 && !ieu.mutation.FactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.FactorsTable,
			Columns: []string{incidentevent.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.FactorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.FactorsTable,
			Columns: []string{incidentevent.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieu.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.EvidenceTable,
			Columns: []string{incidentevent.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !ieu.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.EvidenceTable,
			Columns: []string{incidentevent.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.EvidenceTable,
			Columns: []string{incidentevent.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieu.mutation.SystemComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentevent.SystemComponentsTable,
			Columns: incidentevent.SystemComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		createE := &IncidentEventSystemComponentCreate{config: ieu.config, mutation: newIncidentEventSystemComponentMutation(ieu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.RemovedSystemComponentsIDs(); len(nodes) > 0 && !ieu.mutation.SystemComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentevent.SystemComponentsTable,
			Columns: incidentevent.SystemComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentEventSystemComponentCreate{config: ieu.config, mutation: newIncidentEventSystemComponentMutation(ieu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.SystemComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentevent.SystemComponentsTable,
			Columns: incidentevent.SystemComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentEventSystemComponentCreate{config: ieu.config, mutation: newIncidentEventSystemComponentMutation(ieu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieu.mutation.EventComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentevent.EventComponentsTable,
			Columns: []string{incidentevent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.RemovedEventComponentsIDs(); len(nodes) > 0 && !ieu.mutation.EventComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentevent.EventComponentsTable,
			Columns: []string{incidentevent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieu.mutation.EventComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentevent.EventComponentsTable,
			Columns: []string{incidentevent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ieu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ieu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ieu.mutation.done = true
	return n, nil
}

// IncidentEventUpdateOne is the builder for updating a single IncidentEvent entity.
type IncidentEventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIncidentID sets the "incident_id" field.
func (ieuo *IncidentEventUpdateOne) SetIncidentID(u uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.SetIncidentID(u)
	return ieuo
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableIncidentID(u *uuid.UUID) *IncidentEventUpdateOne {
	if u != nil {
		ieuo.SetIncidentID(*u)
	}
	return ieuo
}

// SetEventID sets the "event_id" field.
func (ieuo *IncidentEventUpdateOne) SetEventID(u uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.SetEventID(u)
	return ieuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableEventID(u *uuid.UUID) *IncidentEventUpdateOne {
	if u != nil {
		ieuo.SetEventID(*u)
	}
	return ieuo
}

// ClearEventID clears the value of the "event_id" field.
func (ieuo *IncidentEventUpdateOne) ClearEventID() *IncidentEventUpdateOne {
	ieuo.mutation.ClearEventID()
	return ieuo
}

// SetTimestamp sets the "timestamp" field.
func (ieuo *IncidentEventUpdateOne) SetTimestamp(t time.Time) *IncidentEventUpdateOne {
	ieuo.mutation.SetTimestamp(t)
	return ieuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableTimestamp(t *time.Time) *IncidentEventUpdateOne {
	if t != nil {
		ieuo.SetTimestamp(*t)
	}
	return ieuo
}

// SetKind sets the "kind" field.
func (ieuo *IncidentEventUpdateOne) SetKind(i incidentevent.Kind) *IncidentEventUpdateOne {
	ieuo.mutation.SetKind(i)
	return ieuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableKind(i *incidentevent.Kind) *IncidentEventUpdateOne {
	if i != nil {
		ieuo.SetKind(*i)
	}
	return ieuo
}

// SetTitle sets the "title" field.
func (ieuo *IncidentEventUpdateOne) SetTitle(s string) *IncidentEventUpdateOne {
	ieuo.mutation.SetTitle(s)
	return ieuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableTitle(s *string) *IncidentEventUpdateOne {
	if s != nil {
		ieuo.SetTitle(*s)
	}
	return ieuo
}

// SetDescription sets the "description" field.
func (ieuo *IncidentEventUpdateOne) SetDescription(s string) *IncidentEventUpdateOne {
	ieuo.mutation.SetDescription(s)
	return ieuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableDescription(s *string) *IncidentEventUpdateOne {
	if s != nil {
		ieuo.SetDescription(*s)
	}
	return ieuo
}

// ClearDescription clears the value of the "description" field.
func (ieuo *IncidentEventUpdateOne) ClearDescription() *IncidentEventUpdateOne {
	ieuo.mutation.ClearDescription()
	return ieuo
}

// SetIsKey sets the "is_key" field.
func (ieuo *IncidentEventUpdateOne) SetIsKey(b bool) *IncidentEventUpdateOne {
	ieuo.mutation.SetIsKey(b)
	return ieuo
}

// SetNillableIsKey sets the "is_key" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableIsKey(b *bool) *IncidentEventUpdateOne {
	if b != nil {
		ieuo.SetIsKey(*b)
	}
	return ieuo
}

// SetCreatedAt sets the "created_at" field.
func (ieuo *IncidentEventUpdateOne) SetCreatedAt(t time.Time) *IncidentEventUpdateOne {
	ieuo.mutation.SetCreatedAt(t)
	return ieuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableCreatedAt(t *time.Time) *IncidentEventUpdateOne {
	if t != nil {
		ieuo.SetCreatedAt(*t)
	}
	return ieuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ieuo *IncidentEventUpdateOne) SetUpdatedAt(t time.Time) *IncidentEventUpdateOne {
	ieuo.mutation.SetUpdatedAt(t)
	return ieuo
}

// SetCreatedBy sets the "created_by" field.
func (ieuo *IncidentEventUpdateOne) SetCreatedBy(u uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.SetCreatedBy(u)
	return ieuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *IncidentEventUpdateOne {
	if u != nil {
		ieuo.SetCreatedBy(*u)
	}
	return ieuo
}

// SetSequence sets the "sequence" field.
func (ieuo *IncidentEventUpdateOne) SetSequence(i int) *IncidentEventUpdateOne {
	ieuo.mutation.ResetSequence()
	ieuo.mutation.SetSequence(i)
	return ieuo
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableSequence(i *int) *IncidentEventUpdateOne {
	if i != nil {
		ieuo.SetSequence(*i)
	}
	return ieuo
}

// AddSequence adds i to the "sequence" field.
func (ieuo *IncidentEventUpdateOne) AddSequence(i int) *IncidentEventUpdateOne {
	ieuo.mutation.AddSequence(i)
	return ieuo
}

// SetIsDraft sets the "is_draft" field.
func (ieuo *IncidentEventUpdateOne) SetIsDraft(b bool) *IncidentEventUpdateOne {
	ieuo.mutation.SetIsDraft(b)
	return ieuo
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableIsDraft(b *bool) *IncidentEventUpdateOne {
	if b != nil {
		ieuo.SetIsDraft(*b)
	}
	return ieuo
}

// SetIncident sets the "incident" edge to the Incident entity.
func (ieuo *IncidentEventUpdateOne) SetIncident(i *Incident) *IncidentEventUpdateOne {
	return ieuo.SetIncidentID(i.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (ieuo *IncidentEventUpdateOne) SetEvent(e *Event) *IncidentEventUpdateOne {
	return ieuo.SetEventID(e.ID)
}

// SetContextID sets the "context" edge to the IncidentEventContext entity by ID.
func (ieuo *IncidentEventUpdateOne) SetContextID(id uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.SetContextID(id)
	return ieuo
}

// SetNillableContextID sets the "context" edge to the IncidentEventContext entity by ID if the given value is not nil.
func (ieuo *IncidentEventUpdateOne) SetNillableContextID(id *uuid.UUID) *IncidentEventUpdateOne {
	if id != nil {
		ieuo = ieuo.SetContextID(*id)
	}
	return ieuo
}

// SetContext sets the "context" edge to the IncidentEventContext entity.
func (ieuo *IncidentEventUpdateOne) SetContext(i *IncidentEventContext) *IncidentEventUpdateOne {
	return ieuo.SetContextID(i.ID)
}

// AddFactorIDs adds the "factors" edge to the IncidentEventContributingFactor entity by IDs.
func (ieuo *IncidentEventUpdateOne) AddFactorIDs(ids ...uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.AddFactorIDs(ids...)
	return ieuo
}

// AddFactors adds the "factors" edges to the IncidentEventContributingFactor entity.
func (ieuo *IncidentEventUpdateOne) AddFactors(i ...*IncidentEventContributingFactor) *IncidentEventUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieuo.AddFactorIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the IncidentEventEvidence entity by IDs.
func (ieuo *IncidentEventUpdateOne) AddEvidenceIDs(ids ...uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.AddEvidenceIDs(ids...)
	return ieuo
}

// AddEvidence adds the "evidence" edges to the IncidentEventEvidence entity.
func (ieuo *IncidentEventUpdateOne) AddEvidence(i ...*IncidentEventEvidence) *IncidentEventUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieuo.AddEvidenceIDs(ids...)
}

// AddSystemComponentIDs adds the "system_components" edge to the SystemComponent entity by IDs.
func (ieuo *IncidentEventUpdateOne) AddSystemComponentIDs(ids ...uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.AddSystemComponentIDs(ids...)
	return ieuo
}

// AddSystemComponents adds the "system_components" edges to the SystemComponent entity.
func (ieuo *IncidentEventUpdateOne) AddSystemComponents(s ...*SystemComponent) *IncidentEventUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ieuo.AddSystemComponentIDs(ids...)
}

// AddEventComponentIDs adds the "event_components" edge to the IncidentEventSystemComponent entity by IDs.
func (ieuo *IncidentEventUpdateOne) AddEventComponentIDs(ids ...uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.AddEventComponentIDs(ids...)
	return ieuo
}

// AddEventComponents adds the "event_components" edges to the IncidentEventSystemComponent entity.
func (ieuo *IncidentEventUpdateOne) AddEventComponents(i ...*IncidentEventSystemComponent) *IncidentEventUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieuo.AddEventComponentIDs(ids...)
}

// Mutation returns the IncidentEventMutation object of the builder.
func (ieuo *IncidentEventUpdateOne) Mutation() *IncidentEventMutation {
	return ieuo.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (ieuo *IncidentEventUpdateOne) ClearIncident() *IncidentEventUpdateOne {
	ieuo.mutation.ClearIncident()
	return ieuo
}

// ClearEvent clears the "event" edge to the Event entity.
func (ieuo *IncidentEventUpdateOne) ClearEvent() *IncidentEventUpdateOne {
	ieuo.mutation.ClearEvent()
	return ieuo
}

// ClearContext clears the "context" edge to the IncidentEventContext entity.
func (ieuo *IncidentEventUpdateOne) ClearContext() *IncidentEventUpdateOne {
	ieuo.mutation.ClearContext()
	return ieuo
}

// ClearFactors clears all "factors" edges to the IncidentEventContributingFactor entity.
func (ieuo *IncidentEventUpdateOne) ClearFactors() *IncidentEventUpdateOne {
	ieuo.mutation.ClearFactors()
	return ieuo
}

// RemoveFactorIDs removes the "factors" edge to IncidentEventContributingFactor entities by IDs.
func (ieuo *IncidentEventUpdateOne) RemoveFactorIDs(ids ...uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.RemoveFactorIDs(ids...)
	return ieuo
}

// RemoveFactors removes "factors" edges to IncidentEventContributingFactor entities.
func (ieuo *IncidentEventUpdateOne) RemoveFactors(i ...*IncidentEventContributingFactor) *IncidentEventUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieuo.RemoveFactorIDs(ids...)
}

// ClearEvidence clears all "evidence" edges to the IncidentEventEvidence entity.
func (ieuo *IncidentEventUpdateOne) ClearEvidence() *IncidentEventUpdateOne {
	ieuo.mutation.ClearEvidence()
	return ieuo
}

// RemoveEvidenceIDs removes the "evidence" edge to IncidentEventEvidence entities by IDs.
func (ieuo *IncidentEventUpdateOne) RemoveEvidenceIDs(ids ...uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.RemoveEvidenceIDs(ids...)
	return ieuo
}

// RemoveEvidence removes "evidence" edges to IncidentEventEvidence entities.
func (ieuo *IncidentEventUpdateOne) RemoveEvidence(i ...*IncidentEventEvidence) *IncidentEventUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieuo.RemoveEvidenceIDs(ids...)
}

// ClearSystemComponents clears all "system_components" edges to the SystemComponent entity.
func (ieuo *IncidentEventUpdateOne) ClearSystemComponents() *IncidentEventUpdateOne {
	ieuo.mutation.ClearSystemComponents()
	return ieuo
}

// RemoveSystemComponentIDs removes the "system_components" edge to SystemComponent entities by IDs.
func (ieuo *IncidentEventUpdateOne) RemoveSystemComponentIDs(ids ...uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.RemoveSystemComponentIDs(ids...)
	return ieuo
}

// RemoveSystemComponents removes "system_components" edges to SystemComponent entities.
func (ieuo *IncidentEventUpdateOne) RemoveSystemComponents(s ...*SystemComponent) *IncidentEventUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ieuo.RemoveSystemComponentIDs(ids...)
}

// ClearEventComponents clears all "event_components" edges to the IncidentEventSystemComponent entity.
func (ieuo *IncidentEventUpdateOne) ClearEventComponents() *IncidentEventUpdateOne {
	ieuo.mutation.ClearEventComponents()
	return ieuo
}

// RemoveEventComponentIDs removes the "event_components" edge to IncidentEventSystemComponent entities by IDs.
func (ieuo *IncidentEventUpdateOne) RemoveEventComponentIDs(ids ...uuid.UUID) *IncidentEventUpdateOne {
	ieuo.mutation.RemoveEventComponentIDs(ids...)
	return ieuo
}

// RemoveEventComponents removes "event_components" edges to IncidentEventSystemComponent entities.
func (ieuo *IncidentEventUpdateOne) RemoveEventComponents(i ...*IncidentEventSystemComponent) *IncidentEventUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ieuo.RemoveEventComponentIDs(ids...)
}

// Where appends a list predicates to the IncidentEventUpdate builder.
func (ieuo *IncidentEventUpdateOne) Where(ps ...predicate.IncidentEvent) *IncidentEventUpdateOne {
	ieuo.mutation.Where(ps...)
	return ieuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ieuo *IncidentEventUpdateOne) Select(field string, fields ...string) *IncidentEventUpdateOne {
	ieuo.fields = append([]string{field}, fields...)
	return ieuo
}

// Save executes the query and returns the updated IncidentEvent entity.
func (ieuo *IncidentEventUpdateOne) Save(ctx context.Context) (*IncidentEvent, error) {
	if err := ieuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ieuo.sqlSave, ieuo.mutation, ieuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ieuo *IncidentEventUpdateOne) SaveX(ctx context.Context) *IncidentEvent {
	node, err := ieuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ieuo *IncidentEventUpdateOne) Exec(ctx context.Context) error {
	_, err := ieuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieuo *IncidentEventUpdateOne) ExecX(ctx context.Context) {
	if err := ieuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ieuo *IncidentEventUpdateOne) defaults() error {
	if _, ok := ieuo.mutation.UpdatedAt(); !ok {
		if incidentevent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized incidentevent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := incidentevent.UpdateDefaultUpdatedAt()
		ieuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ieuo *IncidentEventUpdateOne) check() error {
	if v, ok := ieuo.mutation.Kind(); ok {
		if err := incidentevent.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "IncidentEvent.kind": %w`, err)}
		}
	}
	if v, ok := ieuo.mutation.Title(); ok {
		if err := incidentevent.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IncidentEvent.title": %w`, err)}
		}
	}
	if ieuo.mutation.TenantCleared() && len(ieuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEvent.tenant"`)
	}
	if ieuo.mutation.IncidentCleared() && len(ieuo.mutation.IncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEvent.incident"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ieuo *IncidentEventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentEventUpdateOne {
	ieuo.modifiers = append(ieuo.modifiers, modifiers...)
	return ieuo
}

func (ieuo *IncidentEventUpdateOne) sqlSave(ctx context.Context) (_node *IncidentEvent, err error) {
	if err := ieuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentevent.Table, incidentevent.Columns, sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID))
	id, ok := ieuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ieuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentevent.FieldID)
		for _, f := range fields {
			if !incidentevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidentevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ieuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ieuo.mutation.Timestamp(); ok {
		_spec.SetField(incidentevent.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := ieuo.mutation.Kind(); ok {
		_spec.SetField(incidentevent.FieldKind, field.TypeEnum, value)
	}
	if value, ok := ieuo.mutation.Title(); ok {
		_spec.SetField(incidentevent.FieldTitle, field.TypeString, value)
	}
	if value, ok := ieuo.mutation.Description(); ok {
		_spec.SetField(incidentevent.FieldDescription, field.TypeString, value)
	}
	if ieuo.mutation.DescriptionCleared() {
		_spec.ClearField(incidentevent.FieldDescription, field.TypeString)
	}
	if value, ok := ieuo.mutation.IsKey(); ok {
		_spec.SetField(incidentevent.FieldIsKey, field.TypeBool, value)
	}
	if value, ok := ieuo.mutation.CreatedAt(); ok {
		_spec.SetField(incidentevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ieuo.mutation.UpdatedAt(); ok {
		_spec.SetField(incidentevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ieuo.mutation.CreatedBy(); ok {
		_spec.SetField(incidentevent.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := ieuo.mutation.Sequence(); ok {
		_spec.SetField(incidentevent.FieldSequence, field.TypeInt, value)
	}
	if value, ok := ieuo.mutation.AddedSequence(); ok {
		_spec.AddField(incidentevent.FieldSequence, field.TypeInt, value)
	}
	if value, ok := ieuo.mutation.IsDraft(); ok {
		_spec.SetField(incidentevent.FieldIsDraft, field.TypeBool, value)
	}
	if ieuo.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentevent.IncidentTable,
			Columns: []string{incidentevent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentevent.IncidentTable,
			Columns: []string{incidentevent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentevent.EventTable,
			Columns: []string{incidentevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentevent.EventTable,
			Columns: []string{incidentevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieuo.mutation.ContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidentevent.ContextTable,
			Columns: []string{incidentevent.ContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontext.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.ContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidentevent.ContextTable,
			Columns: []string{incidentevent.ContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontext.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieuo.mutation.FactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.FactorsTable,
			Columns: []string{incidentevent.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.RemovedFactorsIDs(); len(nodes) > 0 && !ieuo.mutation.FactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.FactorsTable,
			Columns: []string{incidentevent.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.FactorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.FactorsTable,
			Columns: []string{incidentevent.FactorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieuo.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.EvidenceTable,
			Columns: []string{incidentevent.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !ieuo.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.EvidenceTable,
			Columns: []string{incidentevent.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.EvidenceTable,
			Columns: []string{incidentevent.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieuo.mutation.SystemComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentevent.SystemComponentsTable,
			Columns: incidentevent.SystemComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		createE := &IncidentEventSystemComponentCreate{config: ieuo.config, mutation: newIncidentEventSystemComponentMutation(ieuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.RemovedSystemComponentsIDs(); len(nodes) > 0 && !ieuo.mutation.SystemComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentevent.SystemComponentsTable,
			Columns: incidentevent.SystemComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentEventSystemComponentCreate{config: ieuo.config, mutation: newIncidentEventSystemComponentMutation(ieuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.SystemComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentevent.SystemComponentsTable,
			Columns: incidentevent.SystemComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentEventSystemComponentCreate{config: ieuo.config, mutation: newIncidentEventSystemComponentMutation(ieuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ieuo.mutation.EventComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentevent.EventComponentsTable,
			Columns: []string{incidentevent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.RemovedEventComponentsIDs(); len(nodes) > 0 && !ieuo.mutation.EventComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentevent.EventComponentsTable,
			Columns: []string{incidentevent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieuo.mutation.EventComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentevent.EventComponentsTable,
			Columns: []string{incidentevent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ieuo.modifiers...)
	_node = &IncidentEvent{config: ieuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ieuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ieuo.mutation.done = true
	return _node, nil
}
