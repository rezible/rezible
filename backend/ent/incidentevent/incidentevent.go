// Code generated by ent, DO NOT EDIT.

package incidentevent

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the incidentevent type in the database.
	Label = "incident_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldIncidentID holds the string denoting the incident_id field in the database.
	FieldIncidentID = "incident_id"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIsKey holds the string denoting the is_key field in the database.
	FieldIsKey = "is_key"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldSequence holds the string denoting the sequence field in the database.
	FieldSequence = "sequence"
	// FieldIsDraft holds the string denoting the is_draft field in the database.
	FieldIsDraft = "is_draft"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeIncident holds the string denoting the incident edge name in mutations.
	EdgeIncident = "incident"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeContext holds the string denoting the context edge name in mutations.
	EdgeContext = "context"
	// EdgeFactors holds the string denoting the factors edge name in mutations.
	EdgeFactors = "factors"
	// EdgeEvidence holds the string denoting the evidence edge name in mutations.
	EdgeEvidence = "evidence"
	// EdgeSystemComponents holds the string denoting the system_components edge name in mutations.
	EdgeSystemComponents = "system_components"
	// EdgeEventComponents holds the string denoting the event_components edge name in mutations.
	EdgeEventComponents = "event_components"
	// Table holds the table name of the incidentevent in the database.
	Table = "incident_events"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "incident_events"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// IncidentTable is the table that holds the incident relation/edge.
	IncidentTable = "incident_events"
	// IncidentInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	IncidentInverseTable = "incidents"
	// IncidentColumn is the table column denoting the incident relation/edge.
	IncidentColumn = "incident_id"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "incident_events"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_id"
	// ContextTable is the table that holds the context relation/edge.
	ContextTable = "incident_event_contexts"
	// ContextInverseTable is the table name for the IncidentEventContext entity.
	// It exists in this package in order to avoid circular dependency with the "incidenteventcontext" package.
	ContextInverseTable = "incident_event_contexts"
	// ContextColumn is the table column denoting the context relation/edge.
	ContextColumn = "incident_event_context"
	// FactorsTable is the table that holds the factors relation/edge.
	FactorsTable = "incident_event_contributing_factors"
	// FactorsInverseTable is the table name for the IncidentEventContributingFactor entity.
	// It exists in this package in order to avoid circular dependency with the "incidenteventcontributingfactor" package.
	FactorsInverseTable = "incident_event_contributing_factors"
	// FactorsColumn is the table column denoting the factors relation/edge.
	FactorsColumn = "incident_event_factors"
	// EvidenceTable is the table that holds the evidence relation/edge.
	EvidenceTable = "incident_event_evidences"
	// EvidenceInverseTable is the table name for the IncidentEventEvidence entity.
	// It exists in this package in order to avoid circular dependency with the "incidenteventevidence" package.
	EvidenceInverseTable = "incident_event_evidences"
	// EvidenceColumn is the table column denoting the evidence relation/edge.
	EvidenceColumn = "incident_event_evidence"
	// SystemComponentsTable is the table that holds the system_components relation/edge. The primary key declared below.
	SystemComponentsTable = "incident_event_system_components"
	// SystemComponentsInverseTable is the table name for the SystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponent" package.
	SystemComponentsInverseTable = "system_components"
	// EventComponentsTable is the table that holds the event_components relation/edge.
	EventComponentsTable = "incident_event_system_components"
	// EventComponentsInverseTable is the table name for the IncidentEventSystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "incidenteventsystemcomponent" package.
	EventComponentsInverseTable = "incident_event_system_components"
	// EventComponentsColumn is the table column denoting the event_components relation/edge.
	EventComponentsColumn = "incident_event_id"
)

// Columns holds all SQL columns for incidentevent fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldIncidentID,
	FieldEventID,
	FieldTimestamp,
	FieldKind,
	FieldTitle,
	FieldDescription,
	FieldIsKey,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldSequence,
	FieldIsDraft,
}

var (
	// SystemComponentsPrimaryKey and SystemComponentsColumn2 are the table columns denoting the
	// primary key for the system_components relation (M2M).
	SystemComponentsPrimaryKey = []string{"incident_event_id", "system_component_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultIsKey holds the default value on creation for the "is_key" field.
	DefaultIsKey bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSequence holds the default value on creation for the "sequence" field.
	DefaultSequence int
	// DefaultIsDraft holds the default value on creation for the "is_draft" field.
	DefaultIsDraft bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindObservation Kind = "observation"
	KindAction      Kind = "action"
	KindDecision    Kind = "decision"
	KindContext     Kind = "context"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindObservation, KindAction, KindDecision, KindContext:
		return nil
	default:
		return fmt.Errorf("incidentevent: invalid enum value for kind field: %q", k)
	}
}

// OrderOption defines the ordering options for the IncidentEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByIncidentID orders the results by the incident_id field.
func ByIncidentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncidentID, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsKey orders the results by the is_key field.
func ByIsKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsKey, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// BySequence orders the results by the sequence field.
func BySequence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSequence, opts...).ToFunc()
}

// ByIsDraft orders the results by the is_draft field.
func ByIsDraft(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDraft, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByIncidentField orders the results by incident field.
func ByIncidentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentStep(), sql.OrderByField(field, opts...))
	}
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByContextField orders the results by context field.
func ByContextField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContextStep(), sql.OrderByField(field, opts...))
	}
}

// ByFactorsCount orders the results by factors count.
func ByFactorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFactorsStep(), opts...)
	}
}

// ByFactors orders the results by factors terms.
func ByFactors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFactorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEvidenceCount orders the results by evidence count.
func ByEvidenceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEvidenceStep(), opts...)
	}
}

// ByEvidence orders the results by evidence terms.
func ByEvidence(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEvidenceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySystemComponentsCount orders the results by system_components count.
func BySystemComponentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSystemComponentsStep(), opts...)
	}
}

// BySystemComponents orders the results by system_components terms.
func BySystemComponents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSystemComponentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventComponentsCount orders the results by event_components count.
func ByEventComponentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventComponentsStep(), opts...)
	}
}

// ByEventComponents orders the results by event_components terms.
func ByEventComponents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventComponentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newIncidentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IncidentTable, IncidentColumn),
	)
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EventTable, EventColumn),
	)
}
func newContextStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContextInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ContextTable, ContextColumn),
	)
}
func newFactorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FactorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FactorsTable, FactorsColumn),
	)
}
func newEvidenceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EvidenceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EvidenceTable, EvidenceColumn),
	)
}
func newSystemComponentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SystemComponentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SystemComponentsTable, SystemComponentsPrimaryKey...),
	)
}
func newEventComponentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventComponentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EventComponentsTable, EventComponentsColumn),
	)
}
