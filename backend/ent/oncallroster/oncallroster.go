// Code generated by ent, DO NOT EDIT.

package oncallroster

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oncallroster type in the database.
	Label = "oncall_roster"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldArchiveTime holds the string denoting the archive_time field in the database.
	FieldArchiveTime = "archive_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldChatHandle holds the string denoting the chat_handle field in the database.
	FieldChatHandle = "chat_handle"
	// FieldChatChannelID holds the string denoting the chat_channel_id field in the database.
	FieldChatChannelID = "chat_channel_id"
	// FieldHandoverTemplateID holds the string denoting the handover_template_id field in the database.
	FieldHandoverTemplateID = "handover_template_id"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeSchedules holds the string denoting the schedules edge name in mutations.
	EdgeSchedules = "schedules"
	// EdgeHandoverTemplate holds the string denoting the handover_template edge name in mutations.
	EdgeHandoverTemplate = "handover_template"
	// EdgeAlerts holds the string denoting the alerts edge name in mutations.
	EdgeAlerts = "alerts"
	// EdgeTeams holds the string denoting the teams edge name in mutations.
	EdgeTeams = "teams"
	// EdgeShifts holds the string denoting the shifts edge name in mutations.
	EdgeShifts = "shifts"
	// EdgeUserWatchers holds the string denoting the user_watchers edge name in mutations.
	EdgeUserWatchers = "user_watchers"
	// EdgeMetrics holds the string denoting the metrics edge name in mutations.
	EdgeMetrics = "metrics"
	// Table holds the table name of the oncallroster in the database.
	Table = "oncall_rosters"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "oncall_rosters"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// SchedulesTable is the table that holds the schedules relation/edge.
	SchedulesTable = "oncall_schedules"
	// SchedulesInverseTable is the table name for the OncallSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "oncallschedule" package.
	SchedulesInverseTable = "oncall_schedules"
	// SchedulesColumn is the table column denoting the schedules relation/edge.
	SchedulesColumn = "roster_id"
	// HandoverTemplateTable is the table that holds the handover_template relation/edge.
	HandoverTemplateTable = "oncall_rosters"
	// HandoverTemplateInverseTable is the table name for the OncallHandoverTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "oncallhandovertemplate" package.
	HandoverTemplateInverseTable = "oncall_handover_templates"
	// HandoverTemplateColumn is the table column denoting the handover_template relation/edge.
	HandoverTemplateColumn = "handover_template_id"
	// AlertsTable is the table that holds the alerts relation/edge.
	AlertsTable = "alerts"
	// AlertsInverseTable is the table name for the Alert entity.
	// It exists in this package in order to avoid circular dependency with the "alert" package.
	AlertsInverseTable = "alerts"
	// AlertsColumn is the table column denoting the alerts relation/edge.
	AlertsColumn = "roster_id"
	// TeamsTable is the table that holds the teams relation/edge. The primary key declared below.
	TeamsTable = "team_oncall_rosters"
	// TeamsInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamsInverseTable = "teams"
	// ShiftsTable is the table that holds the shifts relation/edge.
	ShiftsTable = "oncall_shifts"
	// ShiftsInverseTable is the table name for the OncallShift entity.
	// It exists in this package in order to avoid circular dependency with the "oncallshift" package.
	ShiftsInverseTable = "oncall_shifts"
	// ShiftsColumn is the table column denoting the shifts relation/edge.
	ShiftsColumn = "roster_id"
	// UserWatchersTable is the table that holds the user_watchers relation/edge. The primary key declared below.
	UserWatchersTable = "user_watched_oncall_rosters"
	// UserWatchersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserWatchersInverseTable = "users"
	// MetricsTable is the table that holds the metrics relation/edge.
	MetricsTable = "oncall_roster_metrics"
	// MetricsInverseTable is the table name for the OncallRosterMetrics entity.
	// It exists in this package in order to avoid circular dependency with the "oncallrostermetrics" package.
	MetricsInverseTable = "oncall_roster_metrics"
	// MetricsColumn is the table column denoting the metrics relation/edge.
	MetricsColumn = "roster_id"
)

// Columns holds all SQL columns for oncallroster fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldArchiveTime,
	FieldName,
	FieldSlug,
	FieldProviderID,
	FieldTimezone,
	FieldChatHandle,
	FieldChatChannelID,
	FieldHandoverTemplateID,
}

var (
	// TeamsPrimaryKey and TeamsColumn2 are the table columns denoting the
	// primary key for the teams relation (M2M).
	TeamsPrimaryKey = []string{"team_id", "oncall_roster_id"}
	// UserWatchersPrimaryKey and UserWatchersColumn2 are the table columns denoting the
	// primary key for the user_watchers relation (M2M).
	UserWatchersPrimaryKey = []string{"user_id", "oncall_roster_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OncallRoster queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByArchiveTime orders the results by the archive_time field.
func ByArchiveTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchiveTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// ByTimezone orders the results by the timezone field.
func ByTimezone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezone, opts...).ToFunc()
}

// ByChatHandle orders the results by the chat_handle field.
func ByChatHandle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChatHandle, opts...).ToFunc()
}

// ByChatChannelID orders the results by the chat_channel_id field.
func ByChatChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChatChannelID, opts...).ToFunc()
}

// ByHandoverTemplateID orders the results by the handover_template_id field.
func ByHandoverTemplateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandoverTemplateID, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// BySchedulesCount orders the results by schedules count.
func BySchedulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSchedulesStep(), opts...)
	}
}

// BySchedules orders the results by schedules terms.
func BySchedules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSchedulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHandoverTemplateField orders the results by handover_template field.
func ByHandoverTemplateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHandoverTemplateStep(), sql.OrderByField(field, opts...))
	}
}

// ByAlertsCount orders the results by alerts count.
func ByAlertsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAlertsStep(), opts...)
	}
}

// ByAlerts orders the results by alerts terms.
func ByAlerts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlertsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTeamsCount orders the results by teams count.
func ByTeamsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTeamsStep(), opts...)
	}
}

// ByTeams orders the results by teams terms.
func ByTeams(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShiftsCount orders the results by shifts count.
func ByShiftsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShiftsStep(), opts...)
	}
}

// ByShifts orders the results by shifts terms.
func ByShifts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShiftsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserWatchersCount orders the results by user_watchers count.
func ByUserWatchersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserWatchersStep(), opts...)
	}
}

// ByUserWatchers orders the results by user_watchers terms.
func ByUserWatchers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserWatchersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMetricsCount orders the results by metrics count.
func ByMetricsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetricsStep(), opts...)
	}
}

// ByMetrics orders the results by metrics terms.
func ByMetrics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetricsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newSchedulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SchedulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SchedulesTable, SchedulesColumn),
	)
}
func newHandoverTemplateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HandoverTemplateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HandoverTemplateTable, HandoverTemplateColumn),
	)
}
func newAlertsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlertsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AlertsTable, AlertsColumn),
	)
}
func newTeamsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TeamsTable, TeamsPrimaryKey...),
	)
}
func newShiftsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShiftsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ShiftsTable, ShiftsColumn),
	)
}
func newUserWatchersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserWatchersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserWatchersTable, UserWatchersPrimaryKey...),
	)
}
func newMetricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MetricsTable, MetricsColumn),
	)
}
