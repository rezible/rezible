// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/rezible/rezible/ent"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/alertfeedback"
	"github.com/rezible/rezible/ent/alertinstance"
	"github.com/rezible/rezible/ent/alertmetrics"
	"github.com/rezible/rezible/ent/document"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/eventannotation"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/incidentdebriefsuggestion"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontext"
	"github.com/rezible/rezible/ent/incidenteventcontributingfactor"
	"github.com/rezible/rezible/ent/incidenteventevidence"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/incidentfield"
	"github.com/rezible/rezible/ent/incidentfieldoption"
	"github.com/rezible/rezible/ent/incidentlink"
	"github.com/rezible/rezible/ent/incidentmilestone"
	"github.com/rezible/rezible/ent/incidentrole"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/incidentseverity"
	"github.com/rezible/rezible/ent/incidenttag"
	"github.com/rezible/rezible/ent/incidenttype"
	"github.com/rezible/rezible/ent/meetingschedule"
	"github.com/rezible/rezible/ent/meetingsession"
	"github.com/rezible/rezible/ent/oncallhandovertemplate"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallrostermetrics"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/oncallshifthandover"
	"github.com/rezible/rezible/ent/oncallshiftmetrics"
	"github.com/rezible/rezible/ent/organization"
	"github.com/rezible/rezible/ent/playbook"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/providerconfig"
	"github.com/rezible/rezible/ent/providersynchistory"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivecomment"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysiscomponent"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentconstraint"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentkind"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemhazard"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemrelationshipfeedbacksignal"
	"github.com/rezible/rezible/ent/task"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/ticket"
	"github.com/rezible/rezible/ent/user"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The AlertFunc type is an adapter to allow the use of ordinary function as a Querier.
type AlertFunc func(context.Context, *ent.AlertQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AlertFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AlertQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AlertQuery", q)
}

// The TraverseAlert type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAlert func(context.Context, *ent.AlertQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAlert) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAlert) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlertQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AlertQuery", q)
}

// The AlertFeedbackFunc type is an adapter to allow the use of ordinary function as a Querier.
type AlertFeedbackFunc func(context.Context, *ent.AlertFeedbackQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AlertFeedbackFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AlertFeedbackQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AlertFeedbackQuery", q)
}

// The TraverseAlertFeedback type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAlertFeedback func(context.Context, *ent.AlertFeedbackQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAlertFeedback) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAlertFeedback) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlertFeedbackQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AlertFeedbackQuery", q)
}

// The AlertInstanceFunc type is an adapter to allow the use of ordinary function as a Querier.
type AlertInstanceFunc func(context.Context, *ent.AlertInstanceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AlertInstanceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AlertInstanceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AlertInstanceQuery", q)
}

// The TraverseAlertInstance type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAlertInstance func(context.Context, *ent.AlertInstanceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAlertInstance) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAlertInstance) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlertInstanceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AlertInstanceQuery", q)
}

// The AlertMetricsFunc type is an adapter to allow the use of ordinary function as a Querier.
type AlertMetricsFunc func(context.Context, *ent.AlertMetricsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AlertMetricsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AlertMetricsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AlertMetricsQuery", q)
}

// The TraverseAlertMetrics type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAlertMetrics func(context.Context, *ent.AlertMetricsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAlertMetrics) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAlertMetrics) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlertMetricsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AlertMetricsQuery", q)
}

// The DocumentFunc type is an adapter to allow the use of ordinary function as a Querier.
type DocumentFunc func(context.Context, *ent.DocumentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DocumentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DocumentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DocumentQuery", q)
}

// The TraverseDocument type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDocument func(context.Context, *ent.DocumentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDocument) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDocument) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DocumentQuery", q)
}

// The EventFunc type is an adapter to allow the use of ordinary function as a Querier.
type EventFunc func(context.Context, *ent.EventQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EventFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EventQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EventQuery", q)
}

// The TraverseEvent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEvent func(context.Context, *ent.EventQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEvent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEvent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EventQuery", q)
}

// The EventAnnotationFunc type is an adapter to allow the use of ordinary function as a Querier.
type EventAnnotationFunc func(context.Context, *ent.EventAnnotationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EventAnnotationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EventAnnotationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EventAnnotationQuery", q)
}

// The TraverseEventAnnotation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEventAnnotation func(context.Context, *ent.EventAnnotationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEventAnnotation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEventAnnotation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventAnnotationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EventAnnotationQuery", q)
}

// The IncidentFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentFunc func(context.Context, *ent.IncidentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentQuery", q)
}

// The TraverseIncident type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncident func(context.Context, *ent.IncidentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncident) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncident) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentQuery", q)
}

// The IncidentDebriefFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentDebriefFunc func(context.Context, *ent.IncidentDebriefQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentDebriefFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentDebriefQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefQuery", q)
}

// The TraverseIncidentDebrief type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentDebrief func(context.Context, *ent.IncidentDebriefQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentDebrief) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentDebrief) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefQuery", q)
}

// The IncidentDebriefMessageFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentDebriefMessageFunc func(context.Context, *ent.IncidentDebriefMessageQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentDebriefMessageFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentDebriefMessageQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefMessageQuery", q)
}

// The TraverseIncidentDebriefMessage type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentDebriefMessage func(context.Context, *ent.IncidentDebriefMessageQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentDebriefMessage) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentDebriefMessage) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefMessageQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefMessageQuery", q)
}

// The IncidentDebriefQuestionFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentDebriefQuestionFunc func(context.Context, *ent.IncidentDebriefQuestionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentDebriefQuestionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentDebriefQuestionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefQuestionQuery", q)
}

// The TraverseIncidentDebriefQuestion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentDebriefQuestion func(context.Context, *ent.IncidentDebriefQuestionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentDebriefQuestion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentDebriefQuestion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefQuestionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefQuestionQuery", q)
}

// The IncidentDebriefSuggestionFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentDebriefSuggestionFunc func(context.Context, *ent.IncidentDebriefSuggestionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentDebriefSuggestionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentDebriefSuggestionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefSuggestionQuery", q)
}

// The TraverseIncidentDebriefSuggestion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentDebriefSuggestion func(context.Context, *ent.IncidentDebriefSuggestionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentDebriefSuggestion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentDebriefSuggestion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefSuggestionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefSuggestionQuery", q)
}

// The IncidentEventFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentEventFunc func(context.Context, *ent.IncidentEventQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentEventFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentEventQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventQuery", q)
}

// The TraverseIncidentEvent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentEvent func(context.Context, *ent.IncidentEventQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentEvent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentEvent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventQuery", q)
}

// The IncidentEventContextFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentEventContextFunc func(context.Context, *ent.IncidentEventContextQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentEventContextFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentEventContextQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventContextQuery", q)
}

// The TraverseIncidentEventContext type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentEventContext func(context.Context, *ent.IncidentEventContextQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentEventContext) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentEventContext) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventContextQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventContextQuery", q)
}

// The IncidentEventContributingFactorFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentEventContributingFactorFunc func(context.Context, *ent.IncidentEventContributingFactorQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentEventContributingFactorFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentEventContributingFactorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventContributingFactorQuery", q)
}

// The TraverseIncidentEventContributingFactor type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentEventContributingFactor func(context.Context, *ent.IncidentEventContributingFactorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentEventContributingFactor) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentEventContributingFactor) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventContributingFactorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventContributingFactorQuery", q)
}

// The IncidentEventEvidenceFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentEventEvidenceFunc func(context.Context, *ent.IncidentEventEvidenceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentEventEvidenceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentEventEvidenceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventEvidenceQuery", q)
}

// The TraverseIncidentEventEvidence type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentEventEvidence func(context.Context, *ent.IncidentEventEvidenceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentEventEvidence) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentEventEvidence) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventEvidenceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventEvidenceQuery", q)
}

// The IncidentEventSystemComponentFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentEventSystemComponentFunc func(context.Context, *ent.IncidentEventSystemComponentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentEventSystemComponentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentEventSystemComponentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventSystemComponentQuery", q)
}

// The TraverseIncidentEventSystemComponent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentEventSystemComponent func(context.Context, *ent.IncidentEventSystemComponentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentEventSystemComponent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentEventSystemComponent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventSystemComponentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventSystemComponentQuery", q)
}

// The IncidentFieldFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentFieldFunc func(context.Context, *ent.IncidentFieldQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentFieldFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentFieldQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentFieldQuery", q)
}

// The TraverseIncidentField type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentField func(context.Context, *ent.IncidentFieldQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentField) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentField) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentFieldQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentFieldQuery", q)
}

// The IncidentFieldOptionFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentFieldOptionFunc func(context.Context, *ent.IncidentFieldOptionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentFieldOptionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentFieldOptionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentFieldOptionQuery", q)
}

// The TraverseIncidentFieldOption type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentFieldOption func(context.Context, *ent.IncidentFieldOptionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentFieldOption) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentFieldOption) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentFieldOptionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentFieldOptionQuery", q)
}

// The IncidentLinkFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentLinkFunc func(context.Context, *ent.IncidentLinkQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentLinkFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentLinkQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentLinkQuery", q)
}

// The TraverseIncidentLink type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentLink func(context.Context, *ent.IncidentLinkQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentLink) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentLink) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentLinkQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentLinkQuery", q)
}

// The IncidentMilestoneFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentMilestoneFunc func(context.Context, *ent.IncidentMilestoneQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentMilestoneFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentMilestoneQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentMilestoneQuery", q)
}

// The TraverseIncidentMilestone type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentMilestone func(context.Context, *ent.IncidentMilestoneQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentMilestone) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentMilestone) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentMilestoneQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentMilestoneQuery", q)
}

// The IncidentRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentRoleFunc func(context.Context, *ent.IncidentRoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentRoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentRoleQuery", q)
}

// The TraverseIncidentRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentRole func(context.Context, *ent.IncidentRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentRoleQuery", q)
}

// The IncidentRoleAssignmentFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentRoleAssignmentFunc func(context.Context, *ent.IncidentRoleAssignmentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentRoleAssignmentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentRoleAssignmentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentRoleAssignmentQuery", q)
}

// The TraverseIncidentRoleAssignment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentRoleAssignment func(context.Context, *ent.IncidentRoleAssignmentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentRoleAssignment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentRoleAssignment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentRoleAssignmentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentRoleAssignmentQuery", q)
}

// The IncidentSeverityFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentSeverityFunc func(context.Context, *ent.IncidentSeverityQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentSeverityFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentSeverityQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentSeverityQuery", q)
}

// The TraverseIncidentSeverity type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentSeverity func(context.Context, *ent.IncidentSeverityQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentSeverity) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentSeverity) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentSeverityQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentSeverityQuery", q)
}

// The IncidentTagFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentTagFunc func(context.Context, *ent.IncidentTagQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentTagFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentTagQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentTagQuery", q)
}

// The TraverseIncidentTag type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentTag func(context.Context, *ent.IncidentTagQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentTag) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentTag) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentTagQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentTagQuery", q)
}

// The IncidentTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentTypeFunc func(context.Context, *ent.IncidentTypeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentTypeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentTypeQuery", q)
}

// The TraverseIncidentType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentType func(context.Context, *ent.IncidentTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentType) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentType) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentTypeQuery", q)
}

// The MeetingScheduleFunc type is an adapter to allow the use of ordinary function as a Querier.
type MeetingScheduleFunc func(context.Context, *ent.MeetingScheduleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MeetingScheduleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MeetingScheduleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MeetingScheduleQuery", q)
}

// The TraverseMeetingSchedule type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMeetingSchedule func(context.Context, *ent.MeetingScheduleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMeetingSchedule) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMeetingSchedule) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MeetingScheduleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MeetingScheduleQuery", q)
}

// The MeetingSessionFunc type is an adapter to allow the use of ordinary function as a Querier.
type MeetingSessionFunc func(context.Context, *ent.MeetingSessionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MeetingSessionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MeetingSessionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MeetingSessionQuery", q)
}

// The TraverseMeetingSession type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMeetingSession func(context.Context, *ent.MeetingSessionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMeetingSession) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMeetingSession) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MeetingSessionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MeetingSessionQuery", q)
}

// The OncallHandoverTemplateFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallHandoverTemplateFunc func(context.Context, *ent.OncallHandoverTemplateQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallHandoverTemplateFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallHandoverTemplateQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallHandoverTemplateQuery", q)
}

// The TraverseOncallHandoverTemplate type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallHandoverTemplate func(context.Context, *ent.OncallHandoverTemplateQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallHandoverTemplate) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallHandoverTemplate) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallHandoverTemplateQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallHandoverTemplateQuery", q)
}

// The OncallRosterFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallRosterFunc func(context.Context, *ent.OncallRosterQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallRosterFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallRosterQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallRosterQuery", q)
}

// The TraverseOncallRoster type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallRoster func(context.Context, *ent.OncallRosterQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallRoster) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallRoster) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallRosterQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallRosterQuery", q)
}

// The OncallRosterMetricsFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallRosterMetricsFunc func(context.Context, *ent.OncallRosterMetricsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallRosterMetricsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallRosterMetricsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallRosterMetricsQuery", q)
}

// The TraverseOncallRosterMetrics type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallRosterMetrics func(context.Context, *ent.OncallRosterMetricsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallRosterMetrics) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallRosterMetrics) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallRosterMetricsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallRosterMetricsQuery", q)
}

// The OncallScheduleFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallScheduleFunc func(context.Context, *ent.OncallScheduleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallScheduleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallScheduleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallScheduleQuery", q)
}

// The TraverseOncallSchedule type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallSchedule func(context.Context, *ent.OncallScheduleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallSchedule) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallSchedule) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallScheduleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallScheduleQuery", q)
}

// The OncallScheduleParticipantFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallScheduleParticipantFunc func(context.Context, *ent.OncallScheduleParticipantQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallScheduleParticipantFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallScheduleParticipantQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallScheduleParticipantQuery", q)
}

// The TraverseOncallScheduleParticipant type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallScheduleParticipant func(context.Context, *ent.OncallScheduleParticipantQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallScheduleParticipant) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallScheduleParticipant) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallScheduleParticipantQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallScheduleParticipantQuery", q)
}

// The OncallShiftFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallShiftFunc func(context.Context, *ent.OncallShiftQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallShiftFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallShiftQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallShiftQuery", q)
}

// The TraverseOncallShift type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallShift func(context.Context, *ent.OncallShiftQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallShift) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallShift) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallShiftQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallShiftQuery", q)
}

// The OncallShiftHandoverFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallShiftHandoverFunc func(context.Context, *ent.OncallShiftHandoverQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallShiftHandoverFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallShiftHandoverQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallShiftHandoverQuery", q)
}

// The TraverseOncallShiftHandover type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallShiftHandover func(context.Context, *ent.OncallShiftHandoverQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallShiftHandover) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallShiftHandover) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallShiftHandoverQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallShiftHandoverQuery", q)
}

// The OncallShiftMetricsFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallShiftMetricsFunc func(context.Context, *ent.OncallShiftMetricsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallShiftMetricsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallShiftMetricsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallShiftMetricsQuery", q)
}

// The TraverseOncallShiftMetrics type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallShiftMetrics func(context.Context, *ent.OncallShiftMetricsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallShiftMetrics) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallShiftMetrics) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallShiftMetricsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallShiftMetricsQuery", q)
}

// The OrganizationFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationFunc func(context.Context, *ent.OrganizationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrganizationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrganizationQuery", q)
}

// The TraverseOrganization type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganization func(context.Context, *ent.OrganizationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganization) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganization) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrganizationQuery", q)
}

// The PlaybookFunc type is an adapter to allow the use of ordinary function as a Querier.
type PlaybookFunc func(context.Context, *ent.PlaybookQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PlaybookFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PlaybookQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PlaybookQuery", q)
}

// The TraversePlaybook type is an adapter to allow the use of ordinary function as Traverser.
type TraversePlaybook func(context.Context, *ent.PlaybookQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePlaybook) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePlaybook) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlaybookQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PlaybookQuery", q)
}

// The ProviderConfigFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProviderConfigFunc func(context.Context, *ent.ProviderConfigQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProviderConfigFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProviderConfigQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProviderConfigQuery", q)
}

// The TraverseProviderConfig type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProviderConfig func(context.Context, *ent.ProviderConfigQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProviderConfig) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProviderConfig) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProviderConfigQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProviderConfigQuery", q)
}

// The ProviderSyncHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProviderSyncHistoryFunc func(context.Context, *ent.ProviderSyncHistoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProviderSyncHistoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProviderSyncHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProviderSyncHistoryQuery", q)
}

// The TraverseProviderSyncHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProviderSyncHistory func(context.Context, *ent.ProviderSyncHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProviderSyncHistory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProviderSyncHistory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProviderSyncHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProviderSyncHistoryQuery", q)
}

// The RetrospectiveFunc type is an adapter to allow the use of ordinary function as a Querier.
type RetrospectiveFunc func(context.Context, *ent.RetrospectiveQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RetrospectiveFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RetrospectiveQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveQuery", q)
}

// The TraverseRetrospective type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRetrospective func(context.Context, *ent.RetrospectiveQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRetrospective) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRetrospective) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RetrospectiveQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveQuery", q)
}

// The RetrospectiveCommentFunc type is an adapter to allow the use of ordinary function as a Querier.
type RetrospectiveCommentFunc func(context.Context, *ent.RetrospectiveCommentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RetrospectiveCommentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RetrospectiveCommentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveCommentQuery", q)
}

// The TraverseRetrospectiveComment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRetrospectiveComment func(context.Context, *ent.RetrospectiveCommentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRetrospectiveComment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRetrospectiveComment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RetrospectiveCommentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveCommentQuery", q)
}

// The RetrospectiveReviewFunc type is an adapter to allow the use of ordinary function as a Querier.
type RetrospectiveReviewFunc func(context.Context, *ent.RetrospectiveReviewQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RetrospectiveReviewFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RetrospectiveReviewQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveReviewQuery", q)
}

// The TraverseRetrospectiveReview type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRetrospectiveReview func(context.Context, *ent.RetrospectiveReviewQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRetrospectiveReview) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRetrospectiveReview) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RetrospectiveReviewQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveReviewQuery", q)
}

// The SystemAnalysisFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemAnalysisFunc func(context.Context, *ent.SystemAnalysisQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemAnalysisFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemAnalysisQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemAnalysisQuery", q)
}

// The TraverseSystemAnalysis type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemAnalysis func(context.Context, *ent.SystemAnalysisQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemAnalysis) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemAnalysis) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemAnalysisQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemAnalysisQuery", q)
}

// The SystemAnalysisComponentFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemAnalysisComponentFunc func(context.Context, *ent.SystemAnalysisComponentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemAnalysisComponentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemAnalysisComponentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemAnalysisComponentQuery", q)
}

// The TraverseSystemAnalysisComponent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemAnalysisComponent func(context.Context, *ent.SystemAnalysisComponentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemAnalysisComponent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemAnalysisComponent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemAnalysisComponentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemAnalysisComponentQuery", q)
}

// The SystemAnalysisRelationshipFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemAnalysisRelationshipFunc func(context.Context, *ent.SystemAnalysisRelationshipQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemAnalysisRelationshipFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemAnalysisRelationshipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemAnalysisRelationshipQuery", q)
}

// The TraverseSystemAnalysisRelationship type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemAnalysisRelationship func(context.Context, *ent.SystemAnalysisRelationshipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemAnalysisRelationship) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemAnalysisRelationship) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemAnalysisRelationshipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemAnalysisRelationshipQuery", q)
}

// The SystemComponentFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentFunc func(context.Context, *ent.SystemComponentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentQuery", q)
}

// The TraverseSystemComponent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponent func(context.Context, *ent.SystemComponentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentQuery", q)
}

// The SystemComponentConstraintFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentConstraintFunc func(context.Context, *ent.SystemComponentConstraintQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentConstraintFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentConstraintQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentConstraintQuery", q)
}

// The TraverseSystemComponentConstraint type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponentConstraint func(context.Context, *ent.SystemComponentConstraintQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponentConstraint) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponentConstraint) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentConstraintQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentConstraintQuery", q)
}

// The SystemComponentControlFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentControlFunc func(context.Context, *ent.SystemComponentControlQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentControlFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentControlQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentControlQuery", q)
}

// The TraverseSystemComponentControl type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponentControl func(context.Context, *ent.SystemComponentControlQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponentControl) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponentControl) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentControlQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentControlQuery", q)
}

// The SystemComponentKindFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentKindFunc func(context.Context, *ent.SystemComponentKindQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentKindFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentKindQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentKindQuery", q)
}

// The TraverseSystemComponentKind type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponentKind func(context.Context, *ent.SystemComponentKindQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponentKind) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponentKind) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentKindQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentKindQuery", q)
}

// The SystemComponentRelationshipFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentRelationshipFunc func(context.Context, *ent.SystemComponentRelationshipQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentRelationshipFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentRelationshipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentRelationshipQuery", q)
}

// The TraverseSystemComponentRelationship type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponentRelationship func(context.Context, *ent.SystemComponentRelationshipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponentRelationship) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponentRelationship) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentRelationshipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentRelationshipQuery", q)
}

// The SystemComponentSignalFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentSignalFunc func(context.Context, *ent.SystemComponentSignalQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentSignalFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentSignalQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentSignalQuery", q)
}

// The TraverseSystemComponentSignal type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponentSignal func(context.Context, *ent.SystemComponentSignalQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponentSignal) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponentSignal) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentSignalQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentSignalQuery", q)
}

// The SystemHazardFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemHazardFunc func(context.Context, *ent.SystemHazardQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemHazardFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemHazardQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemHazardQuery", q)
}

// The TraverseSystemHazard type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemHazard func(context.Context, *ent.SystemHazardQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemHazard) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemHazard) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemHazardQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemHazardQuery", q)
}

// The SystemRelationshipControlActionFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemRelationshipControlActionFunc func(context.Context, *ent.SystemRelationshipControlActionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemRelationshipControlActionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemRelationshipControlActionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemRelationshipControlActionQuery", q)
}

// The TraverseSystemRelationshipControlAction type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemRelationshipControlAction func(context.Context, *ent.SystemRelationshipControlActionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemRelationshipControlAction) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemRelationshipControlAction) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemRelationshipControlActionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemRelationshipControlActionQuery", q)
}

// The SystemRelationshipFeedbackSignalFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemRelationshipFeedbackSignalFunc func(context.Context, *ent.SystemRelationshipFeedbackSignalQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemRelationshipFeedbackSignalFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemRelationshipFeedbackSignalQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemRelationshipFeedbackSignalQuery", q)
}

// The TraverseSystemRelationshipFeedbackSignal type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemRelationshipFeedbackSignal func(context.Context, *ent.SystemRelationshipFeedbackSignalQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemRelationshipFeedbackSignal) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemRelationshipFeedbackSignal) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemRelationshipFeedbackSignalQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemRelationshipFeedbackSignalQuery", q)
}

// The TaskFunc type is an adapter to allow the use of ordinary function as a Querier.
type TaskFunc func(context.Context, *ent.TaskQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TaskFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TaskQuery", q)
}

// The TraverseTask type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTask func(context.Context, *ent.TaskQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTask) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTask) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TaskQuery", q)
}

// The TeamFunc type is an adapter to allow the use of ordinary function as a Querier.
type TeamFunc func(context.Context, *ent.TeamQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TeamFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TeamQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TeamQuery", q)
}

// The TraverseTeam type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTeam func(context.Context, *ent.TeamQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTeam) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTeam) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TeamQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TeamQuery", q)
}

// The TenantFunc type is an adapter to allow the use of ordinary function as a Querier.
type TenantFunc func(context.Context, *ent.TenantQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TenantFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TenantQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TenantQuery", q)
}

// The TraverseTenant type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTenant func(context.Context, *ent.TenantQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTenant) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTenant) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TenantQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TenantQuery", q)
}

// The TicketFunc type is an adapter to allow the use of ordinary function as a Querier.
type TicketFunc func(context.Context, *ent.TicketQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TicketFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TicketQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TicketQuery", q)
}

// The TraverseTicket type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTicket func(context.Context, *ent.TicketQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTicket) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTicket) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TicketQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TicketQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.AlertQuery:
		return &query[*ent.AlertQuery, predicate.Alert, alert.OrderOption]{typ: ent.TypeAlert, tq: q}, nil
	case *ent.AlertFeedbackQuery:
		return &query[*ent.AlertFeedbackQuery, predicate.AlertFeedback, alertfeedback.OrderOption]{typ: ent.TypeAlertFeedback, tq: q}, nil
	case *ent.AlertInstanceQuery:
		return &query[*ent.AlertInstanceQuery, predicate.AlertInstance, alertinstance.OrderOption]{typ: ent.TypeAlertInstance, tq: q}, nil
	case *ent.AlertMetricsQuery:
		return &query[*ent.AlertMetricsQuery, predicate.AlertMetrics, alertmetrics.OrderOption]{typ: ent.TypeAlertMetrics, tq: q}, nil
	case *ent.DocumentQuery:
		return &query[*ent.DocumentQuery, predicate.Document, document.OrderOption]{typ: ent.TypeDocument, tq: q}, nil
	case *ent.EventQuery:
		return &query[*ent.EventQuery, predicate.Event, event.OrderOption]{typ: ent.TypeEvent, tq: q}, nil
	case *ent.EventAnnotationQuery:
		return &query[*ent.EventAnnotationQuery, predicate.EventAnnotation, eventannotation.OrderOption]{typ: ent.TypeEventAnnotation, tq: q}, nil
	case *ent.IncidentQuery:
		return &query[*ent.IncidentQuery, predicate.Incident, incident.OrderOption]{typ: ent.TypeIncident, tq: q}, nil
	case *ent.IncidentDebriefQuery:
		return &query[*ent.IncidentDebriefQuery, predicate.IncidentDebrief, incidentdebrief.OrderOption]{typ: ent.TypeIncidentDebrief, tq: q}, nil
	case *ent.IncidentDebriefMessageQuery:
		return &query[*ent.IncidentDebriefMessageQuery, predicate.IncidentDebriefMessage, incidentdebriefmessage.OrderOption]{typ: ent.TypeIncidentDebriefMessage, tq: q}, nil
	case *ent.IncidentDebriefQuestionQuery:
		return &query[*ent.IncidentDebriefQuestionQuery, predicate.IncidentDebriefQuestion, incidentdebriefquestion.OrderOption]{typ: ent.TypeIncidentDebriefQuestion, tq: q}, nil
	case *ent.IncidentDebriefSuggestionQuery:
		return &query[*ent.IncidentDebriefSuggestionQuery, predicate.IncidentDebriefSuggestion, incidentdebriefsuggestion.OrderOption]{typ: ent.TypeIncidentDebriefSuggestion, tq: q}, nil
	case *ent.IncidentEventQuery:
		return &query[*ent.IncidentEventQuery, predicate.IncidentEvent, incidentevent.OrderOption]{typ: ent.TypeIncidentEvent, tq: q}, nil
	case *ent.IncidentEventContextQuery:
		return &query[*ent.IncidentEventContextQuery, predicate.IncidentEventContext, incidenteventcontext.OrderOption]{typ: ent.TypeIncidentEventContext, tq: q}, nil
	case *ent.IncidentEventContributingFactorQuery:
		return &query[*ent.IncidentEventContributingFactorQuery, predicate.IncidentEventContributingFactor, incidenteventcontributingfactor.OrderOption]{typ: ent.TypeIncidentEventContributingFactor, tq: q}, nil
	case *ent.IncidentEventEvidenceQuery:
		return &query[*ent.IncidentEventEvidenceQuery, predicate.IncidentEventEvidence, incidenteventevidence.OrderOption]{typ: ent.TypeIncidentEventEvidence, tq: q}, nil
	case *ent.IncidentEventSystemComponentQuery:
		return &query[*ent.IncidentEventSystemComponentQuery, predicate.IncidentEventSystemComponent, incidenteventsystemcomponent.OrderOption]{typ: ent.TypeIncidentEventSystemComponent, tq: q}, nil
	case *ent.IncidentFieldQuery:
		return &query[*ent.IncidentFieldQuery, predicate.IncidentField, incidentfield.OrderOption]{typ: ent.TypeIncidentField, tq: q}, nil
	case *ent.IncidentFieldOptionQuery:
		return &query[*ent.IncidentFieldOptionQuery, predicate.IncidentFieldOption, incidentfieldoption.OrderOption]{typ: ent.TypeIncidentFieldOption, tq: q}, nil
	case *ent.IncidentLinkQuery:
		return &query[*ent.IncidentLinkQuery, predicate.IncidentLink, incidentlink.OrderOption]{typ: ent.TypeIncidentLink, tq: q}, nil
	case *ent.IncidentMilestoneQuery:
		return &query[*ent.IncidentMilestoneQuery, predicate.IncidentMilestone, incidentmilestone.OrderOption]{typ: ent.TypeIncidentMilestone, tq: q}, nil
	case *ent.IncidentRoleQuery:
		return &query[*ent.IncidentRoleQuery, predicate.IncidentRole, incidentrole.OrderOption]{typ: ent.TypeIncidentRole, tq: q}, nil
	case *ent.IncidentRoleAssignmentQuery:
		return &query[*ent.IncidentRoleAssignmentQuery, predicate.IncidentRoleAssignment, incidentroleassignment.OrderOption]{typ: ent.TypeIncidentRoleAssignment, tq: q}, nil
	case *ent.IncidentSeverityQuery:
		return &query[*ent.IncidentSeverityQuery, predicate.IncidentSeverity, incidentseverity.OrderOption]{typ: ent.TypeIncidentSeverity, tq: q}, nil
	case *ent.IncidentTagQuery:
		return &query[*ent.IncidentTagQuery, predicate.IncidentTag, incidenttag.OrderOption]{typ: ent.TypeIncidentTag, tq: q}, nil
	case *ent.IncidentTypeQuery:
		return &query[*ent.IncidentTypeQuery, predicate.IncidentType, incidenttype.OrderOption]{typ: ent.TypeIncidentType, tq: q}, nil
	case *ent.MeetingScheduleQuery:
		return &query[*ent.MeetingScheduleQuery, predicate.MeetingSchedule, meetingschedule.OrderOption]{typ: ent.TypeMeetingSchedule, tq: q}, nil
	case *ent.MeetingSessionQuery:
		return &query[*ent.MeetingSessionQuery, predicate.MeetingSession, meetingsession.OrderOption]{typ: ent.TypeMeetingSession, tq: q}, nil
	case *ent.OncallHandoverTemplateQuery:
		return &query[*ent.OncallHandoverTemplateQuery, predicate.OncallHandoverTemplate, oncallhandovertemplate.OrderOption]{typ: ent.TypeOncallHandoverTemplate, tq: q}, nil
	case *ent.OncallRosterQuery:
		return &query[*ent.OncallRosterQuery, predicate.OncallRoster, oncallroster.OrderOption]{typ: ent.TypeOncallRoster, tq: q}, nil
	case *ent.OncallRosterMetricsQuery:
		return &query[*ent.OncallRosterMetricsQuery, predicate.OncallRosterMetrics, oncallrostermetrics.OrderOption]{typ: ent.TypeOncallRosterMetrics, tq: q}, nil
	case *ent.OncallScheduleQuery:
		return &query[*ent.OncallScheduleQuery, predicate.OncallSchedule, oncallschedule.OrderOption]{typ: ent.TypeOncallSchedule, tq: q}, nil
	case *ent.OncallScheduleParticipantQuery:
		return &query[*ent.OncallScheduleParticipantQuery, predicate.OncallScheduleParticipant, oncallscheduleparticipant.OrderOption]{typ: ent.TypeOncallScheduleParticipant, tq: q}, nil
	case *ent.OncallShiftQuery:
		return &query[*ent.OncallShiftQuery, predicate.OncallShift, oncallshift.OrderOption]{typ: ent.TypeOncallShift, tq: q}, nil
	case *ent.OncallShiftHandoverQuery:
		return &query[*ent.OncallShiftHandoverQuery, predicate.OncallShiftHandover, oncallshifthandover.OrderOption]{typ: ent.TypeOncallShiftHandover, tq: q}, nil
	case *ent.OncallShiftMetricsQuery:
		return &query[*ent.OncallShiftMetricsQuery, predicate.OncallShiftMetrics, oncallshiftmetrics.OrderOption]{typ: ent.TypeOncallShiftMetrics, tq: q}, nil
	case *ent.OrganizationQuery:
		return &query[*ent.OrganizationQuery, predicate.Organization, organization.OrderOption]{typ: ent.TypeOrganization, tq: q}, nil
	case *ent.PlaybookQuery:
		return &query[*ent.PlaybookQuery, predicate.Playbook, playbook.OrderOption]{typ: ent.TypePlaybook, tq: q}, nil
	case *ent.ProviderConfigQuery:
		return &query[*ent.ProviderConfigQuery, predicate.ProviderConfig, providerconfig.OrderOption]{typ: ent.TypeProviderConfig, tq: q}, nil
	case *ent.ProviderSyncHistoryQuery:
		return &query[*ent.ProviderSyncHistoryQuery, predicate.ProviderSyncHistory, providersynchistory.OrderOption]{typ: ent.TypeProviderSyncHistory, tq: q}, nil
	case *ent.RetrospectiveQuery:
		return &query[*ent.RetrospectiveQuery, predicate.Retrospective, retrospective.OrderOption]{typ: ent.TypeRetrospective, tq: q}, nil
	case *ent.RetrospectiveCommentQuery:
		return &query[*ent.RetrospectiveCommentQuery, predicate.RetrospectiveComment, retrospectivecomment.OrderOption]{typ: ent.TypeRetrospectiveComment, tq: q}, nil
	case *ent.RetrospectiveReviewQuery:
		return &query[*ent.RetrospectiveReviewQuery, predicate.RetrospectiveReview, retrospectivereview.OrderOption]{typ: ent.TypeRetrospectiveReview, tq: q}, nil
	case *ent.SystemAnalysisQuery:
		return &query[*ent.SystemAnalysisQuery, predicate.SystemAnalysis, systemanalysis.OrderOption]{typ: ent.TypeSystemAnalysis, tq: q}, nil
	case *ent.SystemAnalysisComponentQuery:
		return &query[*ent.SystemAnalysisComponentQuery, predicate.SystemAnalysisComponent, systemanalysiscomponent.OrderOption]{typ: ent.TypeSystemAnalysisComponent, tq: q}, nil
	case *ent.SystemAnalysisRelationshipQuery:
		return &query[*ent.SystemAnalysisRelationshipQuery, predicate.SystemAnalysisRelationship, systemanalysisrelationship.OrderOption]{typ: ent.TypeSystemAnalysisRelationship, tq: q}, nil
	case *ent.SystemComponentQuery:
		return &query[*ent.SystemComponentQuery, predicate.SystemComponent, systemcomponent.OrderOption]{typ: ent.TypeSystemComponent, tq: q}, nil
	case *ent.SystemComponentConstraintQuery:
		return &query[*ent.SystemComponentConstraintQuery, predicate.SystemComponentConstraint, systemcomponentconstraint.OrderOption]{typ: ent.TypeSystemComponentConstraint, tq: q}, nil
	case *ent.SystemComponentControlQuery:
		return &query[*ent.SystemComponentControlQuery, predicate.SystemComponentControl, systemcomponentcontrol.OrderOption]{typ: ent.TypeSystemComponentControl, tq: q}, nil
	case *ent.SystemComponentKindQuery:
		return &query[*ent.SystemComponentKindQuery, predicate.SystemComponentKind, systemcomponentkind.OrderOption]{typ: ent.TypeSystemComponentKind, tq: q}, nil
	case *ent.SystemComponentRelationshipQuery:
		return &query[*ent.SystemComponentRelationshipQuery, predicate.SystemComponentRelationship, systemcomponentrelationship.OrderOption]{typ: ent.TypeSystemComponentRelationship, tq: q}, nil
	case *ent.SystemComponentSignalQuery:
		return &query[*ent.SystemComponentSignalQuery, predicate.SystemComponentSignal, systemcomponentsignal.OrderOption]{typ: ent.TypeSystemComponentSignal, tq: q}, nil
	case *ent.SystemHazardQuery:
		return &query[*ent.SystemHazardQuery, predicate.SystemHazard, systemhazard.OrderOption]{typ: ent.TypeSystemHazard, tq: q}, nil
	case *ent.SystemRelationshipControlActionQuery:
		return &query[*ent.SystemRelationshipControlActionQuery, predicate.SystemRelationshipControlAction, systemrelationshipcontrolaction.OrderOption]{typ: ent.TypeSystemRelationshipControlAction, tq: q}, nil
	case *ent.SystemRelationshipFeedbackSignalQuery:
		return &query[*ent.SystemRelationshipFeedbackSignalQuery, predicate.SystemRelationshipFeedbackSignal, systemrelationshipfeedbacksignal.OrderOption]{typ: ent.TypeSystemRelationshipFeedbackSignal, tq: q}, nil
	case *ent.TaskQuery:
		return &query[*ent.TaskQuery, predicate.Task, task.OrderOption]{typ: ent.TypeTask, tq: q}, nil
	case *ent.TeamQuery:
		return &query[*ent.TeamQuery, predicate.Team, team.OrderOption]{typ: ent.TypeTeam, tq: q}, nil
	case *ent.TenantQuery:
		return &query[*ent.TenantQuery, predicate.Tenant, tenant.OrderOption]{typ: ent.TypeTenant, tq: q}, nil
	case *ent.TicketQuery:
		return &query[*ent.TicketQuery, predicate.Ticket, ticket.OrderOption]{typ: ent.TypeTicket, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
