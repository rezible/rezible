// Code generated by ent, DO NOT EDIT.

package ent

import "entgo.io/ent/dialect"

func (c *AlertClient) Debug() *AlertClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &AlertClient{config: cfg}
}

func (c *AlertFeedbackClient) Debug() *AlertFeedbackClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &AlertFeedbackClient{config: cfg}
}

func (c *AlertInstanceClient) Debug() *AlertInstanceClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &AlertInstanceClient{config: cfg}
}

func (c *AlertMetricsClient) Debug() *AlertMetricsClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &AlertMetricsClient{config: cfg}
}

func (c *DocumentClient) Debug() *DocumentClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &DocumentClient{config: cfg}
}

func (c *EventClient) Debug() *EventClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &EventClient{config: cfg}
}

func (c *EventAnnotationClient) Debug() *EventAnnotationClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &EventAnnotationClient{config: cfg}
}

func (c *IncidentClient) Debug() *IncidentClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentClient{config: cfg}
}

func (c *IncidentDebriefClient) Debug() *IncidentDebriefClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentDebriefClient{config: cfg}
}

func (c *IncidentDebriefMessageClient) Debug() *IncidentDebriefMessageClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentDebriefMessageClient{config: cfg}
}

func (c *IncidentDebriefQuestionClient) Debug() *IncidentDebriefQuestionClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentDebriefQuestionClient{config: cfg}
}

func (c *IncidentDebriefSuggestionClient) Debug() *IncidentDebriefSuggestionClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentDebriefSuggestionClient{config: cfg}
}

func (c *IncidentEventClient) Debug() *IncidentEventClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentEventClient{config: cfg}
}

func (c *IncidentEventContextClient) Debug() *IncidentEventContextClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentEventContextClient{config: cfg}
}

func (c *IncidentEventContributingFactorClient) Debug() *IncidentEventContributingFactorClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentEventContributingFactorClient{config: cfg}
}

func (c *IncidentEventEvidenceClient) Debug() *IncidentEventEvidenceClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentEventEvidenceClient{config: cfg}
}

func (c *IncidentEventSystemComponentClient) Debug() *IncidentEventSystemComponentClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentEventSystemComponentClient{config: cfg}
}

func (c *IncidentFieldClient) Debug() *IncidentFieldClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentFieldClient{config: cfg}
}

func (c *IncidentFieldOptionClient) Debug() *IncidentFieldOptionClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentFieldOptionClient{config: cfg}
}

func (c *IncidentLinkClient) Debug() *IncidentLinkClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentLinkClient{config: cfg}
}

func (c *IncidentMilestoneClient) Debug() *IncidentMilestoneClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentMilestoneClient{config: cfg}
}

func (c *IncidentRoleClient) Debug() *IncidentRoleClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentRoleClient{config: cfg}
}

func (c *IncidentRoleAssignmentClient) Debug() *IncidentRoleAssignmentClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentRoleAssignmentClient{config: cfg}
}

func (c *IncidentSeverityClient) Debug() *IncidentSeverityClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentSeverityClient{config: cfg}
}

func (c *IncidentTagClient) Debug() *IncidentTagClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentTagClient{config: cfg}
}

func (c *IncidentTypeClient) Debug() *IncidentTypeClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &IncidentTypeClient{config: cfg}
}

func (c *MeetingScheduleClient) Debug() *MeetingScheduleClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &MeetingScheduleClient{config: cfg}
}

func (c *MeetingSessionClient) Debug() *MeetingSessionClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &MeetingSessionClient{config: cfg}
}

func (c *OncallHandoverTemplateClient) Debug() *OncallHandoverTemplateClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &OncallHandoverTemplateClient{config: cfg}
}

func (c *OncallRosterClient) Debug() *OncallRosterClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &OncallRosterClient{config: cfg}
}

func (c *OncallRosterMetricsClient) Debug() *OncallRosterMetricsClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &OncallRosterMetricsClient{config: cfg}
}

func (c *OncallScheduleClient) Debug() *OncallScheduleClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &OncallScheduleClient{config: cfg}
}

func (c *OncallScheduleParticipantClient) Debug() *OncallScheduleParticipantClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &OncallScheduleParticipantClient{config: cfg}
}

func (c *OncallShiftClient) Debug() *OncallShiftClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &OncallShiftClient{config: cfg}
}

func (c *OncallShiftHandoverClient) Debug() *OncallShiftHandoverClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &OncallShiftHandoverClient{config: cfg}
}

func (c *OncallShiftMetricsClient) Debug() *OncallShiftMetricsClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &OncallShiftMetricsClient{config: cfg}
}

func (c *PlaybookClient) Debug() *PlaybookClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &PlaybookClient{config: cfg}
}

func (c *ProviderConfigClient) Debug() *ProviderConfigClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &ProviderConfigClient{config: cfg}
}

func (c *ProviderSyncHistoryClient) Debug() *ProviderSyncHistoryClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &ProviderSyncHistoryClient{config: cfg}
}

func (c *RetrospectiveClient) Debug() *RetrospectiveClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &RetrospectiveClient{config: cfg}
}

func (c *RetrospectiveCommentClient) Debug() *RetrospectiveCommentClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &RetrospectiveCommentClient{config: cfg}
}

func (c *RetrospectiveReviewClient) Debug() *RetrospectiveReviewClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &RetrospectiveReviewClient{config: cfg}
}

func (c *SystemAnalysisClient) Debug() *SystemAnalysisClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemAnalysisClient{config: cfg}
}

func (c *SystemAnalysisComponentClient) Debug() *SystemAnalysisComponentClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemAnalysisComponentClient{config: cfg}
}

func (c *SystemAnalysisRelationshipClient) Debug() *SystemAnalysisRelationshipClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemAnalysisRelationshipClient{config: cfg}
}

func (c *SystemComponentClient) Debug() *SystemComponentClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemComponentClient{config: cfg}
}

func (c *SystemComponentConstraintClient) Debug() *SystemComponentConstraintClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemComponentConstraintClient{config: cfg}
}

func (c *SystemComponentControlClient) Debug() *SystemComponentControlClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemComponentControlClient{config: cfg}
}

func (c *SystemComponentKindClient) Debug() *SystemComponentKindClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemComponentKindClient{config: cfg}
}

func (c *SystemComponentRelationshipClient) Debug() *SystemComponentRelationshipClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemComponentRelationshipClient{config: cfg}
}

func (c *SystemComponentSignalClient) Debug() *SystemComponentSignalClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemComponentSignalClient{config: cfg}
}

func (c *SystemHazardClient) Debug() *SystemHazardClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemHazardClient{config: cfg}
}

func (c *SystemRelationshipControlActionClient) Debug() *SystemRelationshipControlActionClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemRelationshipControlActionClient{config: cfg}
}

func (c *SystemRelationshipFeedbackSignalClient) Debug() *SystemRelationshipFeedbackSignalClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &SystemRelationshipFeedbackSignalClient{config: cfg}
}

func (c *TaskClient) Debug() *TaskClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &TaskClient{config: cfg}
}

func (c *TeamClient) Debug() *TeamClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &TeamClient{config: cfg}
}

func (c *TenantClient) Debug() *TenantClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &TenantClient{config: cfg}
}

func (c *TicketClient) Debug() *TicketClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &TicketClient{config: cfg}
}

func (c *UserClient) Debug() *UserClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks, inters: c.inters}
	return &UserClient{config: cfg}
}
