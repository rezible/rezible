// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alertfeedback"
	"github.com/rezible/rezible/ent/alertinstance"
	"github.com/rezible/rezible/ent/tenant"
)

// AlertFeedbackCreate is the builder for creating a AlertFeedback entity.
type AlertFeedbackCreate struct {
	config
	mutation *AlertFeedbackMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (afc *AlertFeedbackCreate) SetTenantID(i int) *AlertFeedbackCreate {
	afc.mutation.SetTenantID(i)
	return afc
}

// SetAlertInstanceID sets the "alert_instance_id" field.
func (afc *AlertFeedbackCreate) SetAlertInstanceID(u uuid.UUID) *AlertFeedbackCreate {
	afc.mutation.SetAlertInstanceID(u)
	return afc
}

// SetActionable sets the "actionable" field.
func (afc *AlertFeedbackCreate) SetActionable(b bool) *AlertFeedbackCreate {
	afc.mutation.SetActionable(b)
	return afc
}

// SetAccurate sets the "accurate" field.
func (afc *AlertFeedbackCreate) SetAccurate(a alertfeedback.Accurate) *AlertFeedbackCreate {
	afc.mutation.SetAccurate(a)
	return afc
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (afc *AlertFeedbackCreate) SetDocumentationAvailable(b bool) *AlertFeedbackCreate {
	afc.mutation.SetDocumentationAvailable(b)
	return afc
}

// SetDocumentationNeedsUpdate sets the "documentation_needs_update" field.
func (afc *AlertFeedbackCreate) SetDocumentationNeedsUpdate(b bool) *AlertFeedbackCreate {
	afc.mutation.SetDocumentationNeedsUpdate(b)
	return afc
}

// SetID sets the "id" field.
func (afc *AlertFeedbackCreate) SetID(u uuid.UUID) *AlertFeedbackCreate {
	afc.mutation.SetID(u)
	return afc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (afc *AlertFeedbackCreate) SetNillableID(u *uuid.UUID) *AlertFeedbackCreate {
	if u != nil {
		afc.SetID(*u)
	}
	return afc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (afc *AlertFeedbackCreate) SetTenant(t *Tenant) *AlertFeedbackCreate {
	return afc.SetTenantID(t.ID)
}

// SetAlertInstance sets the "alert_instance" edge to the AlertInstance entity.
func (afc *AlertFeedbackCreate) SetAlertInstance(a *AlertInstance) *AlertFeedbackCreate {
	return afc.SetAlertInstanceID(a.ID)
}

// Mutation returns the AlertFeedbackMutation object of the builder.
func (afc *AlertFeedbackCreate) Mutation() *AlertFeedbackMutation {
	return afc.mutation
}

// Save creates the AlertFeedback in the database.
func (afc *AlertFeedbackCreate) Save(ctx context.Context) (*AlertFeedback, error) {
	if err := afc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, afc.sqlSave, afc.mutation, afc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (afc *AlertFeedbackCreate) SaveX(ctx context.Context) *AlertFeedback {
	v, err := afc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (afc *AlertFeedbackCreate) Exec(ctx context.Context) error {
	_, err := afc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afc *AlertFeedbackCreate) ExecX(ctx context.Context) {
	if err := afc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (afc *AlertFeedbackCreate) defaults() error {
	if _, ok := afc.mutation.ID(); !ok {
		if alertfeedback.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized alertfeedback.DefaultID (forgotten import ent/runtime?)")
		}
		v := alertfeedback.DefaultID()
		afc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (afc *AlertFeedbackCreate) check() error {
	if _, ok := afc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "AlertFeedback.tenant_id"`)}
	}
	if _, ok := afc.mutation.AlertInstanceID(); !ok {
		return &ValidationError{Name: "alert_instance_id", err: errors.New(`ent: missing required field "AlertFeedback.alert_instance_id"`)}
	}
	if _, ok := afc.mutation.Actionable(); !ok {
		return &ValidationError{Name: "actionable", err: errors.New(`ent: missing required field "AlertFeedback.actionable"`)}
	}
	if _, ok := afc.mutation.Accurate(); !ok {
		return &ValidationError{Name: "accurate", err: errors.New(`ent: missing required field "AlertFeedback.accurate"`)}
	}
	if v, ok := afc.mutation.Accurate(); ok {
		if err := alertfeedback.AccurateValidator(v); err != nil {
			return &ValidationError{Name: "accurate", err: fmt.Errorf(`ent: validator failed for field "AlertFeedback.accurate": %w`, err)}
		}
	}
	if _, ok := afc.mutation.DocumentationAvailable(); !ok {
		return &ValidationError{Name: "documentation_available", err: errors.New(`ent: missing required field "AlertFeedback.documentation_available"`)}
	}
	if _, ok := afc.mutation.DocumentationNeedsUpdate(); !ok {
		return &ValidationError{Name: "documentation_needs_update", err: errors.New(`ent: missing required field "AlertFeedback.documentation_needs_update"`)}
	}
	if len(afc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "AlertFeedback.tenant"`)}
	}
	if len(afc.mutation.AlertInstanceIDs()) == 0 {
		return &ValidationError{Name: "alert_instance", err: errors.New(`ent: missing required edge "AlertFeedback.alert_instance"`)}
	}
	return nil
}

func (afc *AlertFeedbackCreate) sqlSave(ctx context.Context) (*AlertFeedback, error) {
	if err := afc.check(); err != nil {
		return nil, err
	}
	_node, _spec := afc.createSpec()
	if err := sqlgraph.CreateNode(ctx, afc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	afc.mutation.id = &_node.ID
	afc.mutation.done = true
	return _node, nil
}

func (afc *AlertFeedbackCreate) createSpec() (*AlertFeedback, *sqlgraph.CreateSpec) {
	var (
		_node = &AlertFeedback{config: afc.config}
		_spec = sqlgraph.NewCreateSpec(alertfeedback.Table, sqlgraph.NewFieldSpec(alertfeedback.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = afc.conflict
	if id, ok := afc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := afc.mutation.Actionable(); ok {
		_spec.SetField(alertfeedback.FieldActionable, field.TypeBool, value)
		_node.Actionable = value
	}
	if value, ok := afc.mutation.Accurate(); ok {
		_spec.SetField(alertfeedback.FieldAccurate, field.TypeEnum, value)
		_node.Accurate = value
	}
	if value, ok := afc.mutation.DocumentationAvailable(); ok {
		_spec.SetField(alertfeedback.FieldDocumentationAvailable, field.TypeBool, value)
		_node.DocumentationAvailable = value
	}
	if value, ok := afc.mutation.DocumentationNeedsUpdate(); ok {
		_spec.SetField(alertfeedback.FieldDocumentationNeedsUpdate, field.TypeBool, value)
		_node.DocumentationNeedsUpdate = value
	}
	if nodes := afc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertfeedback.TenantTable,
			Columns: []string{alertfeedback.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := afc.mutation.AlertInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertfeedback.AlertInstanceTable,
			Columns: []string{alertfeedback.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AlertInstanceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AlertFeedback.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AlertFeedbackUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (afc *AlertFeedbackCreate) OnConflict(opts ...sql.ConflictOption) *AlertFeedbackUpsertOne {
	afc.conflict = opts
	return &AlertFeedbackUpsertOne{
		create: afc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AlertFeedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (afc *AlertFeedbackCreate) OnConflictColumns(columns ...string) *AlertFeedbackUpsertOne {
	afc.conflict = append(afc.conflict, sql.ConflictColumns(columns...))
	return &AlertFeedbackUpsertOne{
		create: afc,
	}
}

type (
	// AlertFeedbackUpsertOne is the builder for "upsert"-ing
	//  one AlertFeedback node.
	AlertFeedbackUpsertOne struct {
		create *AlertFeedbackCreate
	}

	// AlertFeedbackUpsert is the "OnConflict" setter.
	AlertFeedbackUpsert struct {
		*sql.UpdateSet
	}
)

// SetAlertInstanceID sets the "alert_instance_id" field.
func (u *AlertFeedbackUpsert) SetAlertInstanceID(v uuid.UUID) *AlertFeedbackUpsert {
	u.Set(alertfeedback.FieldAlertInstanceID, v)
	return u
}

// UpdateAlertInstanceID sets the "alert_instance_id" field to the value that was provided on create.
func (u *AlertFeedbackUpsert) UpdateAlertInstanceID() *AlertFeedbackUpsert {
	u.SetExcluded(alertfeedback.FieldAlertInstanceID)
	return u
}

// SetActionable sets the "actionable" field.
func (u *AlertFeedbackUpsert) SetActionable(v bool) *AlertFeedbackUpsert {
	u.Set(alertfeedback.FieldActionable, v)
	return u
}

// UpdateActionable sets the "actionable" field to the value that was provided on create.
func (u *AlertFeedbackUpsert) UpdateActionable() *AlertFeedbackUpsert {
	u.SetExcluded(alertfeedback.FieldActionable)
	return u
}

// SetAccurate sets the "accurate" field.
func (u *AlertFeedbackUpsert) SetAccurate(v alertfeedback.Accurate) *AlertFeedbackUpsert {
	u.Set(alertfeedback.FieldAccurate, v)
	return u
}

// UpdateAccurate sets the "accurate" field to the value that was provided on create.
func (u *AlertFeedbackUpsert) UpdateAccurate() *AlertFeedbackUpsert {
	u.SetExcluded(alertfeedback.FieldAccurate)
	return u
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (u *AlertFeedbackUpsert) SetDocumentationAvailable(v bool) *AlertFeedbackUpsert {
	u.Set(alertfeedback.FieldDocumentationAvailable, v)
	return u
}

// UpdateDocumentationAvailable sets the "documentation_available" field to the value that was provided on create.
func (u *AlertFeedbackUpsert) UpdateDocumentationAvailable() *AlertFeedbackUpsert {
	u.SetExcluded(alertfeedback.FieldDocumentationAvailable)
	return u
}

// SetDocumentationNeedsUpdate sets the "documentation_needs_update" field.
func (u *AlertFeedbackUpsert) SetDocumentationNeedsUpdate(v bool) *AlertFeedbackUpsert {
	u.Set(alertfeedback.FieldDocumentationNeedsUpdate, v)
	return u
}

// UpdateDocumentationNeedsUpdate sets the "documentation_needs_update" field to the value that was provided on create.
func (u *AlertFeedbackUpsert) UpdateDocumentationNeedsUpdate() *AlertFeedbackUpsert {
	u.SetExcluded(alertfeedback.FieldDocumentationNeedsUpdate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AlertFeedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(alertfeedback.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AlertFeedbackUpsertOne) UpdateNewValues() *AlertFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(alertfeedback.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(alertfeedback.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AlertFeedback.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AlertFeedbackUpsertOne) Ignore() *AlertFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AlertFeedbackUpsertOne) DoNothing() *AlertFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AlertFeedbackCreate.OnConflict
// documentation for more info.
func (u *AlertFeedbackUpsertOne) Update(set func(*AlertFeedbackUpsert)) *AlertFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AlertFeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetAlertInstanceID sets the "alert_instance_id" field.
func (u *AlertFeedbackUpsertOne) SetAlertInstanceID(v uuid.UUID) *AlertFeedbackUpsertOne {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.SetAlertInstanceID(v)
	})
}

// UpdateAlertInstanceID sets the "alert_instance_id" field to the value that was provided on create.
func (u *AlertFeedbackUpsertOne) UpdateAlertInstanceID() *AlertFeedbackUpsertOne {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.UpdateAlertInstanceID()
	})
}

// SetActionable sets the "actionable" field.
func (u *AlertFeedbackUpsertOne) SetActionable(v bool) *AlertFeedbackUpsertOne {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.SetActionable(v)
	})
}

// UpdateActionable sets the "actionable" field to the value that was provided on create.
func (u *AlertFeedbackUpsertOne) UpdateActionable() *AlertFeedbackUpsertOne {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.UpdateActionable()
	})
}

// SetAccurate sets the "accurate" field.
func (u *AlertFeedbackUpsertOne) SetAccurate(v alertfeedback.Accurate) *AlertFeedbackUpsertOne {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.SetAccurate(v)
	})
}

// UpdateAccurate sets the "accurate" field to the value that was provided on create.
func (u *AlertFeedbackUpsertOne) UpdateAccurate() *AlertFeedbackUpsertOne {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.UpdateAccurate()
	})
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (u *AlertFeedbackUpsertOne) SetDocumentationAvailable(v bool) *AlertFeedbackUpsertOne {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.SetDocumentationAvailable(v)
	})
}

// UpdateDocumentationAvailable sets the "documentation_available" field to the value that was provided on create.
func (u *AlertFeedbackUpsertOne) UpdateDocumentationAvailable() *AlertFeedbackUpsertOne {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.UpdateDocumentationAvailable()
	})
}

// SetDocumentationNeedsUpdate sets the "documentation_needs_update" field.
func (u *AlertFeedbackUpsertOne) SetDocumentationNeedsUpdate(v bool) *AlertFeedbackUpsertOne {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.SetDocumentationNeedsUpdate(v)
	})
}

// UpdateDocumentationNeedsUpdate sets the "documentation_needs_update" field to the value that was provided on create.
func (u *AlertFeedbackUpsertOne) UpdateDocumentationNeedsUpdate() *AlertFeedbackUpsertOne {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.UpdateDocumentationNeedsUpdate()
	})
}

// Exec executes the query.
func (u *AlertFeedbackUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AlertFeedbackCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AlertFeedbackUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AlertFeedbackUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AlertFeedbackUpsertOne.ID is not supported by MySQL driver. Use AlertFeedbackUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AlertFeedbackUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AlertFeedbackCreateBulk is the builder for creating many AlertFeedback entities in bulk.
type AlertFeedbackCreateBulk struct {
	config
	err      error
	builders []*AlertFeedbackCreate
	conflict []sql.ConflictOption
}

// Save creates the AlertFeedback entities in the database.
func (afcb *AlertFeedbackCreateBulk) Save(ctx context.Context) ([]*AlertFeedback, error) {
	if afcb.err != nil {
		return nil, afcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(afcb.builders))
	nodes := make([]*AlertFeedback, len(afcb.builders))
	mutators := make([]Mutator, len(afcb.builders))
	for i := range afcb.builders {
		func(i int, root context.Context) {
			builder := afcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlertFeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, afcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = afcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, afcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, afcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (afcb *AlertFeedbackCreateBulk) SaveX(ctx context.Context) []*AlertFeedback {
	v, err := afcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (afcb *AlertFeedbackCreateBulk) Exec(ctx context.Context) error {
	_, err := afcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afcb *AlertFeedbackCreateBulk) ExecX(ctx context.Context) {
	if err := afcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AlertFeedback.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AlertFeedbackUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (afcb *AlertFeedbackCreateBulk) OnConflict(opts ...sql.ConflictOption) *AlertFeedbackUpsertBulk {
	afcb.conflict = opts
	return &AlertFeedbackUpsertBulk{
		create: afcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AlertFeedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (afcb *AlertFeedbackCreateBulk) OnConflictColumns(columns ...string) *AlertFeedbackUpsertBulk {
	afcb.conflict = append(afcb.conflict, sql.ConflictColumns(columns...))
	return &AlertFeedbackUpsertBulk{
		create: afcb,
	}
}

// AlertFeedbackUpsertBulk is the builder for "upsert"-ing
// a bulk of AlertFeedback nodes.
type AlertFeedbackUpsertBulk struct {
	create *AlertFeedbackCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AlertFeedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(alertfeedback.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AlertFeedbackUpsertBulk) UpdateNewValues() *AlertFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(alertfeedback.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(alertfeedback.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AlertFeedback.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AlertFeedbackUpsertBulk) Ignore() *AlertFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AlertFeedbackUpsertBulk) DoNothing() *AlertFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AlertFeedbackCreateBulk.OnConflict
// documentation for more info.
func (u *AlertFeedbackUpsertBulk) Update(set func(*AlertFeedbackUpsert)) *AlertFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AlertFeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetAlertInstanceID sets the "alert_instance_id" field.
func (u *AlertFeedbackUpsertBulk) SetAlertInstanceID(v uuid.UUID) *AlertFeedbackUpsertBulk {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.SetAlertInstanceID(v)
	})
}

// UpdateAlertInstanceID sets the "alert_instance_id" field to the value that was provided on create.
func (u *AlertFeedbackUpsertBulk) UpdateAlertInstanceID() *AlertFeedbackUpsertBulk {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.UpdateAlertInstanceID()
	})
}

// SetActionable sets the "actionable" field.
func (u *AlertFeedbackUpsertBulk) SetActionable(v bool) *AlertFeedbackUpsertBulk {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.SetActionable(v)
	})
}

// UpdateActionable sets the "actionable" field to the value that was provided on create.
func (u *AlertFeedbackUpsertBulk) UpdateActionable() *AlertFeedbackUpsertBulk {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.UpdateActionable()
	})
}

// SetAccurate sets the "accurate" field.
func (u *AlertFeedbackUpsertBulk) SetAccurate(v alertfeedback.Accurate) *AlertFeedbackUpsertBulk {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.SetAccurate(v)
	})
}

// UpdateAccurate sets the "accurate" field to the value that was provided on create.
func (u *AlertFeedbackUpsertBulk) UpdateAccurate() *AlertFeedbackUpsertBulk {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.UpdateAccurate()
	})
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (u *AlertFeedbackUpsertBulk) SetDocumentationAvailable(v bool) *AlertFeedbackUpsertBulk {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.SetDocumentationAvailable(v)
	})
}

// UpdateDocumentationAvailable sets the "documentation_available" field to the value that was provided on create.
func (u *AlertFeedbackUpsertBulk) UpdateDocumentationAvailable() *AlertFeedbackUpsertBulk {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.UpdateDocumentationAvailable()
	})
}

// SetDocumentationNeedsUpdate sets the "documentation_needs_update" field.
func (u *AlertFeedbackUpsertBulk) SetDocumentationNeedsUpdate(v bool) *AlertFeedbackUpsertBulk {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.SetDocumentationNeedsUpdate(v)
	})
}

// UpdateDocumentationNeedsUpdate sets the "documentation_needs_update" field to the value that was provided on create.
func (u *AlertFeedbackUpsertBulk) UpdateDocumentationNeedsUpdate() *AlertFeedbackUpsertBulk {
	return u.Update(func(s *AlertFeedbackUpsert) {
		s.UpdateDocumentationNeedsUpdate()
	})
}

// Exec executes the query.
func (u *AlertFeedbackUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AlertFeedbackCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AlertFeedbackCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AlertFeedbackUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
