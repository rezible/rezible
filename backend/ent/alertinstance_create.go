// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/alertfeedback"
	"github.com/rezible/rezible/ent/alertinstance"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/tenant"
)

// AlertInstanceCreate is the builder for creating a AlertInstance entity.
type AlertInstanceCreate struct {
	config
	mutation *AlertInstanceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (aic *AlertInstanceCreate) SetTenantID(i int) *AlertInstanceCreate {
	aic.mutation.SetTenantID(i)
	return aic
}

// SetAlertID sets the "alert_id" field.
func (aic *AlertInstanceCreate) SetAlertID(u uuid.UUID) *AlertInstanceCreate {
	aic.mutation.SetAlertID(u)
	return aic
}

// SetEventID sets the "event_id" field.
func (aic *AlertInstanceCreate) SetEventID(u uuid.UUID) *AlertInstanceCreate {
	aic.mutation.SetEventID(u)
	return aic
}

// SetID sets the "id" field.
func (aic *AlertInstanceCreate) SetID(u uuid.UUID) *AlertInstanceCreate {
	aic.mutation.SetID(u)
	return aic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aic *AlertInstanceCreate) SetNillableID(u *uuid.UUID) *AlertInstanceCreate {
	if u != nil {
		aic.SetID(*u)
	}
	return aic
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (aic *AlertInstanceCreate) SetTenant(t *Tenant) *AlertInstanceCreate {
	return aic.SetTenantID(t.ID)
}

// SetAlert sets the "alert" edge to the Alert entity.
func (aic *AlertInstanceCreate) SetAlert(a *Alert) *AlertInstanceCreate {
	return aic.SetAlertID(a.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (aic *AlertInstanceCreate) SetEvent(e *Event) *AlertInstanceCreate {
	return aic.SetEventID(e.ID)
}

// AddFeedbackIDs adds the "feedback" edge to the AlertFeedback entity by IDs.
func (aic *AlertInstanceCreate) AddFeedbackIDs(ids ...uuid.UUID) *AlertInstanceCreate {
	aic.mutation.AddFeedbackIDs(ids...)
	return aic
}

// AddFeedback adds the "feedback" edges to the AlertFeedback entity.
func (aic *AlertInstanceCreate) AddFeedback(a ...*AlertFeedback) *AlertInstanceCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aic.AddFeedbackIDs(ids...)
}

// Mutation returns the AlertInstanceMutation object of the builder.
func (aic *AlertInstanceCreate) Mutation() *AlertInstanceMutation {
	return aic.mutation
}

// Save creates the AlertInstance in the database.
func (aic *AlertInstanceCreate) Save(ctx context.Context) (*AlertInstance, error) {
	if err := aic.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, aic.sqlSave, aic.mutation, aic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aic *AlertInstanceCreate) SaveX(ctx context.Context) *AlertInstance {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *AlertInstanceCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *AlertInstanceCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aic *AlertInstanceCreate) defaults() error {
	if _, ok := aic.mutation.ID(); !ok {
		if alertinstance.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized alertinstance.DefaultID (forgotten import ent/runtime?)")
		}
		v := alertinstance.DefaultID()
		aic.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (aic *AlertInstanceCreate) check() error {
	if _, ok := aic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "AlertInstance.tenant_id"`)}
	}
	if _, ok := aic.mutation.AlertID(); !ok {
		return &ValidationError{Name: "alert_id", err: errors.New(`ent: missing required field "AlertInstance.alert_id"`)}
	}
	if _, ok := aic.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "AlertInstance.event_id"`)}
	}
	if len(aic.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "AlertInstance.tenant"`)}
	}
	if len(aic.mutation.AlertIDs()) == 0 {
		return &ValidationError{Name: "alert", err: errors.New(`ent: missing required edge "AlertInstance.alert"`)}
	}
	if len(aic.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "AlertInstance.event"`)}
	}
	return nil
}

func (aic *AlertInstanceCreate) sqlSave(ctx context.Context) (*AlertInstance, error) {
	if err := aic.check(); err != nil {
		return nil, err
	}
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	aic.mutation.id = &_node.ID
	aic.mutation.done = true
	return _node, nil
}

func (aic *AlertInstanceCreate) createSpec() (*AlertInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &AlertInstance{config: aic.config}
		_spec = sqlgraph.NewCreateSpec(alertinstance.Table, sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = aic.conflict
	if id, ok := aic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := aic.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.TenantTable,
			Columns: []string{alertinstance.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aic.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.AlertTable,
			Columns: []string{alertinstance.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AlertID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aic.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertinstance.EventTable,
			Columns: []string{alertinstance.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aic.mutation.FeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   alertinstance.FeedbackTable,
			Columns: []string{alertinstance.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AlertInstance.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AlertInstanceUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (aic *AlertInstanceCreate) OnConflict(opts ...sql.ConflictOption) *AlertInstanceUpsertOne {
	aic.conflict = opts
	return &AlertInstanceUpsertOne{
		create: aic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AlertInstance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aic *AlertInstanceCreate) OnConflictColumns(columns ...string) *AlertInstanceUpsertOne {
	aic.conflict = append(aic.conflict, sql.ConflictColumns(columns...))
	return &AlertInstanceUpsertOne{
		create: aic,
	}
}

type (
	// AlertInstanceUpsertOne is the builder for "upsert"-ing
	//  one AlertInstance node.
	AlertInstanceUpsertOne struct {
		create *AlertInstanceCreate
	}

	// AlertInstanceUpsert is the "OnConflict" setter.
	AlertInstanceUpsert struct {
		*sql.UpdateSet
	}
)

// SetAlertID sets the "alert_id" field.
func (u *AlertInstanceUpsert) SetAlertID(v uuid.UUID) *AlertInstanceUpsert {
	u.Set(alertinstance.FieldAlertID, v)
	return u
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *AlertInstanceUpsert) UpdateAlertID() *AlertInstanceUpsert {
	u.SetExcluded(alertinstance.FieldAlertID)
	return u
}

// SetEventID sets the "event_id" field.
func (u *AlertInstanceUpsert) SetEventID(v uuid.UUID) *AlertInstanceUpsert {
	u.Set(alertinstance.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *AlertInstanceUpsert) UpdateEventID() *AlertInstanceUpsert {
	u.SetExcluded(alertinstance.FieldEventID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AlertInstance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(alertinstance.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AlertInstanceUpsertOne) UpdateNewValues() *AlertInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(alertinstance.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(alertinstance.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AlertInstance.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AlertInstanceUpsertOne) Ignore() *AlertInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AlertInstanceUpsertOne) DoNothing() *AlertInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AlertInstanceCreate.OnConflict
// documentation for more info.
func (u *AlertInstanceUpsertOne) Update(set func(*AlertInstanceUpsert)) *AlertInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AlertInstanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetAlertID sets the "alert_id" field.
func (u *AlertInstanceUpsertOne) SetAlertID(v uuid.UUID) *AlertInstanceUpsertOne {
	return u.Update(func(s *AlertInstanceUpsert) {
		s.SetAlertID(v)
	})
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *AlertInstanceUpsertOne) UpdateAlertID() *AlertInstanceUpsertOne {
	return u.Update(func(s *AlertInstanceUpsert) {
		s.UpdateAlertID()
	})
}

// SetEventID sets the "event_id" field.
func (u *AlertInstanceUpsertOne) SetEventID(v uuid.UUID) *AlertInstanceUpsertOne {
	return u.Update(func(s *AlertInstanceUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *AlertInstanceUpsertOne) UpdateEventID() *AlertInstanceUpsertOne {
	return u.Update(func(s *AlertInstanceUpsert) {
		s.UpdateEventID()
	})
}

// Exec executes the query.
func (u *AlertInstanceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AlertInstanceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AlertInstanceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AlertInstanceUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AlertInstanceUpsertOne.ID is not supported by MySQL driver. Use AlertInstanceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AlertInstanceUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AlertInstanceCreateBulk is the builder for creating many AlertInstance entities in bulk.
type AlertInstanceCreateBulk struct {
	config
	err      error
	builders []*AlertInstanceCreate
	conflict []sql.ConflictOption
}

// Save creates the AlertInstance entities in the database.
func (aicb *AlertInstanceCreateBulk) Save(ctx context.Context) ([]*AlertInstance, error) {
	if aicb.err != nil {
		return nil, aicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*AlertInstance, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlertInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *AlertInstanceCreateBulk) SaveX(ctx context.Context) []*AlertInstance {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *AlertInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *AlertInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AlertInstance.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AlertInstanceUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (aicb *AlertInstanceCreateBulk) OnConflict(opts ...sql.ConflictOption) *AlertInstanceUpsertBulk {
	aicb.conflict = opts
	return &AlertInstanceUpsertBulk{
		create: aicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AlertInstance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aicb *AlertInstanceCreateBulk) OnConflictColumns(columns ...string) *AlertInstanceUpsertBulk {
	aicb.conflict = append(aicb.conflict, sql.ConflictColumns(columns...))
	return &AlertInstanceUpsertBulk{
		create: aicb,
	}
}

// AlertInstanceUpsertBulk is the builder for "upsert"-ing
// a bulk of AlertInstance nodes.
type AlertInstanceUpsertBulk struct {
	create *AlertInstanceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AlertInstance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(alertinstance.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AlertInstanceUpsertBulk) UpdateNewValues() *AlertInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(alertinstance.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(alertinstance.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AlertInstance.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AlertInstanceUpsertBulk) Ignore() *AlertInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AlertInstanceUpsertBulk) DoNothing() *AlertInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AlertInstanceCreateBulk.OnConflict
// documentation for more info.
func (u *AlertInstanceUpsertBulk) Update(set func(*AlertInstanceUpsert)) *AlertInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AlertInstanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetAlertID sets the "alert_id" field.
func (u *AlertInstanceUpsertBulk) SetAlertID(v uuid.UUID) *AlertInstanceUpsertBulk {
	return u.Update(func(s *AlertInstanceUpsert) {
		s.SetAlertID(v)
	})
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *AlertInstanceUpsertBulk) UpdateAlertID() *AlertInstanceUpsertBulk {
	return u.Update(func(s *AlertInstanceUpsert) {
		s.UpdateAlertID()
	})
}

// SetEventID sets the "event_id" field.
func (u *AlertInstanceUpsertBulk) SetEventID(v uuid.UUID) *AlertInstanceUpsertBulk {
	return u.Update(func(s *AlertInstanceUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *AlertInstanceUpsertBulk) UpdateEventID() *AlertInstanceUpsertBulk {
	return u.Update(func(s *AlertInstanceUpsert) {
		s.UpdateEventID()
	})
}

// Exec executes the query.
func (u *AlertInstanceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AlertInstanceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AlertInstanceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AlertInstanceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
