// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alertinstance"
	"github.com/rezible/rezible/ent/event"
	"github.com/rezible/rezible/ent/eventannotation"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/predicate"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetProviderID sets the "provider_id" field.
func (eu *EventUpdate) SetProviderID(s string) *EventUpdate {
	eu.mutation.SetProviderID(s)
	return eu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableProviderID(s *string) *EventUpdate {
	if s != nil {
		eu.SetProviderID(*s)
	}
	return eu
}

// SetTimestamp sets the "timestamp" field.
func (eu *EventUpdate) SetTimestamp(t time.Time) *EventUpdate {
	eu.mutation.SetTimestamp(t)
	return eu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTimestamp(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetTimestamp(*t)
	}
	return eu
}

// SetKind sets the "kind" field.
func (eu *EventUpdate) SetKind(e event.Kind) *EventUpdate {
	eu.mutation.SetKind(e)
	return eu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (eu *EventUpdate) SetNillableKind(e *event.Kind) *EventUpdate {
	if e != nil {
		eu.SetKind(*e)
	}
	return eu
}

// SetTitle sets the "title" field.
func (eu *EventUpdate) SetTitle(s string) *EventUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTitle(s *string) *EventUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDescription(s *string) *EventUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// SetSource sets the "source" field.
func (eu *EventUpdate) SetSource(s string) *EventUpdate {
	eu.mutation.SetSource(s)
	return eu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSource(s *string) *EventUpdate {
	if s != nil {
		eu.SetSource(*s)
	}
	return eu
}

// AddAlertInstanceIDs adds the "alert_instance" edge to the AlertInstance entity by IDs.
func (eu *EventUpdate) AddAlertInstanceIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddAlertInstanceIDs(ids...)
	return eu
}

// AddAlertInstance adds the "alert_instance" edges to the AlertInstance entity.
func (eu *EventUpdate) AddAlertInstance(a ...*AlertInstance) *EventUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddAlertInstanceIDs(ids...)
}

// AddIncidentEventIDs adds the "incident_event" edge to the IncidentEvent entity by IDs.
func (eu *EventUpdate) AddIncidentEventIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddIncidentEventIDs(ids...)
	return eu
}

// AddIncidentEvent adds the "incident_event" edges to the IncidentEvent entity.
func (eu *EventUpdate) AddIncidentEvent(i ...*IncidentEvent) *EventUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddIncidentEventIDs(ids...)
}

// AddAnnotationIDs adds the "annotations" edge to the EventAnnotation entity by IDs.
func (eu *EventUpdate) AddAnnotationIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddAnnotationIDs(ids...)
	return eu
}

// AddAnnotations adds the "annotations" edges to the EventAnnotation entity.
func (eu *EventUpdate) AddAnnotations(e ...*EventAnnotation) *EventUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddAnnotationIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearAlertInstance clears all "alert_instance" edges to the AlertInstance entity.
func (eu *EventUpdate) ClearAlertInstance() *EventUpdate {
	eu.mutation.ClearAlertInstance()
	return eu
}

// RemoveAlertInstanceIDs removes the "alert_instance" edge to AlertInstance entities by IDs.
func (eu *EventUpdate) RemoveAlertInstanceIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveAlertInstanceIDs(ids...)
	return eu
}

// RemoveAlertInstance removes "alert_instance" edges to AlertInstance entities.
func (eu *EventUpdate) RemoveAlertInstance(a ...*AlertInstance) *EventUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveAlertInstanceIDs(ids...)
}

// ClearIncidentEvent clears all "incident_event" edges to the IncidentEvent entity.
func (eu *EventUpdate) ClearIncidentEvent() *EventUpdate {
	eu.mutation.ClearIncidentEvent()
	return eu
}

// RemoveIncidentEventIDs removes the "incident_event" edge to IncidentEvent entities by IDs.
func (eu *EventUpdate) RemoveIncidentEventIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveIncidentEventIDs(ids...)
	return eu
}

// RemoveIncidentEvent removes "incident_event" edges to IncidentEvent entities.
func (eu *EventUpdate) RemoveIncidentEvent(i ...*IncidentEvent) *EventUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveIncidentEventIDs(ids...)
}

// ClearAnnotations clears all "annotations" edges to the EventAnnotation entity.
func (eu *EventUpdate) ClearAnnotations() *EventUpdate {
	eu.mutation.ClearAnnotations()
	return eu
}

// RemoveAnnotationIDs removes the "annotations" edge to EventAnnotation entities by IDs.
func (eu *EventUpdate) RemoveAnnotationIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveAnnotationIDs(ids...)
	return eu
}

// RemoveAnnotations removes "annotations" edges to EventAnnotation entities.
func (eu *EventUpdate) RemoveAnnotations(e ...*EventAnnotation) *EventUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveAnnotationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Kind(); ok {
		if err := event.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Event.kind": %w`, err)}
		}
	}
	if eu.mutation.TenantCleared() && len(eu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Event.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.ProviderID(); ok {
		_spec.SetField(event.FieldProviderID, field.TypeString, value)
	}
	if value, ok := eu.mutation.Timestamp(); ok {
		_spec.SetField(event.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Kind(); ok {
		_spec.SetField(event.FieldKind, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if value, ok := eu.mutation.Source(); ok {
		_spec.SetField(event.FieldSource, field.TypeString, value)
	}
	if eu.mutation.AlertInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AlertInstanceTable,
			Columns: []string{event.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedAlertInstanceIDs(); len(nodes) > 0 && !eu.mutation.AlertInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AlertInstanceTable,
			Columns: []string{event.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AlertInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AlertInstanceTable,
			Columns: []string{event.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.IncidentEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.IncidentEventTable,
			Columns: []string{event.IncidentEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedIncidentEventIDs(); len(nodes) > 0 && !eu.mutation.IncidentEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.IncidentEventTable,
			Columns: []string{event.IncidentEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.IncidentEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.IncidentEventTable,
			Columns: []string{event.IncidentEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AnnotationsTable,
			Columns: []string{event.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !eu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AnnotationsTable,
			Columns: []string{event.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AnnotationsTable,
			Columns: []string{event.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetProviderID sets the "provider_id" field.
func (euo *EventUpdateOne) SetProviderID(s string) *EventUpdateOne {
	euo.mutation.SetProviderID(s)
	return euo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableProviderID(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetProviderID(*s)
	}
	return euo
}

// SetTimestamp sets the "timestamp" field.
func (euo *EventUpdateOne) SetTimestamp(t time.Time) *EventUpdateOne {
	euo.mutation.SetTimestamp(t)
	return euo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTimestamp(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetTimestamp(*t)
	}
	return euo
}

// SetKind sets the "kind" field.
func (euo *EventUpdateOne) SetKind(e event.Kind) *EventUpdateOne {
	euo.mutation.SetKind(e)
	return euo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableKind(e *event.Kind) *EventUpdateOne {
	if e != nil {
		euo.SetKind(*e)
	}
	return euo
}

// SetTitle sets the "title" field.
func (euo *EventUpdateOne) SetTitle(s string) *EventUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTitle(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDescription(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// SetSource sets the "source" field.
func (euo *EventUpdateOne) SetSource(s string) *EventUpdateOne {
	euo.mutation.SetSource(s)
	return euo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSource(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetSource(*s)
	}
	return euo
}

// AddAlertInstanceIDs adds the "alert_instance" edge to the AlertInstance entity by IDs.
func (euo *EventUpdateOne) AddAlertInstanceIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddAlertInstanceIDs(ids...)
	return euo
}

// AddAlertInstance adds the "alert_instance" edges to the AlertInstance entity.
func (euo *EventUpdateOne) AddAlertInstance(a ...*AlertInstance) *EventUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddAlertInstanceIDs(ids...)
}

// AddIncidentEventIDs adds the "incident_event" edge to the IncidentEvent entity by IDs.
func (euo *EventUpdateOne) AddIncidentEventIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddIncidentEventIDs(ids...)
	return euo
}

// AddIncidentEvent adds the "incident_event" edges to the IncidentEvent entity.
func (euo *EventUpdateOne) AddIncidentEvent(i ...*IncidentEvent) *EventUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddIncidentEventIDs(ids...)
}

// AddAnnotationIDs adds the "annotations" edge to the EventAnnotation entity by IDs.
func (euo *EventUpdateOne) AddAnnotationIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddAnnotationIDs(ids...)
	return euo
}

// AddAnnotations adds the "annotations" edges to the EventAnnotation entity.
func (euo *EventUpdateOne) AddAnnotations(e ...*EventAnnotation) *EventUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddAnnotationIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearAlertInstance clears all "alert_instance" edges to the AlertInstance entity.
func (euo *EventUpdateOne) ClearAlertInstance() *EventUpdateOne {
	euo.mutation.ClearAlertInstance()
	return euo
}

// RemoveAlertInstanceIDs removes the "alert_instance" edge to AlertInstance entities by IDs.
func (euo *EventUpdateOne) RemoveAlertInstanceIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveAlertInstanceIDs(ids...)
	return euo
}

// RemoveAlertInstance removes "alert_instance" edges to AlertInstance entities.
func (euo *EventUpdateOne) RemoveAlertInstance(a ...*AlertInstance) *EventUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveAlertInstanceIDs(ids...)
}

// ClearIncidentEvent clears all "incident_event" edges to the IncidentEvent entity.
func (euo *EventUpdateOne) ClearIncidentEvent() *EventUpdateOne {
	euo.mutation.ClearIncidentEvent()
	return euo
}

// RemoveIncidentEventIDs removes the "incident_event" edge to IncidentEvent entities by IDs.
func (euo *EventUpdateOne) RemoveIncidentEventIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveIncidentEventIDs(ids...)
	return euo
}

// RemoveIncidentEvent removes "incident_event" edges to IncidentEvent entities.
func (euo *EventUpdateOne) RemoveIncidentEvent(i ...*IncidentEvent) *EventUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveIncidentEventIDs(ids...)
}

// ClearAnnotations clears all "annotations" edges to the EventAnnotation entity.
func (euo *EventUpdateOne) ClearAnnotations() *EventUpdateOne {
	euo.mutation.ClearAnnotations()
	return euo
}

// RemoveAnnotationIDs removes the "annotations" edge to EventAnnotation entities by IDs.
func (euo *EventUpdateOne) RemoveAnnotationIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveAnnotationIDs(ids...)
	return euo
}

// RemoveAnnotations removes "annotations" edges to EventAnnotation entities.
func (euo *EventUpdateOne) RemoveAnnotations(e ...*EventAnnotation) *EventUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveAnnotationIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Kind(); ok {
		if err := event.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Event.kind": %w`, err)}
		}
	}
	if euo.mutation.TenantCleared() && len(euo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Event.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.ProviderID(); ok {
		_spec.SetField(event.FieldProviderID, field.TypeString, value)
	}
	if value, ok := euo.mutation.Timestamp(); ok {
		_spec.SetField(event.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Kind(); ok {
		_spec.SetField(event.FieldKind, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if value, ok := euo.mutation.Source(); ok {
		_spec.SetField(event.FieldSource, field.TypeString, value)
	}
	if euo.mutation.AlertInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AlertInstanceTable,
			Columns: []string{event.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedAlertInstanceIDs(); len(nodes) > 0 && !euo.mutation.AlertInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AlertInstanceTable,
			Columns: []string{event.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AlertInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AlertInstanceTable,
			Columns: []string{event.AlertInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.IncidentEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.IncidentEventTable,
			Columns: []string{event.IncidentEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedIncidentEventIDs(); len(nodes) > 0 && !euo.mutation.IncidentEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.IncidentEventTable,
			Columns: []string{event.IncidentEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.IncidentEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.IncidentEventTable,
			Columns: []string{event.IncidentEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AnnotationsTable,
			Columns: []string{event.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !euo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AnnotationsTable,
			Columns: []string{event.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.AnnotationsTable,
			Columns: []string{event.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(euo.modifiers...)
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
